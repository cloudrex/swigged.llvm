<?xml version="1.0"?>
<package >
  <metadata>
    <!-- The identifier that must be unique within the hosting gallery -->
    <id>swigged.llvm</id>
    <title>swigged.llvm</title>

    <version>5.0.1</version>

    <!-- Authors contain text that appears directly on the gallery -->
    <authors>Ken Domino</authors>
    
    <!-- Owners are typically nuget.org identities that allow gallery
            users to easily find other packages by the same owners.
    -->
    <owners>Ken Domino</owners>

    <!-- License, project, icon links for the gallery -->
    <projectUrl>https://github.com/kaby76/swigged-llvm</projectUrl>
    <iconUrl>https://raw.github.com/kaby76/swigged-llvm/master/logo.png</iconUrl>
    <licenseUrl>https://raw.github.com/kaby76/swigged-llvm/master/LICENSE</licenseUrl>

    <requireLicenseAcceptance>false</requireLicenseAcceptance>
    <description>A C# wrapper API of LLVM-C for Windows (x86, x64), Ubuntu (x64).</description>
    <releaseNotes>
* Version 5.0.1
Updating to LLVM 5.0. Check out LLVM Release Notes for changes in the API. http://releases.llvm.org/5.0.0/docs/ReleaseNotes.html

* Version 4.0.14
Fix of 4.0.13 (wrong path).

* Version 4.0.13
Updated .targets file for builds on Windows, fixing override of PreBuildEvent.

* Version 4.0.12
Updated .targets file for builds on Windows.

* Version 4.0.11
Fixing problem with NuGet spec--apparently, a dll is referenced only with either the dlls in netstandard1.1 or netstandard1.5. A
very bad rule because swigged.llvm.dll is strictly a netstandard1.1 file, but it will not add the reference any other way.
Otherwise, the functionality is identical to 4.0.10.

* Version 4.0.10
General availability. Worked out version and dependencies for Net Framework from 4.5 less than or equal to 'your app NF version' less than or equal to 4.7. Added ORC api's.
Added in all targets for LLVM. Example tests include PTX code generation and running using ManagedCUDA on a GPU.

* Version 4.0.9-alpha
Working out dependencies and versions. Instead of hardwiring everything to fixed version, allow user to update to suit build.
  
* Version 4.0.8-alpha
Use "Swigged.LLVM.Helper.Adjust.Path();" before 1st LLVM call to alter PATH variable within process so that it can find swigged-llvm-native.dll without having to copy the dll around. There is no equivalent fix for Ubuntu unfortunately. You must still "dotnet publish -r ubuntu.16.04-x64" and copy swigged-llvm-native.so to the build output directory.
  
* Version 4.0.7-alpha
Added in Android builds for x86 and armeabi targets; cleaned up package directory structure.

* Version 4.0.6-alpha
Added in fixes for VerifyModule, CreateMCJITCompilerForModule, MCJITCompilerOptions, InitializeMCJITCompilerOptions, MyString.
       
Object files provided in this package are a Release build in Net Standard 1.1 (swigged-llvm library) and 1.6 (Helper library).

When building with Swigged.llvm, select Platform = "AnyCPU", config = "Debug" or "Release".

On Windows, in the properties for the executable, un-check "Prefer 32-bit" in Build properties, and check "Enable native code debugging". If you are using Net Core or Standard, this option is unavailable--I'm not sure why it is.
If you are building an app with Net Framework 4.5 through 4.6.1, you must manually copy the file swigged-llvm-native.dll to your executable directory. With 4.6.2 and beyond, it will find the library in your packages/ directory.
If you are delivering your app, you will need to copy the dll to the directory containing your app.

On Ubuntu, use Net Core to build your C# program. You may need to copy the swigged-llvm-native.so file to the directory containing your app executable.

For further information, see https://github.com/kaby76/swigged-llvm.
    </releaseNotes>

    <!-- Copyright information -->
    <copyright>Copyright Â© 2017</copyright>

    <!-- Tags appear in the gallery and can be used for tag searches -->
    <tags>LLVM SWIG native C# compilers bindings pinvoke Windows Ubuntu</tags>

    <!-- Dependencies are automatically installed when the package is
    installed -->
    <!-- For full list, see 
    https://docs.microsoft.com/en-us/nuget/schema/target-frameworks
    Note, I have seen some targetFramework="..." with some
    undocumented strings: ".NETFramework4.6.2", ".NETFramework4.5.2",
    ... Not sure if they work. --> 
    <dependencies>
      <group targetFramework="net45" />
      <group targetFramework="net451" />
      <group targetFramework="net452" />
      <group targetFramework="net46" />
      <group targetFramework="net461" />
      <group targetFramework="net462">
	<dependency id="System.Console" version="[4.0.0,)" />
	<dependency id="System.IO.FileSystem" version="[4.0.1,)" />
	<dependency id="System.IO.FileSystem.Primitives" version="[4.0.1,)" />
	<dependency id="System.Runtime" version="[4.1.0,)" />
	<dependency id="System.Runtime.Extensions" version="[4.1.0,)" />
	<dependency id="System.Runtime.InteropServices.RuntimeInformation" version="[4.3.0,)" />
	<dependency id="System.Runtime.InteropServices" version="[4.1.0,)" />
      </group>
      <group targetFramework="net47">
	<dependency id="System.Console" version="[4.0.0,)" />
	<dependency id="System.IO.FileSystem" version="[4.0.1,)" />
	<dependency id="System.IO.FileSystem.Primitives" version="[4.0.1,)" />
	<dependency id="System.Runtime" version="[4.1.0,)" />
	<dependency id="System.Runtime.Extensions" version="[4.1.0,)" />
	<dependency id="System.Runtime.InteropServices.RuntimeInformation" version="[4.3.0,)" />
      </group>

      <group targetFramework="netcore1.0" />
      <group targetFramework="netcore1.1" />
      <group targetFramework="netstandard1.5" />
      <group targetFramework="netstandard1.6" />
      <group targetFramework="netstandard2.0" />
      
<!--      <group targetFramework="Xamarin.iOS10">
      <group targetFramework="Xamarin.Mac20">      
      <group targetFramework="MonoAndroid">
-->
      
    </dependencies>

  </metadata>
  
  <files>
    <!-- There are two possible native dll's, for
     Release configuration, and x86 or x64 platform targets. As Nuget
     does not understand "x86" or "x64" platform targets, place these
     in an non-Nuget directory (i.e., not "build", "lib", etc.).
     -->
    <file src="swigged.llvm.native\x86-Release\Release\swigged-llvm-native.dll" target="win10\lib\x86" />
    <file src="swigged.llvm.native\x64-Release\Release\swigged-llvm-native.dll" target="win10\lib\x64" />
    <file src="swigged.llvm.native\ubuntu-16.04-Release\swigged-llvm-native.so" target="ubuntu-16.04/lib/x64" />

    <!-- There are three possible dll's for swigged.llvm,
    corresponding to Release configuration, and the three
    target frameworks, net45, net461, and netstandard1.6. Platform
    targets do not matter for the code as the MSIL is the same
    regardless. 
    -->
    <!-- I don't know why but stupid NuGet only picks one or the other
    netstandard directories, and the files contained only in that. So,
    it does not link in swigged.llvm.dll if it is really just a
    netstandard1.1 file, and only in that directory. Stupid NuGet
    undocumented rule. -->
    <file src="swigged.llvm\bin\Release\netstandard1.1\swigged.llvm.dll" target="lib\netstandard1.1" />
    <file src="swigged.llvm\bin\Release\netstandard1.1\swigged.llvm.dll" target="lib\netstandard1.5" />
    <file src="swigged.llvm.helper\bin\Release\netstandard1.5\swigged.llvm.helper.dll" target="lib\netstandard1.5" />
    
    <file src="swigged.llvm.targets" target="build\swigged.llvm.targets" />

  </files>
</package>
