<?xml version="1.0"?>
<package >
  <metadata>
    <!-- The identifier that must be unique within the hosting gallery -->
    <id>swigged.llvm</id>

    <version>4.0.3-alpha</version>

    <!-- Authors contain text that appears directly on the gallery -->
    <authors>Ken Domino</authors>
    
    <!-- Owners are typically nuget.org identities that allow gallery
            users to easily find other packages by the same owners.
    -->
    <owners>Ken Domino</owners>

    <!-- License, project, icon links for the gallery -->
    <projectUrl>https://github.com/kaby76/swigged-llvm</projectUrl>
    <iconUrl>https://raw.github.com/kaby76/swigged-llvm/master/logo.png</iconUrl>
    <licenseUrl>https://raw.github.com/kaby76/swigged-llvm/master/LICENSE</licenseUrl>

    <requireLicenseAcceptance>false</requireLicenseAcceptance>
    <description>A SWIG-generated C# API of LLVM-C.</description>
    <releaseNotes>
This API links statically with LLVM version 4.0+ branch. You do not need to install LLVM. As LLVM does not tag the branch, the sources used in the build may vary.

The DLL and SO files provided in this package are a Release build.

When building, either on Windows or Ubuntu, select Platform = "AnyCPU", config = "Debug" or "Release".

On Windows, in the properties for the executable, un-check "Prefer 32-bit" in Build properties, and check "Enable native code debugging". If you are using Net Core or Standard, this option is unavailable--I'm not sure why it is.

On Ubuntu, use Net Core to build your C# program.

Targets currently built for std.swigged.llvm are net45, net461, netstandard1.6. Targets for swigged.llvm.native (the native wrapper library for LLVM-C) is built for win10-x86, win10-x64, and ubuntu.16.04-x64. The appropriate swigged.llvm.native.dll/so file should be to your build directory in order to run.
      
For further information, see https://github.com/kaby76/swigged-llvm.
    </releaseNotes>

    <!-- Copyright information -->
    <copyright>Copyright Â© 2017</copyright>

    <!-- Tags appear in the gallery and can be used for tag searches -->
    <tags>LLVM SWIG native</tags>

    <!-- Dependencies are automatically installed when the package is installed -->
    <dependencies>
    </dependencies>
  </metadata>
  
  <files>
    <!-- There are two possible native dll's, for
     Release configuration, and x86 or x64 platform targets. As Nuget
     does not understand "x86" or "x64" platform targets, place these
     in an non-Nuget directory (i.e., not "build", "lib", etc.).
     -->
    <file src="win10-x86\Release\swigged.llvm.native.dll" target="win10-x86" />
    <file src="win10-x86\Release\swigged.llvm.native.pdb" target="win10-x86" />
    <file src="win10-x64\Release\swigged.llvm.native.dll" target="win10-x64" />
    <file src="win10-x64\Release\swigged.llvm.native.pdb" target="win10-x64" />
    <file src="ubuntu.16.04-x64\Release\swigged.llvm.native.so" target="ubuntu.16.04-x64" />

    <!-- There are three possible dll's for std.swigged.llvm,
    corresponding to Release configuration, and the three
    target frameworks, net45, net461, and netstandard1.6. Platform
    targets do not matter for the code as the MSIL is the same
    regardless. 
    -->
    <file src="std.swigged.llvm\any\Release\net45\std.swigged.llvm.dll" target="lib\net45" />
    <file src="std.swigged.llvm\any\Release\net45\std.swigged.llvm.pdb" target="lib\net45" />
    <file src="std.swigged.llvm\any\Release\net461\std.swigged.llvm.dll" target="lib\net461" />
    <file src="std.swigged.llvm\any\Release\net461\std.swigged.llvm.pdb" target="lib\net461" />
    <file src="std.swigged.llvm\any\Release\netstandard1.6\std.swigged.llvm.dll" target="lib\netstandard1.6" />
    <file src="std.swigged.llvm\any\Release\netstandard1.6\std.swigged.llvm.pdb" target="lib\netstandard1.6" />
    
<!--    <file src="swigged.llvm.targets" target="build\swigged.llvm.targets" /> -->

  </files>
</package>
