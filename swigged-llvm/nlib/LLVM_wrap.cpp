/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 3.0.13
 *
 * This file is not intended to be easily readable and contains a number of
 * coding conventions designed to improve portability and efficiency. Do not make
 * changes to this file unless you know what you are doing--modify the SWIG
 * interface file instead.
 * ----------------------------------------------------------------------------- */


#ifndef SWIGCSHARP
#define SWIGCSHARP
#endif



#ifdef __cplusplus
/* SwigValueWrapper is described in swig.swg */
template<typename T> class SwigValueWrapper {
  struct SwigMovePointer {
    T *ptr;
    SwigMovePointer(T *p) : ptr(p) { }
    ~SwigMovePointer() { delete ptr; }
    SwigMovePointer& operator=(SwigMovePointer& rhs) { T* oldptr = ptr; ptr = 0; delete oldptr; ptr = rhs.ptr; rhs.ptr = 0; return *this; }
  } pointer;
  SwigValueWrapper& operator=(const SwigValueWrapper<T>& rhs);
  SwigValueWrapper(const SwigValueWrapper<T>& rhs);
public:
  SwigValueWrapper() : pointer(0) { }
  SwigValueWrapper& operator=(const T& t) { SwigMovePointer tmp(new T(t)); pointer = tmp; return *this; }
  operator T&() const { return *pointer.ptr; }
  T *operator&() { return pointer.ptr; }
};

template <typename T> T SwigValueInit() {
  return T();
}
#endif

/* -----------------------------------------------------------------------------
 *  This section contains generic SWIG labels for method/variable
 *  declarations/attributes, and other compiler dependent labels.
 * ----------------------------------------------------------------------------- */

/* template workaround for compilers that cannot correctly implement the C++ standard */
#ifndef SWIGTEMPLATEDISAMBIGUATOR
# if defined(__SUNPRO_CC) && (__SUNPRO_CC <= 0x560)
#  define SWIGTEMPLATEDISAMBIGUATOR template
# elif defined(__HP_aCC)
/* Needed even with `aCC -AA' when `aCC -V' reports HP ANSI C++ B3910B A.03.55 */
/* If we find a maximum version that requires this, the test would be __HP_aCC <= 35500 for A.03.55 */
#  define SWIGTEMPLATEDISAMBIGUATOR template
# else
#  define SWIGTEMPLATEDISAMBIGUATOR
# endif
#endif

/* inline attribute */
#ifndef SWIGINLINE
# if defined(__cplusplus) || (defined(__GNUC__) && !defined(__STRICT_ANSI__))
#   define SWIGINLINE inline
# else
#   define SWIGINLINE
# endif
#endif

/* attribute recognised by some compilers to avoid 'unused' warnings */
#ifndef SWIGUNUSED
# if defined(__GNUC__)
#   if !(defined(__cplusplus)) || (__GNUC__ > 3 || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4))
#     define SWIGUNUSED __attribute__ ((__unused__))
#   else
#     define SWIGUNUSED
#   endif
# elif defined(__ICC)
#   define SWIGUNUSED __attribute__ ((__unused__))
# else
#   define SWIGUNUSED
# endif
#endif

#ifndef SWIG_MSC_UNSUPPRESS_4505
# if defined(_MSC_VER)
#   pragma warning(disable : 4505) /* unreferenced local function has been removed */
# endif
#endif

#ifndef SWIGUNUSEDPARM
# ifdef __cplusplus
#   define SWIGUNUSEDPARM(p)
# else
#   define SWIGUNUSEDPARM(p) p SWIGUNUSED
# endif
#endif

/* internal SWIG method */
#ifndef SWIGINTERN
# define SWIGINTERN static SWIGUNUSED
#endif

/* internal inline SWIG method */
#ifndef SWIGINTERNINLINE
# define SWIGINTERNINLINE SWIGINTERN SWIGINLINE
#endif

/* exporting methods */
#if defined(__GNUC__)
#  if (__GNUC__ >= 4) || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4)
#    ifndef GCC_HASCLASSVISIBILITY
#      define GCC_HASCLASSVISIBILITY
#    endif
#  endif
#endif

#ifndef SWIGEXPORT
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   if defined(STATIC_LINKED)
#     define SWIGEXPORT
#   else
#     define SWIGEXPORT __declspec(dllexport)
#   endif
# else
#   if defined(__GNUC__) && defined(GCC_HASCLASSVISIBILITY)
#     define SWIGEXPORT __attribute__ ((visibility("default")))
#   else
#     define SWIGEXPORT
#   endif
# endif
#endif

/* calling conventions for Windows */
#ifndef SWIGSTDCALL
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   define SWIGSTDCALL __stdcall
# else
#   define SWIGSTDCALL
# endif
#endif

/* Deal with Microsoft's attempt at deprecating C standard runtime functions */
#if !defined(SWIG_NO_CRT_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_CRT_SECURE_NO_DEPRECATE)
# define _CRT_SECURE_NO_DEPRECATE
#endif

/* Deal with Microsoft's attempt at deprecating methods in the standard C++ library */
#if !defined(SWIG_NO_SCL_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_SCL_SECURE_NO_DEPRECATE)
# define _SCL_SECURE_NO_DEPRECATE
#endif

/* Deal with Apple's deprecated 'AssertMacros.h' from Carbon-framework */
#if defined(__APPLE__) && !defined(__ASSERT_MACROS_DEFINE_VERSIONS_WITHOUT_UNDERSCORES)
# define __ASSERT_MACROS_DEFINE_VERSIONS_WITHOUT_UNDERSCORES 0
#endif

/* Intel's compiler complains if a variable which was never initialised is
 * cast to void, which is a common idiom which we use to indicate that we
 * are aware a variable isn't used.  So we just silence that warning.
 * See: https://github.com/swig/swig/issues/192 for more discussion.
 */
#ifdef __INTEL_COMPILER
# pragma warning disable 592
#endif


#include <stdlib.h>
#include <string.h>
#include <stdio.h>


/* Support for throwing C# exceptions from C/C++. There are two types: 
 * Exceptions that take a message and ArgumentExceptions that take a message and a parameter name. */
typedef enum {
  SWIG_CSharpApplicationException,
  SWIG_CSharpArithmeticException,
  SWIG_CSharpDivideByZeroException,
  SWIG_CSharpIndexOutOfRangeException,
  SWIG_CSharpInvalidCastException,
  SWIG_CSharpInvalidOperationException,
  SWIG_CSharpIOException,
  SWIG_CSharpNullReferenceException,
  SWIG_CSharpOutOfMemoryException,
  SWIG_CSharpOverflowException,
  SWIG_CSharpSystemException
} SWIG_CSharpExceptionCodes;

typedef enum {
  SWIG_CSharpArgumentException,
  SWIG_CSharpArgumentNullException,
  SWIG_CSharpArgumentOutOfRangeException
} SWIG_CSharpExceptionArgumentCodes;

typedef void (SWIGSTDCALL* SWIG_CSharpExceptionCallback_t)(const char *);
typedef void (SWIGSTDCALL* SWIG_CSharpExceptionArgumentCallback_t)(const char *, const char *);

typedef struct {
  SWIG_CSharpExceptionCodes code;
  SWIG_CSharpExceptionCallback_t callback;
} SWIG_CSharpException_t;

typedef struct {
  SWIG_CSharpExceptionArgumentCodes code;
  SWIG_CSharpExceptionArgumentCallback_t callback;
} SWIG_CSharpExceptionArgument_t;

static SWIG_CSharpException_t SWIG_csharp_exceptions[] = {
  { SWIG_CSharpApplicationException, NULL },
  { SWIG_CSharpArithmeticException, NULL },
  { SWIG_CSharpDivideByZeroException, NULL },
  { SWIG_CSharpIndexOutOfRangeException, NULL },
  { SWIG_CSharpInvalidCastException, NULL },
  { SWIG_CSharpInvalidOperationException, NULL },
  { SWIG_CSharpIOException, NULL },
  { SWIG_CSharpNullReferenceException, NULL },
  { SWIG_CSharpOutOfMemoryException, NULL },
  { SWIG_CSharpOverflowException, NULL },
  { SWIG_CSharpSystemException, NULL }
};

static SWIG_CSharpExceptionArgument_t SWIG_csharp_exceptions_argument[] = {
  { SWIG_CSharpArgumentException, NULL },
  { SWIG_CSharpArgumentNullException, NULL },
  { SWIG_CSharpArgumentOutOfRangeException, NULL }
};

static void SWIGUNUSED SWIG_CSharpSetPendingException(SWIG_CSharpExceptionCodes code, const char *msg) {
  SWIG_CSharpExceptionCallback_t callback = SWIG_csharp_exceptions[SWIG_CSharpApplicationException].callback;
  if ((size_t)code < sizeof(SWIG_csharp_exceptions)/sizeof(SWIG_CSharpException_t)) {
    callback = SWIG_csharp_exceptions[code].callback;
  }
  callback(msg);
}

static void SWIGUNUSED SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpExceptionArgumentCodes code, const char *msg, const char *param_name) {
  SWIG_CSharpExceptionArgumentCallback_t callback = SWIG_csharp_exceptions_argument[SWIG_CSharpArgumentException].callback;
  if ((size_t)code < sizeof(SWIG_csharp_exceptions_argument)/sizeof(SWIG_CSharpExceptionArgument_t)) {
    callback = SWIG_csharp_exceptions_argument[code].callback;
  }
  callback(msg, param_name);
}


#ifdef __cplusplus
extern "C" 
#endif
SWIGEXPORT void SWIGSTDCALL SWIGRegisterExceptionCallbacks_LLVM(
                                                SWIG_CSharpExceptionCallback_t applicationCallback,
                                                SWIG_CSharpExceptionCallback_t arithmeticCallback,
                                                SWIG_CSharpExceptionCallback_t divideByZeroCallback, 
                                                SWIG_CSharpExceptionCallback_t indexOutOfRangeCallback, 
                                                SWIG_CSharpExceptionCallback_t invalidCastCallback,
                                                SWIG_CSharpExceptionCallback_t invalidOperationCallback,
                                                SWIG_CSharpExceptionCallback_t ioCallback,
                                                SWIG_CSharpExceptionCallback_t nullReferenceCallback,
                                                SWIG_CSharpExceptionCallback_t outOfMemoryCallback, 
                                                SWIG_CSharpExceptionCallback_t overflowCallback, 
                                                SWIG_CSharpExceptionCallback_t systemCallback) {
  SWIG_csharp_exceptions[SWIG_CSharpApplicationException].callback = applicationCallback;
  SWIG_csharp_exceptions[SWIG_CSharpArithmeticException].callback = arithmeticCallback;
  SWIG_csharp_exceptions[SWIG_CSharpDivideByZeroException].callback = divideByZeroCallback;
  SWIG_csharp_exceptions[SWIG_CSharpIndexOutOfRangeException].callback = indexOutOfRangeCallback;
  SWIG_csharp_exceptions[SWIG_CSharpInvalidCastException].callback = invalidCastCallback;
  SWIG_csharp_exceptions[SWIG_CSharpInvalidOperationException].callback = invalidOperationCallback;
  SWIG_csharp_exceptions[SWIG_CSharpIOException].callback = ioCallback;
  SWIG_csharp_exceptions[SWIG_CSharpNullReferenceException].callback = nullReferenceCallback;
  SWIG_csharp_exceptions[SWIG_CSharpOutOfMemoryException].callback = outOfMemoryCallback;
  SWIG_csharp_exceptions[SWIG_CSharpOverflowException].callback = overflowCallback;
  SWIG_csharp_exceptions[SWIG_CSharpSystemException].callback = systemCallback;
}

#ifdef __cplusplus
extern "C" 
#endif
SWIGEXPORT void SWIGSTDCALL SWIGRegisterExceptionArgumentCallbacks_LLVM(
                                                SWIG_CSharpExceptionArgumentCallback_t argumentCallback,
                                                SWIG_CSharpExceptionArgumentCallback_t argumentNullCallback,
                                                SWIG_CSharpExceptionArgumentCallback_t argumentOutOfRangeCallback) {
  SWIG_csharp_exceptions_argument[SWIG_CSharpArgumentException].callback = argumentCallback;
  SWIG_csharp_exceptions_argument[SWIG_CSharpArgumentNullException].callback = argumentNullCallback;
  SWIG_csharp_exceptions_argument[SWIG_CSharpArgumentOutOfRangeException].callback = argumentOutOfRangeCallback;
}


/* Callback for returning strings to C# without leaking memory */
typedef char * (SWIGSTDCALL* SWIG_CSharpStringHelperCallback)(const char *);
static SWIG_CSharpStringHelperCallback SWIG_csharp_string_callback = NULL;


#ifdef __cplusplus
extern "C" 
#endif
SWIGEXPORT void SWIGSTDCALL SWIGRegisterStringCallback_LLVM(SWIG_CSharpStringHelperCallback callback) {
  SWIG_csharp_string_callback = callback;
}


/* Contract support */

#define SWIG_contract_assert(nullreturn, expr, msg) if (!(expr)) {SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, msg, ""); return nullreturn; } else


#include <llvm-c/Core.h>
#include <llvm-c/BitReader.h>
#include <llvm-c/BitWriter.h>
#include <llvm-c/ExecutionEngine.h>
#include <llvm-c/Transforms/IPO.h>
#include <llvm-c/Transforms/PassManagerBuilder.h>
#include <llvm-c/Transforms/Scalar.h>
#include <llvm-c/Transforms/Vectorize.h>
#include <llvm-c/Target.h>
#include <llvm-c/TargetMachine.h>
#include <llvm-c/Analysis.h>
#include "Additional.h"
#include "DebugInfo.h"


#include <stdint.h>		// Use the C99 official header


#ifdef __cplusplus
extern "C" {
#endif

SWIGEXPORT void SWIGSTDCALL CSharp_CSLLVM_InitializeCore(void * jarg1) {
  LLVMPassRegistryRef arg1 ;
  
  arg1 = (LLVMPassRegistryRef)jarg1; 
  LLVMInitializeCore(arg1);
}


SWIGEXPORT void SWIGSTDCALL CSharp_CSLLVM_Shutdown() {
  LLVMShutdown();
}


SWIGEXPORT char * SWIGSTDCALL CSharp_CSLLVM_CreateMessage(char * jarg1) {
  char * jresult ;
  char *arg1 = (char *) 0 ;
  char *result = 0 ;
  
  arg1 = (char *)jarg1; 
  result = (char *)LLVMCreateMessage((char const *)arg1);
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CSLLVM_DisposeMessage(char * jarg1) {
  char *arg1 = (char *) 0 ;
  
  arg1 = (char *)jarg1; 
  LLVMDisposeMessage(arg1);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CSLLVM_ContextCreate() {
  void * jresult ;
  LLVMContextRef result;
  
  result = LLVMContextCreate();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CSLLVM_GetGlobalContext() {
  void * jresult ;
  LLVMContextRef result;
  
  result = LLVMGetGlobalContext();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CSLLVM_ContextDispose(void * jarg1) {
  LLVMContextRef arg1 ;
  
  arg1 = (LLVMContextRef)jarg1; 
  LLVMContextDispose(arg1);
}


SWIGEXPORT char * SWIGSTDCALL CSharp_CSLLVM_GetDiagInfoDescription(void * jarg1) {
  char * jresult ;
  LLVMDiagnosticInfoRef arg1 ;
  char *result = 0 ;
  
  arg1 = (LLVMDiagnosticInfoRef)jarg1; 
  result = (char *)LLVMGetDiagInfoDescription(arg1);
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_CSLLVM_GetDiagInfoSeverity(void * jarg1) {
  int jresult ;
  LLVMDiagnosticInfoRef arg1 ;
  LLVMDiagnosticSeverity result;
  
  arg1 = (LLVMDiagnosticInfoRef)jarg1; 
  result = (LLVMDiagnosticSeverity)LLVMGetDiagInfoSeverity(arg1);
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_CSLLVM_GetMDKindIDInContext(void * jarg1, char * jarg2, unsigned int jarg3) {
  unsigned int jresult ;
  LLVMContextRef arg1 ;
  char *arg2 = (char *) 0 ;
  unsigned int arg3 ;
  unsigned int result;
  
  arg1 = (LLVMContextRef)jarg1; 
  arg2 = (char *)jarg2; 
  arg3 = (unsigned int)jarg3; 
  result = (unsigned int)LLVMGetMDKindIDInContext(arg1,(char const *)arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_CSLLVM_GetMDKindID(char * jarg1, unsigned int jarg2) {
  unsigned int jresult ;
  char *arg1 = (char *) 0 ;
  unsigned int arg2 ;
  unsigned int result;
  
  arg1 = (char *)jarg1; 
  arg2 = (unsigned int)jarg2; 
  result = (unsigned int)LLVMGetMDKindID((char const *)arg1,arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CSLLVM_ModuleCreateWithName(char * jarg1) {
  void * jresult ;
  char *arg1 = (char *) 0 ;
  LLVMModuleRef result;
  
  arg1 = (char *)jarg1; 
  result = LLVMModuleCreateWithName((char const *)arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CSLLVM_ModuleCreateWithNameInContext(char * jarg1, void * jarg2) {
  void * jresult ;
  char *arg1 = (char *) 0 ;
  LLVMContextRef arg2 ;
  LLVMModuleRef result;
  
  arg1 = (char *)jarg1; 
  arg2 = (LLVMContextRef)jarg2; 
  result = LLVMModuleCreateWithNameInContext((char const *)arg1,arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CSLLVM_CloneModule(void * jarg1) {
  void * jresult ;
  LLVMModuleRef arg1 ;
  LLVMModuleRef result;
  
  arg1 = (LLVMModuleRef)jarg1; 
  result = LLVMCloneModule(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CSLLVM_DisposeModule(void * jarg1) {
  LLVMModuleRef arg1 ;
  
  arg1 = (LLVMModuleRef)jarg1; 
  LLVMDisposeModule(arg1);
}


SWIGEXPORT char * SWIGSTDCALL CSharp_CSLLVM_GetDataLayoutStr(void * jarg1) {
  char * jresult ;
  LLVMModuleRef arg1 ;
  char *result = 0 ;
  
  arg1 = (LLVMModuleRef)jarg1; 
  result = (char *)LLVMGetDataLayoutStr(arg1);
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_CSLLVM_GetDataLayout(void * jarg1) {
  char * jresult ;
  LLVMModuleRef arg1 ;
  char *result = 0 ;
  
  arg1 = (LLVMModuleRef)jarg1; 
  result = (char *)LLVMGetDataLayout(arg1);
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CSLLVM_SetDataLayout(void * jarg1, char * jarg2) {
  LLVMModuleRef arg1 ;
  char *arg2 = (char *) 0 ;
  
  arg1 = (LLVMModuleRef)jarg1; 
  arg2 = (char *)jarg2; 
  LLVMSetDataLayout(arg1,(char const *)arg2);
}


SWIGEXPORT char * SWIGSTDCALL CSharp_CSLLVM_GetTarget(void * jarg1) {
  char * jresult ;
  LLVMModuleRef arg1 ;
  char *result = 0 ;
  
  arg1 = (LLVMModuleRef)jarg1; 
  result = (char *)LLVMGetTarget(arg1);
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CSLLVM_SetTarget(void * jarg1, char * jarg2) {
  LLVMModuleRef arg1 ;
  char *arg2 = (char *) 0 ;
  
  arg1 = (LLVMModuleRef)jarg1; 
  arg2 = (char *)jarg2; 
  LLVMSetTarget(arg1,(char const *)arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_CSLLVM_DumpModule(void * jarg1) {
  LLVMModuleRef arg1 ;
  
  arg1 = (LLVMModuleRef)jarg1; 
  LLVMDumpModule(arg1);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_CSLLVM_PrintModuleToFile(void * jarg1, char * jarg2, void * jarg3) {
  unsigned int jresult ;
  LLVMModuleRef arg1 ;
  char *arg2 = (char *) 0 ;
  char **arg3 = (char **) 0 ;
  LLVMBool result;
  
  arg1 = (LLVMModuleRef)jarg1; 
  arg2 = (char *)jarg2; 
  {
    // Used in generating wrap.cpp:
    // Converts input parameter of target type to C.
    arg3 = (char**)jarg3;
  }
  result = (LLVMBool)LLVMPrintModuleToFile(arg1,(char const *)arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_CSLLVM_PrintModuleToString(void * jarg1) {
  char * jresult ;
  LLVMModuleRef arg1 ;
  char *result = 0 ;
  
  arg1 = (LLVMModuleRef)jarg1; 
  result = (char *)LLVMPrintModuleToString(arg1);
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CSLLVM_SetModuleInlineAsm(void * jarg1, char * jarg2) {
  LLVMModuleRef arg1 ;
  char *arg2 = (char *) 0 ;
  
  arg1 = (LLVMModuleRef)jarg1; 
  arg2 = (char *)jarg2; 
  LLVMSetModuleInlineAsm(arg1,(char const *)arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CSLLVM_GetModuleContext(void * jarg1) {
  void * jresult ;
  LLVMModuleRef arg1 ;
  LLVMContextRef result;
  
  arg1 = (LLVMModuleRef)jarg1; 
  result = LLVMGetModuleContext(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CSLLVM_GetTypeByName(void * jarg1, char * jarg2) {
  void * jresult ;
  LLVMModuleRef arg1 ;
  char *arg2 = (char *) 0 ;
  LLVMTypeRef result;
  
  arg1 = (LLVMModuleRef)jarg1; 
  arg2 = (char *)jarg2; 
  result = LLVMGetTypeByName(arg1,(char const *)arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_CSLLVM_GetNamedMetadataNumOperands(void * jarg1, char * jarg2) {
  unsigned int jresult ;
  LLVMModuleRef arg1 ;
  char *arg2 = (char *) 0 ;
  unsigned int result;
  
  arg1 = (LLVMModuleRef)jarg1; 
  arg2 = (char *)jarg2; 
  result = (unsigned int)LLVMGetNamedMetadataNumOperands(arg1,(char const *)arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CSLLVM_GetNamedMetadataOperands(void * jarg1, char * jarg2, void * jarg3) {
  LLVMModuleRef arg1 ;
  char *arg2 = (char *) 0 ;
  LLVMValueRef *arg3 = (LLVMValueRef *) 0 ;
  
  arg1 = (LLVMModuleRef)jarg1; 
  arg2 = (char *)jarg2; 
  arg3 = (LLVMValueRef *)jarg3; 
  LLVMGetNamedMetadataOperands(arg1,(char const *)arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_CSLLVM_AddNamedMetadataOperand(void * jarg1, char * jarg2, void * jarg3) {
  LLVMModuleRef arg1 ;
  char *arg2 = (char *) 0 ;
  LLVMValueRef arg3 ;
  
  arg1 = (LLVMModuleRef)jarg1; 
  arg2 = (char *)jarg2; 
  arg3 = (LLVMValueRef)jarg3; 
  LLVMAddNamedMetadataOperand(arg1,(char const *)arg2,arg3);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CSLLVM_AddFunction(void * jarg1, char * jarg2, void * jarg3) {
  void * jresult ;
  LLVMModuleRef arg1 ;
  char *arg2 = (char *) 0 ;
  LLVMTypeRef arg3 ;
  LLVMValueRef result;
  
  arg1 = (LLVMModuleRef)jarg1; 
  arg2 = (char *)jarg2; 
  arg3 = (LLVMTypeRef)jarg3; 
  result = LLVMAddFunction(arg1,(char const *)arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CSLLVM_GetNamedFunction(void * jarg1, char * jarg2) {
  void * jresult ;
  LLVMModuleRef arg1 ;
  char *arg2 = (char *) 0 ;
  LLVMValueRef result;
  
  arg1 = (LLVMModuleRef)jarg1; 
  arg2 = (char *)jarg2; 
  result = LLVMGetNamedFunction(arg1,(char const *)arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CSLLVM_GetFirstFunction(void * jarg1) {
  void * jresult ;
  LLVMModuleRef arg1 ;
  LLVMValueRef result;
  
  arg1 = (LLVMModuleRef)jarg1; 
  result = LLVMGetFirstFunction(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CSLLVM_GetLastFunction(void * jarg1) {
  void * jresult ;
  LLVMModuleRef arg1 ;
  LLVMValueRef result;
  
  arg1 = (LLVMModuleRef)jarg1; 
  result = LLVMGetLastFunction(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CSLLVM_GetNextFunction(void * jarg1) {
  void * jresult ;
  LLVMValueRef arg1 ;
  LLVMValueRef result;
  
  arg1 = (LLVMValueRef)jarg1; 
  result = LLVMGetNextFunction(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CSLLVM_GetPreviousFunction(void * jarg1) {
  void * jresult ;
  LLVMValueRef arg1 ;
  LLVMValueRef result;
  
  arg1 = (LLVMValueRef)jarg1; 
  result = LLVMGetPreviousFunction(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_CSLLVM_GetTypeKind(void * jarg1) {
  int jresult ;
  LLVMTypeRef arg1 ;
  LLVMTypeKind result;
  
  arg1 = (LLVMTypeRef)jarg1; 
  result = (LLVMTypeKind)LLVMGetTypeKind(arg1);
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_CSLLVM_TypeIsSized(void * jarg1) {
  unsigned int jresult ;
  LLVMTypeRef arg1 ;
  LLVMBool result;
  
  arg1 = (LLVMTypeRef)jarg1; 
  result = (LLVMBool)LLVMTypeIsSized(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CSLLVM_GetTypeContext(void * jarg1) {
  void * jresult ;
  LLVMTypeRef arg1 ;
  LLVMContextRef result;
  
  arg1 = (LLVMTypeRef)jarg1; 
  result = LLVMGetTypeContext(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CSLLVM_DumpType(void * jarg1) {
  LLVMTypeRef arg1 ;
  
  arg1 = (LLVMTypeRef)jarg1; 
  LLVMDumpType(arg1);
}


SWIGEXPORT char * SWIGSTDCALL CSharp_CSLLVM_PrintTypeToString(void * jarg1) {
  char * jresult ;
  LLVMTypeRef arg1 ;
  char *result = 0 ;
  
  arg1 = (LLVMTypeRef)jarg1; 
  result = (char *)LLVMPrintTypeToString(arg1);
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CSLLVM_Int1TypeInContext(void * jarg1) {
  void * jresult ;
  LLVMContextRef arg1 ;
  LLVMTypeRef result;
  
  arg1 = (LLVMContextRef)jarg1; 
  result = LLVMInt1TypeInContext(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CSLLVM_Int8TypeInContext(void * jarg1) {
  void * jresult ;
  LLVMContextRef arg1 ;
  LLVMTypeRef result;
  
  arg1 = (LLVMContextRef)jarg1; 
  result = LLVMInt8TypeInContext(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CSLLVM_Int16TypeInContext(void * jarg1) {
  void * jresult ;
  LLVMContextRef arg1 ;
  LLVMTypeRef result;
  
  arg1 = (LLVMContextRef)jarg1; 
  result = LLVMInt16TypeInContext(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CSLLVM_Int32TypeInContext(void * jarg1) {
  void * jresult ;
  LLVMContextRef arg1 ;
  LLVMTypeRef result;
  
  arg1 = (LLVMContextRef)jarg1; 
  result = LLVMInt32TypeInContext(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CSLLVM_Int64TypeInContext(void * jarg1) {
  void * jresult ;
  LLVMContextRef arg1 ;
  LLVMTypeRef result;
  
  arg1 = (LLVMContextRef)jarg1; 
  result = LLVMInt64TypeInContext(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CSLLVM_Int128TypeInContext(void * jarg1) {
  void * jresult ;
  LLVMContextRef arg1 ;
  LLVMTypeRef result;
  
  arg1 = (LLVMContextRef)jarg1; 
  result = LLVMInt128TypeInContext(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CSLLVM_IntTypeInContext(void * jarg1, unsigned int jarg2) {
  void * jresult ;
  LLVMContextRef arg1 ;
  unsigned int arg2 ;
  LLVMTypeRef result;
  
  arg1 = (LLVMContextRef)jarg1; 
  arg2 = (unsigned int)jarg2; 
  result = LLVMIntTypeInContext(arg1,arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CSLLVM_Int1Type() {
  void * jresult ;
  LLVMTypeRef result;
  
  result = LLVMInt1Type();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CSLLVM_Int8Type() {
  void * jresult ;
  LLVMTypeRef result;
  
  result = LLVMInt8Type();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CSLLVM_Int16Type() {
  void * jresult ;
  LLVMTypeRef result;
  
  result = LLVMInt16Type();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CSLLVM_Int32Type() {
  void * jresult ;
  LLVMTypeRef result;
  
  result = LLVMInt32Type();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CSLLVM_Int64Type() {
  void * jresult ;
  LLVMTypeRef result;
  
  result = LLVMInt64Type();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CSLLVM_Int128Type() {
  void * jresult ;
  LLVMTypeRef result;
  
  result = LLVMInt128Type();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CSLLVM_IntType(unsigned int jarg1) {
  void * jresult ;
  unsigned int arg1 ;
  LLVMTypeRef result;
  
  arg1 = (unsigned int)jarg1; 
  result = LLVMIntType(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_CSLLVM_GetIntTypeWidth(void * jarg1) {
  unsigned int jresult ;
  LLVMTypeRef arg1 ;
  unsigned int result;
  
  arg1 = (LLVMTypeRef)jarg1; 
  result = (unsigned int)LLVMGetIntTypeWidth(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CSLLVM_HalfTypeInContext(void * jarg1) {
  void * jresult ;
  LLVMContextRef arg1 ;
  LLVMTypeRef result;
  
  arg1 = (LLVMContextRef)jarg1; 
  result = LLVMHalfTypeInContext(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CSLLVM_FloatTypeInContext(void * jarg1) {
  void * jresult ;
  LLVMContextRef arg1 ;
  LLVMTypeRef result;
  
  arg1 = (LLVMContextRef)jarg1; 
  result = LLVMFloatTypeInContext(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CSLLVM_DoubleTypeInContext(void * jarg1) {
  void * jresult ;
  LLVMContextRef arg1 ;
  LLVMTypeRef result;
  
  arg1 = (LLVMContextRef)jarg1; 
  result = LLVMDoubleTypeInContext(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CSLLVM_X86FP80TypeInContext(void * jarg1) {
  void * jresult ;
  LLVMContextRef arg1 ;
  LLVMTypeRef result;
  
  arg1 = (LLVMContextRef)jarg1; 
  result = LLVMX86FP80TypeInContext(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CSLLVM_FP128TypeInContext(void * jarg1) {
  void * jresult ;
  LLVMContextRef arg1 ;
  LLVMTypeRef result;
  
  arg1 = (LLVMContextRef)jarg1; 
  result = LLVMFP128TypeInContext(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CSLLVM_PPCFP128TypeInContext(void * jarg1) {
  void * jresult ;
  LLVMContextRef arg1 ;
  LLVMTypeRef result;
  
  arg1 = (LLVMContextRef)jarg1; 
  result = LLVMPPCFP128TypeInContext(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CSLLVM_HalfType() {
  void * jresult ;
  LLVMTypeRef result;
  
  result = LLVMHalfType();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CSLLVM_FloatType() {
  void * jresult ;
  LLVMTypeRef result;
  
  result = LLVMFloatType();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CSLLVM_DoubleType() {
  void * jresult ;
  LLVMTypeRef result;
  
  result = LLVMDoubleType();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CSLLVM_X86FP80Type() {
  void * jresult ;
  LLVMTypeRef result;
  
  result = LLVMX86FP80Type();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CSLLVM_FP128Type() {
  void * jresult ;
  LLVMTypeRef result;
  
  result = LLVMFP128Type();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CSLLVM_PPCFP128Type() {
  void * jresult ;
  LLVMTypeRef result;
  
  result = LLVMPPCFP128Type();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CSLLVM_FunctionType(void * jarg1, void* arg2_data, unsigned int jarg2, unsigned int jarg4) {
  void * jresult ;
  LLVMTypeRef arg1 ;
  LLVMTypeRef *arg2 = (LLVMTypeRef *) 0 ;
  unsigned int arg3 ;
  LLVMBool arg4 ;
  LLVMTypeRef result;
  
  arg1 = (LLVMTypeRef)jarg1; 
  arg2 = (LLVMTypeRef*)arg2_data; arg3 = jarg2;
  arg4 = jarg4 ? true : false; 
  result = LLVMFunctionType(arg1,arg2,arg3,arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_CSLLVM_IsFunctionVarArg(void * jarg1) {
  unsigned int jresult ;
  LLVMTypeRef arg1 ;
  LLVMBool result;
  
  arg1 = (LLVMTypeRef)jarg1; 
  result = (LLVMBool)LLVMIsFunctionVarArg(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CSLLVM_GetReturnType(void * jarg1) {
  void * jresult ;
  LLVMTypeRef arg1 ;
  LLVMTypeRef result;
  
  arg1 = (LLVMTypeRef)jarg1; 
  result = LLVMGetReturnType(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_CSLLVM_CountParamTypes(void * jarg1) {
  unsigned int jresult ;
  LLVMTypeRef arg1 ;
  unsigned int result;
  
  arg1 = (LLVMTypeRef)jarg1; 
  result = (unsigned int)LLVMCountParamTypes(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CSLLVM_GetParamTypes(void * jarg1, void * jarg2) {
  LLVMTypeRef arg1 ;
  LLVMTypeRef *arg2 = (LLVMTypeRef *) 0 ;
  
  arg1 = (LLVMTypeRef)jarg1; 
  arg2 = (LLVMTypeRef *)jarg2; 
  LLVMGetParamTypes(arg1,arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CSLLVM_StructTypeInContext(void * jarg1, void* arg2_data, unsigned int jarg2, unsigned int jarg4) {
  void * jresult ;
  LLVMContextRef arg1 ;
  LLVMTypeRef *arg2 = (LLVMTypeRef *) 0 ;
  unsigned int arg3 ;
  LLVMBool arg4 ;
  LLVMTypeRef result;
  
  arg1 = (LLVMContextRef)jarg1; 
  arg2 = (LLVMTypeRef*)arg2_data; arg3 = jarg2;
  arg4 = jarg4 ? true : false; 
  result = LLVMStructTypeInContext(arg1,arg2,arg3,arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CSLLVM_StructType(void* arg1_data, unsigned int jarg1, unsigned int jarg3) {
  void * jresult ;
  LLVMTypeRef *arg1 = (LLVMTypeRef *) 0 ;
  unsigned int arg2 ;
  LLVMBool arg3 ;
  LLVMTypeRef result;
  
  arg1 = (LLVMTypeRef*)arg1_data; arg2 = jarg1;
  arg3 = jarg3 ? true : false; 
  result = LLVMStructType(arg1,arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CSLLVM_StructCreateNamed(void * jarg1, char * jarg2) {
  void * jresult ;
  LLVMContextRef arg1 ;
  char *arg2 = (char *) 0 ;
  LLVMTypeRef result;
  
  arg1 = (LLVMContextRef)jarg1; 
  arg2 = (char *)jarg2; 
  result = LLVMStructCreateNamed(arg1,(char const *)arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_CSLLVM_GetStructName(void * jarg1) {
  char * jresult ;
  LLVMTypeRef arg1 ;
  char *result = 0 ;
  
  arg1 = (LLVMTypeRef)jarg1; 
  result = (char *)LLVMGetStructName(arg1);
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CSLLVM_StructSetBody(void * jarg1, void* arg2_data, unsigned int jarg2, unsigned int jarg4) {
  LLVMTypeRef arg1 ;
  LLVMTypeRef *arg2 = (LLVMTypeRef *) 0 ;
  unsigned int arg3 ;
  LLVMBool arg4 ;
  
  arg1 = (LLVMTypeRef)jarg1; 
  arg2 = (LLVMTypeRef*)arg2_data; arg3 = jarg2;
  arg4 = jarg4 ? true : false; 
  LLVMStructSetBody(arg1,arg2,arg3,arg4);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_CSLLVM_CountStructElementTypes(void * jarg1) {
  unsigned int jresult ;
  LLVMTypeRef arg1 ;
  unsigned int result;
  
  arg1 = (LLVMTypeRef)jarg1; 
  result = (unsigned int)LLVMCountStructElementTypes(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CSLLVM_GetStructElementTypes(void * jarg1, void * jarg2) {
  LLVMTypeRef arg1 ;
  LLVMTypeRef *arg2 = (LLVMTypeRef *) 0 ;
  
  arg1 = (LLVMTypeRef)jarg1; 
  arg2 = (LLVMTypeRef *)jarg2; 
  LLVMGetStructElementTypes(arg1,arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CSLLVM_StructGetTypeAtIndex(void * jarg1, unsigned int jarg2) {
  void * jresult ;
  LLVMTypeRef arg1 ;
  unsigned int arg2 ;
  LLVMTypeRef result;
  
  arg1 = (LLVMTypeRef)jarg1; 
  arg2 = (unsigned int)jarg2; 
  result = LLVMStructGetTypeAtIndex(arg1,arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_CSLLVM_IsPackedStruct(void * jarg1) {
  unsigned int jresult ;
  LLVMTypeRef arg1 ;
  LLVMBool result;
  
  arg1 = (LLVMTypeRef)jarg1; 
  result = (LLVMBool)LLVMIsPackedStruct(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_CSLLVM_IsOpaqueStruct(void * jarg1) {
  unsigned int jresult ;
  LLVMTypeRef arg1 ;
  LLVMBool result;
  
  arg1 = (LLVMTypeRef)jarg1; 
  result = (LLVMBool)LLVMIsOpaqueStruct(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CSLLVM_GetElementType(void * jarg1) {
  void * jresult ;
  LLVMTypeRef arg1 ;
  LLVMTypeRef result;
  
  arg1 = (LLVMTypeRef)jarg1; 
  result = LLVMGetElementType(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CSLLVM_ArrayType(void * jarg1, unsigned int jarg2) {
  void * jresult ;
  LLVMTypeRef arg1 ;
  unsigned int arg2 ;
  LLVMTypeRef result;
  
  arg1 = (LLVMTypeRef)jarg1; 
  arg2 = (unsigned int)jarg2; 
  result = LLVMArrayType(arg1,arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_CSLLVM_GetArrayLength(void * jarg1) {
  unsigned int jresult ;
  LLVMTypeRef arg1 ;
  unsigned int result;
  
  arg1 = (LLVMTypeRef)jarg1; 
  result = (unsigned int)LLVMGetArrayLength(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CSLLVM_PointerType(void * jarg1, unsigned int jarg2) {
  void * jresult ;
  LLVMTypeRef arg1 ;
  unsigned int arg2 ;
  LLVMTypeRef result;
  
  arg1 = (LLVMTypeRef)jarg1; 
  arg2 = (unsigned int)jarg2; 
  result = LLVMPointerType(arg1,arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_CSLLVM_GetPointerAddressSpace(void * jarg1) {
  unsigned int jresult ;
  LLVMTypeRef arg1 ;
  unsigned int result;
  
  arg1 = (LLVMTypeRef)jarg1; 
  result = (unsigned int)LLVMGetPointerAddressSpace(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CSLLVM_VectorType(void * jarg1, unsigned int jarg2) {
  void * jresult ;
  LLVMTypeRef arg1 ;
  unsigned int arg2 ;
  LLVMTypeRef result;
  
  arg1 = (LLVMTypeRef)jarg1; 
  arg2 = (unsigned int)jarg2; 
  result = LLVMVectorType(arg1,arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_CSLLVM_GetVectorSize(void * jarg1) {
  unsigned int jresult ;
  LLVMTypeRef arg1 ;
  unsigned int result;
  
  arg1 = (LLVMTypeRef)jarg1; 
  result = (unsigned int)LLVMGetVectorSize(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CSLLVM_VoidTypeInContext(void * jarg1) {
  void * jresult ;
  LLVMContextRef arg1 ;
  LLVMTypeRef result;
  
  arg1 = (LLVMContextRef)jarg1; 
  result = LLVMVoidTypeInContext(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CSLLVM_LabelTypeInContext(void * jarg1) {
  void * jresult ;
  LLVMContextRef arg1 ;
  LLVMTypeRef result;
  
  arg1 = (LLVMContextRef)jarg1; 
  result = LLVMLabelTypeInContext(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CSLLVM_X86MMXTypeInContext(void * jarg1) {
  void * jresult ;
  LLVMContextRef arg1 ;
  LLVMTypeRef result;
  
  arg1 = (LLVMContextRef)jarg1; 
  result = LLVMX86MMXTypeInContext(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CSLLVM_VoidType() {
  void * jresult ;
  LLVMTypeRef result;
  
  result = LLVMVoidType();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CSLLVM_LabelType() {
  void * jresult ;
  LLVMTypeRef result;
  
  result = LLVMLabelType();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CSLLVM_X86MMXType() {
  void * jresult ;
  LLVMTypeRef result;
  
  result = LLVMX86MMXType();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CSLLVM_TypeOf(void * jarg1) {
  void * jresult ;
  LLVMValueRef arg1 ;
  LLVMTypeRef result;
  
  arg1 = (LLVMValueRef)jarg1; 
  result = LLVMTypeOf(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_CSLLVM_GetValueName(void * jarg1) {
  char * jresult ;
  LLVMValueRef arg1 ;
  char *result = 0 ;
  
  arg1 = (LLVMValueRef)jarg1; 
  result = (char *)LLVMGetValueName(arg1);
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CSLLVM_SetValueName(void * jarg1, char * jarg2) {
  LLVMValueRef arg1 ;
  char *arg2 = (char *) 0 ;
  
  arg1 = (LLVMValueRef)jarg1; 
  arg2 = (char *)jarg2; 
  LLVMSetValueName(arg1,(char const *)arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_CSLLVM_DumpValue(void * jarg1) {
  LLVMValueRef arg1 ;
  
  arg1 = (LLVMValueRef)jarg1; 
  LLVMDumpValue(arg1);
}


SWIGEXPORT char * SWIGSTDCALL CSharp_CSLLVM_PrintValueToString(void * jarg1) {
  char * jresult ;
  LLVMValueRef arg1 ;
  char *result = 0 ;
  
  arg1 = (LLVMValueRef)jarg1; 
  result = (char *)LLVMPrintValueToString(arg1);
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CSLLVM_ReplaceAllUsesWith(void * jarg1, void * jarg2) {
  LLVMValueRef arg1 ;
  LLVMValueRef arg2 ;
  
  arg1 = (LLVMValueRef)jarg1; 
  arg2 = (LLVMValueRef)jarg2; 
  LLVMReplaceAllUsesWith(arg1,arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_CSLLVM_IsConstant(void * jarg1) {
  unsigned int jresult ;
  LLVMValueRef arg1 ;
  LLVMBool result;
  
  arg1 = (LLVMValueRef)jarg1; 
  result = (LLVMBool)LLVMIsConstant(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_CSLLVM_IsUndef(void * jarg1) {
  unsigned int jresult ;
  LLVMValueRef arg1 ;
  LLVMBool result;
  
  arg1 = (LLVMValueRef)jarg1; 
  result = (LLVMBool)LLVMIsUndef(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CSLLVM_IsAArgument(void * jarg1) {
  void * jresult ;
  LLVMValueRef arg1 ;
  LLVMValueRef result;
  
  arg1 = (LLVMValueRef)jarg1; 
  result = LLVMIsAArgument(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CSLLVM_IsABasicBlock(void * jarg1) {
  void * jresult ;
  LLVMValueRef arg1 ;
  LLVMValueRef result;
  
  arg1 = (LLVMValueRef)jarg1; 
  result = LLVMIsABasicBlock(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CSLLVM_IsAInlineAsm(void * jarg1) {
  void * jresult ;
  LLVMValueRef arg1 ;
  LLVMValueRef result;
  
  arg1 = (LLVMValueRef)jarg1; 
  result = LLVMIsAInlineAsm(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CSLLVM_IsAUser(void * jarg1) {
  void * jresult ;
  LLVMValueRef arg1 ;
  LLVMValueRef result;
  
  arg1 = (LLVMValueRef)jarg1; 
  result = LLVMIsAUser(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CSLLVM_IsAConstant(void * jarg1) {
  void * jresult ;
  LLVMValueRef arg1 ;
  LLVMValueRef result;
  
  arg1 = (LLVMValueRef)jarg1; 
  result = LLVMIsAConstant(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CSLLVM_IsABlockAddress(void * jarg1) {
  void * jresult ;
  LLVMValueRef arg1 ;
  LLVMValueRef result;
  
  arg1 = (LLVMValueRef)jarg1; 
  result = LLVMIsABlockAddress(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CSLLVM_IsAConstantAggregateZero(void * jarg1) {
  void * jresult ;
  LLVMValueRef arg1 ;
  LLVMValueRef result;
  
  arg1 = (LLVMValueRef)jarg1; 
  result = LLVMIsAConstantAggregateZero(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CSLLVM_IsAConstantArray(void * jarg1) {
  void * jresult ;
  LLVMValueRef arg1 ;
  LLVMValueRef result;
  
  arg1 = (LLVMValueRef)jarg1; 
  result = LLVMIsAConstantArray(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CSLLVM_IsAConstantDataSequential(void * jarg1) {
  void * jresult ;
  LLVMValueRef arg1 ;
  LLVMValueRef result;
  
  arg1 = (LLVMValueRef)jarg1; 
  result = LLVMIsAConstantDataSequential(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CSLLVM_IsAConstantDataArray(void * jarg1) {
  void * jresult ;
  LLVMValueRef arg1 ;
  LLVMValueRef result;
  
  arg1 = (LLVMValueRef)jarg1; 
  result = LLVMIsAConstantDataArray(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CSLLVM_IsAConstantDataVector(void * jarg1) {
  void * jresult ;
  LLVMValueRef arg1 ;
  LLVMValueRef result;
  
  arg1 = (LLVMValueRef)jarg1; 
  result = LLVMIsAConstantDataVector(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CSLLVM_IsAConstantExpr(void * jarg1) {
  void * jresult ;
  LLVMValueRef arg1 ;
  LLVMValueRef result;
  
  arg1 = (LLVMValueRef)jarg1; 
  result = LLVMIsAConstantExpr(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CSLLVM_IsAConstantFP(void * jarg1) {
  void * jresult ;
  LLVMValueRef arg1 ;
  LLVMValueRef result;
  
  arg1 = (LLVMValueRef)jarg1; 
  result = LLVMIsAConstantFP(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CSLLVM_IsAConstantInt(void * jarg1) {
  void * jresult ;
  LLVMValueRef arg1 ;
  LLVMValueRef result;
  
  arg1 = (LLVMValueRef)jarg1; 
  result = LLVMIsAConstantInt(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CSLLVM_IsAConstantPointerNull(void * jarg1) {
  void * jresult ;
  LLVMValueRef arg1 ;
  LLVMValueRef result;
  
  arg1 = (LLVMValueRef)jarg1; 
  result = LLVMIsAConstantPointerNull(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CSLLVM_IsAConstantStruct(void * jarg1) {
  void * jresult ;
  LLVMValueRef arg1 ;
  LLVMValueRef result;
  
  arg1 = (LLVMValueRef)jarg1; 
  result = LLVMIsAConstantStruct(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CSLLVM_IsAConstantTokenNone(void * jarg1) {
  void * jresult ;
  LLVMValueRef arg1 ;
  LLVMValueRef result;
  
  arg1 = (LLVMValueRef)jarg1; 
  result = LLVMIsAConstantTokenNone(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CSLLVM_IsAConstantVector(void * jarg1) {
  void * jresult ;
  LLVMValueRef arg1 ;
  LLVMValueRef result;
  
  arg1 = (LLVMValueRef)jarg1; 
  result = LLVMIsAConstantVector(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CSLLVM_IsAGlobalValue(void * jarg1) {
  void * jresult ;
  LLVMValueRef arg1 ;
  LLVMValueRef result;
  
  arg1 = (LLVMValueRef)jarg1; 
  result = LLVMIsAGlobalValue(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CSLLVM_IsAGlobalAlias(void * jarg1) {
  void * jresult ;
  LLVMValueRef arg1 ;
  LLVMValueRef result;
  
  arg1 = (LLVMValueRef)jarg1; 
  result = LLVMIsAGlobalAlias(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CSLLVM_IsAGlobalObject(void * jarg1) {
  void * jresult ;
  LLVMValueRef arg1 ;
  LLVMValueRef result;
  
  arg1 = (LLVMValueRef)jarg1; 
  result = LLVMIsAGlobalObject(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CSLLVM_IsAFunction(void * jarg1) {
  void * jresult ;
  LLVMValueRef arg1 ;
  LLVMValueRef result;
  
  arg1 = (LLVMValueRef)jarg1; 
  result = LLVMIsAFunction(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CSLLVM_IsAGlobalVariable(void * jarg1) {
  void * jresult ;
  LLVMValueRef arg1 ;
  LLVMValueRef result;
  
  arg1 = (LLVMValueRef)jarg1; 
  result = LLVMIsAGlobalVariable(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CSLLVM_IsAUndefValue(void * jarg1) {
  void * jresult ;
  LLVMValueRef arg1 ;
  LLVMValueRef result;
  
  arg1 = (LLVMValueRef)jarg1; 
  result = LLVMIsAUndefValue(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CSLLVM_IsAInstruction(void * jarg1) {
  void * jresult ;
  LLVMValueRef arg1 ;
  LLVMValueRef result;
  
  arg1 = (LLVMValueRef)jarg1; 
  result = LLVMIsAInstruction(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CSLLVM_IsABinaryOperator(void * jarg1) {
  void * jresult ;
  LLVMValueRef arg1 ;
  LLVMValueRef result;
  
  arg1 = (LLVMValueRef)jarg1; 
  result = LLVMIsABinaryOperator(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CSLLVM_IsACallInst(void * jarg1) {
  void * jresult ;
  LLVMValueRef arg1 ;
  LLVMValueRef result;
  
  arg1 = (LLVMValueRef)jarg1; 
  result = LLVMIsACallInst(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CSLLVM_IsAIntrinsicInst(void * jarg1) {
  void * jresult ;
  LLVMValueRef arg1 ;
  LLVMValueRef result;
  
  arg1 = (LLVMValueRef)jarg1; 
  result = LLVMIsAIntrinsicInst(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CSLLVM_IsADbgInfoIntrinsic(void * jarg1) {
  void * jresult ;
  LLVMValueRef arg1 ;
  LLVMValueRef result;
  
  arg1 = (LLVMValueRef)jarg1; 
  result = LLVMIsADbgInfoIntrinsic(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CSLLVM_IsADbgDeclareInst(void * jarg1) {
  void * jresult ;
  LLVMValueRef arg1 ;
  LLVMValueRef result;
  
  arg1 = (LLVMValueRef)jarg1; 
  result = LLVMIsADbgDeclareInst(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CSLLVM_IsAMemIntrinsic(void * jarg1) {
  void * jresult ;
  LLVMValueRef arg1 ;
  LLVMValueRef result;
  
  arg1 = (LLVMValueRef)jarg1; 
  result = LLVMIsAMemIntrinsic(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CSLLVM_IsAMemCpyInst(void * jarg1) {
  void * jresult ;
  LLVMValueRef arg1 ;
  LLVMValueRef result;
  
  arg1 = (LLVMValueRef)jarg1; 
  result = LLVMIsAMemCpyInst(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CSLLVM_IsAMemMoveInst(void * jarg1) {
  void * jresult ;
  LLVMValueRef arg1 ;
  LLVMValueRef result;
  
  arg1 = (LLVMValueRef)jarg1; 
  result = LLVMIsAMemMoveInst(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CSLLVM_IsAMemSetInst(void * jarg1) {
  void * jresult ;
  LLVMValueRef arg1 ;
  LLVMValueRef result;
  
  arg1 = (LLVMValueRef)jarg1; 
  result = LLVMIsAMemSetInst(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CSLLVM_IsACmpInst(void * jarg1) {
  void * jresult ;
  LLVMValueRef arg1 ;
  LLVMValueRef result;
  
  arg1 = (LLVMValueRef)jarg1; 
  result = LLVMIsACmpInst(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CSLLVM_IsAFCmpInst(void * jarg1) {
  void * jresult ;
  LLVMValueRef arg1 ;
  LLVMValueRef result;
  
  arg1 = (LLVMValueRef)jarg1; 
  result = LLVMIsAFCmpInst(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CSLLVM_IsAICmpInst(void * jarg1) {
  void * jresult ;
  LLVMValueRef arg1 ;
  LLVMValueRef result;
  
  arg1 = (LLVMValueRef)jarg1; 
  result = LLVMIsAICmpInst(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CSLLVM_IsAExtractElementInst(void * jarg1) {
  void * jresult ;
  LLVMValueRef arg1 ;
  LLVMValueRef result;
  
  arg1 = (LLVMValueRef)jarg1; 
  result = LLVMIsAExtractElementInst(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CSLLVM_IsAGetElementPtrInst(void * jarg1) {
  void * jresult ;
  LLVMValueRef arg1 ;
  LLVMValueRef result;
  
  arg1 = (LLVMValueRef)jarg1; 
  result = LLVMIsAGetElementPtrInst(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CSLLVM_IsAInsertElementInst(void * jarg1) {
  void * jresult ;
  LLVMValueRef arg1 ;
  LLVMValueRef result;
  
  arg1 = (LLVMValueRef)jarg1; 
  result = LLVMIsAInsertElementInst(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CSLLVM_IsAInsertValueInst(void * jarg1) {
  void * jresult ;
  LLVMValueRef arg1 ;
  LLVMValueRef result;
  
  arg1 = (LLVMValueRef)jarg1; 
  result = LLVMIsAInsertValueInst(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CSLLVM_IsALandingPadInst(void * jarg1) {
  void * jresult ;
  LLVMValueRef arg1 ;
  LLVMValueRef result;
  
  arg1 = (LLVMValueRef)jarg1; 
  result = LLVMIsALandingPadInst(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CSLLVM_IsAPHINode(void * jarg1) {
  void * jresult ;
  LLVMValueRef arg1 ;
  LLVMValueRef result;
  
  arg1 = (LLVMValueRef)jarg1; 
  result = LLVMIsAPHINode(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CSLLVM_IsASelectInst(void * jarg1) {
  void * jresult ;
  LLVMValueRef arg1 ;
  LLVMValueRef result;
  
  arg1 = (LLVMValueRef)jarg1; 
  result = LLVMIsASelectInst(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CSLLVM_IsAShuffleVectorInst(void * jarg1) {
  void * jresult ;
  LLVMValueRef arg1 ;
  LLVMValueRef result;
  
  arg1 = (LLVMValueRef)jarg1; 
  result = LLVMIsAShuffleVectorInst(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CSLLVM_IsAStoreInst(void * jarg1) {
  void * jresult ;
  LLVMValueRef arg1 ;
  LLVMValueRef result;
  
  arg1 = (LLVMValueRef)jarg1; 
  result = LLVMIsAStoreInst(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CSLLVM_IsATerminatorInst(void * jarg1) {
  void * jresult ;
  LLVMValueRef arg1 ;
  LLVMValueRef result;
  
  arg1 = (LLVMValueRef)jarg1; 
  result = LLVMIsATerminatorInst(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CSLLVM_IsABranchInst(void * jarg1) {
  void * jresult ;
  LLVMValueRef arg1 ;
  LLVMValueRef result;
  
  arg1 = (LLVMValueRef)jarg1; 
  result = LLVMIsABranchInst(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CSLLVM_IsAIndirectBrInst(void * jarg1) {
  void * jresult ;
  LLVMValueRef arg1 ;
  LLVMValueRef result;
  
  arg1 = (LLVMValueRef)jarg1; 
  result = LLVMIsAIndirectBrInst(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CSLLVM_IsAInvokeInst(void * jarg1) {
  void * jresult ;
  LLVMValueRef arg1 ;
  LLVMValueRef result;
  
  arg1 = (LLVMValueRef)jarg1; 
  result = LLVMIsAInvokeInst(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CSLLVM_IsAReturnInst(void * jarg1) {
  void * jresult ;
  LLVMValueRef arg1 ;
  LLVMValueRef result;
  
  arg1 = (LLVMValueRef)jarg1; 
  result = LLVMIsAReturnInst(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CSLLVM_IsASwitchInst(void * jarg1) {
  void * jresult ;
  LLVMValueRef arg1 ;
  LLVMValueRef result;
  
  arg1 = (LLVMValueRef)jarg1; 
  result = LLVMIsASwitchInst(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CSLLVM_IsAUnreachableInst(void * jarg1) {
  void * jresult ;
  LLVMValueRef arg1 ;
  LLVMValueRef result;
  
  arg1 = (LLVMValueRef)jarg1; 
  result = LLVMIsAUnreachableInst(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CSLLVM_IsAResumeInst(void * jarg1) {
  void * jresult ;
  LLVMValueRef arg1 ;
  LLVMValueRef result;
  
  arg1 = (LLVMValueRef)jarg1; 
  result = LLVMIsAResumeInst(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CSLLVM_IsACleanupReturnInst(void * jarg1) {
  void * jresult ;
  LLVMValueRef arg1 ;
  LLVMValueRef result;
  
  arg1 = (LLVMValueRef)jarg1; 
  result = LLVMIsACleanupReturnInst(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CSLLVM_IsACatchReturnInst(void * jarg1) {
  void * jresult ;
  LLVMValueRef arg1 ;
  LLVMValueRef result;
  
  arg1 = (LLVMValueRef)jarg1; 
  result = LLVMIsACatchReturnInst(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CSLLVM_IsAFuncletPadInst(void * jarg1) {
  void * jresult ;
  LLVMValueRef arg1 ;
  LLVMValueRef result;
  
  arg1 = (LLVMValueRef)jarg1; 
  result = LLVMIsAFuncletPadInst(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CSLLVM_IsACatchPadInst(void * jarg1) {
  void * jresult ;
  LLVMValueRef arg1 ;
  LLVMValueRef result;
  
  arg1 = (LLVMValueRef)jarg1; 
  result = LLVMIsACatchPadInst(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CSLLVM_IsACleanupPadInst(void * jarg1) {
  void * jresult ;
  LLVMValueRef arg1 ;
  LLVMValueRef result;
  
  arg1 = (LLVMValueRef)jarg1; 
  result = LLVMIsACleanupPadInst(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CSLLVM_IsAUnaryInstruction(void * jarg1) {
  void * jresult ;
  LLVMValueRef arg1 ;
  LLVMValueRef result;
  
  arg1 = (LLVMValueRef)jarg1; 
  result = LLVMIsAUnaryInstruction(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CSLLVM_IsAAllocaInst(void * jarg1) {
  void * jresult ;
  LLVMValueRef arg1 ;
  LLVMValueRef result;
  
  arg1 = (LLVMValueRef)jarg1; 
  result = LLVMIsAAllocaInst(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CSLLVM_IsACastInst(void * jarg1) {
  void * jresult ;
  LLVMValueRef arg1 ;
  LLVMValueRef result;
  
  arg1 = (LLVMValueRef)jarg1; 
  result = LLVMIsACastInst(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CSLLVM_IsAAddrSpaceCastInst(void * jarg1) {
  void * jresult ;
  LLVMValueRef arg1 ;
  LLVMValueRef result;
  
  arg1 = (LLVMValueRef)jarg1; 
  result = LLVMIsAAddrSpaceCastInst(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CSLLVM_IsABitCastInst(void * jarg1) {
  void * jresult ;
  LLVMValueRef arg1 ;
  LLVMValueRef result;
  
  arg1 = (LLVMValueRef)jarg1; 
  result = LLVMIsABitCastInst(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CSLLVM_IsAFPExtInst(void * jarg1) {
  void * jresult ;
  LLVMValueRef arg1 ;
  LLVMValueRef result;
  
  arg1 = (LLVMValueRef)jarg1; 
  result = LLVMIsAFPExtInst(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CSLLVM_IsAFPToSIInst(void * jarg1) {
  void * jresult ;
  LLVMValueRef arg1 ;
  LLVMValueRef result;
  
  arg1 = (LLVMValueRef)jarg1; 
  result = LLVMIsAFPToSIInst(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CSLLVM_IsAFPToUIInst(void * jarg1) {
  void * jresult ;
  LLVMValueRef arg1 ;
  LLVMValueRef result;
  
  arg1 = (LLVMValueRef)jarg1; 
  result = LLVMIsAFPToUIInst(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CSLLVM_IsAFPTruncInst(void * jarg1) {
  void * jresult ;
  LLVMValueRef arg1 ;
  LLVMValueRef result;
  
  arg1 = (LLVMValueRef)jarg1; 
  result = LLVMIsAFPTruncInst(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CSLLVM_IsAIntToPtrInst(void * jarg1) {
  void * jresult ;
  LLVMValueRef arg1 ;
  LLVMValueRef result;
  
  arg1 = (LLVMValueRef)jarg1; 
  result = LLVMIsAIntToPtrInst(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CSLLVM_IsAPtrToIntInst(void * jarg1) {
  void * jresult ;
  LLVMValueRef arg1 ;
  LLVMValueRef result;
  
  arg1 = (LLVMValueRef)jarg1; 
  result = LLVMIsAPtrToIntInst(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CSLLVM_IsASExtInst(void * jarg1) {
  void * jresult ;
  LLVMValueRef arg1 ;
  LLVMValueRef result;
  
  arg1 = (LLVMValueRef)jarg1; 
  result = LLVMIsASExtInst(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CSLLVM_IsASIToFPInst(void * jarg1) {
  void * jresult ;
  LLVMValueRef arg1 ;
  LLVMValueRef result;
  
  arg1 = (LLVMValueRef)jarg1; 
  result = LLVMIsASIToFPInst(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CSLLVM_IsATruncInst(void * jarg1) {
  void * jresult ;
  LLVMValueRef arg1 ;
  LLVMValueRef result;
  
  arg1 = (LLVMValueRef)jarg1; 
  result = LLVMIsATruncInst(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CSLLVM_IsAUIToFPInst(void * jarg1) {
  void * jresult ;
  LLVMValueRef arg1 ;
  LLVMValueRef result;
  
  arg1 = (LLVMValueRef)jarg1; 
  result = LLVMIsAUIToFPInst(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CSLLVM_IsAZExtInst(void * jarg1) {
  void * jresult ;
  LLVMValueRef arg1 ;
  LLVMValueRef result;
  
  arg1 = (LLVMValueRef)jarg1; 
  result = LLVMIsAZExtInst(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CSLLVM_IsAExtractValueInst(void * jarg1) {
  void * jresult ;
  LLVMValueRef arg1 ;
  LLVMValueRef result;
  
  arg1 = (LLVMValueRef)jarg1; 
  result = LLVMIsAExtractValueInst(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CSLLVM_IsALoadInst(void * jarg1) {
  void * jresult ;
  LLVMValueRef arg1 ;
  LLVMValueRef result;
  
  arg1 = (LLVMValueRef)jarg1; 
  result = LLVMIsALoadInst(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CSLLVM_IsAVAArgInst(void * jarg1) {
  void * jresult ;
  LLVMValueRef arg1 ;
  LLVMValueRef result;
  
  arg1 = (LLVMValueRef)jarg1; 
  result = LLVMIsAVAArgInst(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CSLLVM_IsAMDNode(void * jarg1) {
  void * jresult ;
  LLVMValueRef arg1 ;
  LLVMValueRef result;
  
  arg1 = (LLVMValueRef)jarg1; 
  result = LLVMIsAMDNode(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CSLLVM_IsAMDString(void * jarg1) {
  void * jresult ;
  LLVMValueRef arg1 ;
  LLVMValueRef result;
  
  arg1 = (LLVMValueRef)jarg1; 
  result = LLVMIsAMDString(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CSLLVM_GetFirstUse(void * jarg1) {
  void * jresult ;
  LLVMValueRef arg1 ;
  LLVMUseRef result;
  
  arg1 = (LLVMValueRef)jarg1; 
  result = LLVMGetFirstUse(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CSLLVM_GetNextUse(void * jarg1) {
  void * jresult ;
  LLVMUseRef arg1 ;
  LLVMUseRef result;
  
  arg1 = (LLVMUseRef)jarg1; 
  result = LLVMGetNextUse(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CSLLVM_GetUser(void * jarg1) {
  void * jresult ;
  LLVMUseRef arg1 ;
  LLVMValueRef result;
  
  arg1 = (LLVMUseRef)jarg1; 
  result = LLVMGetUser(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CSLLVM_GetUsedValue(void * jarg1) {
  void * jresult ;
  LLVMUseRef arg1 ;
  LLVMValueRef result;
  
  arg1 = (LLVMUseRef)jarg1; 
  result = LLVMGetUsedValue(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CSLLVM_GetOperand(void * jarg1, unsigned int jarg2) {
  void * jresult ;
  LLVMValueRef arg1 ;
  unsigned int arg2 ;
  LLVMValueRef result;
  
  arg1 = (LLVMValueRef)jarg1; 
  arg2 = (unsigned int)jarg2; 
  result = LLVMGetOperand(arg1,arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CSLLVM_GetOperandUse(void * jarg1, unsigned int jarg2) {
  void * jresult ;
  LLVMValueRef arg1 ;
  unsigned int arg2 ;
  LLVMUseRef result;
  
  arg1 = (LLVMValueRef)jarg1; 
  arg2 = (unsigned int)jarg2; 
  result = LLVMGetOperandUse(arg1,arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CSLLVM_SetOperand(void * jarg1, unsigned int jarg2, void * jarg3) {
  LLVMValueRef arg1 ;
  unsigned int arg2 ;
  LLVMValueRef arg3 ;
  
  arg1 = (LLVMValueRef)jarg1; 
  arg2 = (unsigned int)jarg2; 
  arg3 = (LLVMValueRef)jarg3; 
  LLVMSetOperand(arg1,arg2,arg3);
}


SWIGEXPORT int SWIGSTDCALL CSharp_CSLLVM_GetNumOperands(void * jarg1) {
  int jresult ;
  LLVMValueRef arg1 ;
  int result;
  
  arg1 = (LLVMValueRef)jarg1; 
  result = (int)LLVMGetNumOperands(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CSLLVM_ConstNull(void * jarg1) {
  void * jresult ;
  LLVMTypeRef arg1 ;
  LLVMValueRef result;
  
  arg1 = (LLVMTypeRef)jarg1; 
  result = LLVMConstNull(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CSLLVM_ConstAllOnes(void * jarg1) {
  void * jresult ;
  LLVMTypeRef arg1 ;
  LLVMValueRef result;
  
  arg1 = (LLVMTypeRef)jarg1; 
  result = LLVMConstAllOnes(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CSLLVM_GetUndef(void * jarg1) {
  void * jresult ;
  LLVMTypeRef arg1 ;
  LLVMValueRef result;
  
  arg1 = (LLVMTypeRef)jarg1; 
  result = LLVMGetUndef(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_CSLLVM_IsNull(void * jarg1) {
  unsigned int jresult ;
  LLVMValueRef arg1 ;
  LLVMBool result;
  
  arg1 = (LLVMValueRef)jarg1; 
  result = (LLVMBool)LLVMIsNull(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CSLLVM_ConstPointerNull(void * jarg1) {
  void * jresult ;
  LLVMTypeRef arg1 ;
  LLVMValueRef result;
  
  arg1 = (LLVMTypeRef)jarg1; 
  result = LLVMConstPointerNull(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CSLLVM_ConstInt(void * jarg1, unsigned long long jarg2, unsigned int jarg3) {
  void * jresult ;
  LLVMTypeRef arg1 ;
  unsigned long long arg2 ;
  LLVMBool arg3 ;
  LLVMValueRef result;
  
  arg1 = (LLVMTypeRef)jarg1; 
  arg2 = (unsigned long long)jarg2; 
  arg3 = jarg3 ? true : false; 
  result = LLVMConstInt(arg1,arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CSLLVM_ConstIntOfString(void * jarg1, char * jarg2, unsigned char jarg3) {
  void * jresult ;
  LLVMTypeRef arg1 ;
  char *arg2 = (char *) 0 ;
  uint8_t arg3 ;
  LLVMValueRef result;
  
  arg1 = (LLVMTypeRef)jarg1; 
  arg2 = (char *)jarg2; 
  arg3 = (uint8_t)jarg3; 
  result = LLVMConstIntOfString(arg1,(char const *)arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CSLLVM_ConstIntOfStringAndSize(void * jarg1, char * jarg2, unsigned int jarg3, unsigned char jarg4) {
  void * jresult ;
  LLVMTypeRef arg1 ;
  char *arg2 = (char *) 0 ;
  unsigned int arg3 ;
  uint8_t arg4 ;
  LLVMValueRef result;
  
  arg1 = (LLVMTypeRef)jarg1; 
  arg2 = (char *)jarg2; 
  arg3 = (unsigned int)jarg3; 
  arg4 = (uint8_t)jarg4; 
  result = LLVMConstIntOfStringAndSize(arg1,(char const *)arg2,arg3,arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CSLLVM_ConstReal(void * jarg1, double jarg2) {
  void * jresult ;
  LLVMTypeRef arg1 ;
  double arg2 ;
  LLVMValueRef result;
  
  arg1 = (LLVMTypeRef)jarg1; 
  arg2 = (double)jarg2; 
  result = LLVMConstReal(arg1,arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CSLLVM_ConstRealOfString(void * jarg1, char * jarg2) {
  void * jresult ;
  LLVMTypeRef arg1 ;
  char *arg2 = (char *) 0 ;
  LLVMValueRef result;
  
  arg1 = (LLVMTypeRef)jarg1; 
  arg2 = (char *)jarg2; 
  result = LLVMConstRealOfString(arg1,(char const *)arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CSLLVM_ConstRealOfStringAndSize(void * jarg1, char * jarg2, unsigned int jarg3) {
  void * jresult ;
  LLVMTypeRef arg1 ;
  char *arg2 = (char *) 0 ;
  unsigned int arg3 ;
  LLVMValueRef result;
  
  arg1 = (LLVMTypeRef)jarg1; 
  arg2 = (char *)jarg2; 
  arg3 = (unsigned int)jarg3; 
  result = LLVMConstRealOfStringAndSize(arg1,(char const *)arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned long long SWIGSTDCALL CSharp_CSLLVM_ConstIntGetZExtValue(void * jarg1) {
  unsigned long long jresult ;
  LLVMValueRef arg1 ;
  unsigned long long result;
  
  arg1 = (LLVMValueRef)jarg1; 
  result = (unsigned long long)LLVMConstIntGetZExtValue(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT long long SWIGSTDCALL CSharp_CSLLVM_ConstIntGetSExtValue(void * jarg1) {
  long long jresult ;
  LLVMValueRef arg1 ;
  long long result;
  
  arg1 = (LLVMValueRef)jarg1; 
  result = (long long)LLVMConstIntGetSExtValue(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_CSLLVM_ConstRealGetDouble(void * jarg1, unsigned int * jarg2) {
  double jresult ;
  LLVMValueRef arg1 ;
  LLVMBool *arg2 = (LLVMBool *) 0 ;
  double result;
  
  arg1 = (LLVMValueRef)jarg1; 
  *jarg2 = 0; 
  arg2 = (LLVMBool *)jarg2; 
  result = (double)LLVMConstRealGetDouble(arg1,arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CSLLVM_ConstStringInContext(void * jarg1, char * jarg2, unsigned int jarg3, unsigned int jarg4) {
  void * jresult ;
  LLVMContextRef arg1 ;
  char *arg2 = (char *) 0 ;
  unsigned int arg3 ;
  LLVMBool arg4 ;
  LLVMValueRef result;
  
  arg1 = (LLVMContextRef)jarg1; 
  arg2 = (char *)jarg2; 
  arg3 = (unsigned int)jarg3; 
  arg4 = jarg4 ? true : false; 
  result = LLVMConstStringInContext(arg1,(char const *)arg2,arg3,arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CSLLVM_ConstString(char * jarg1, unsigned int jarg2, unsigned int jarg3) {
  void * jresult ;
  char *arg1 = (char *) 0 ;
  unsigned int arg2 ;
  LLVMBool arg3 ;
  LLVMValueRef result;
  
  arg1 = (char *)jarg1; 
  arg2 = (unsigned int)jarg2; 
  arg3 = jarg3 ? true : false; 
  result = LLVMConstString((char const *)arg1,arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_CSLLVM_IsConstantString(void * jarg1) {
  unsigned int jresult ;
  LLVMValueRef arg1 ;
  LLVMBool result;
  
  arg1 = (LLVMValueRef)jarg1; 
  result = (LLVMBool)LLVMIsConstantString(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_CSLLVM_GetAsString(void * jarg1, void * jarg2) {
  char * jresult ;
  LLVMValueRef arg1 ;
  size_t *arg2 = (size_t *) 0 ;
  char *result = 0 ;
  
  arg1 = (LLVMValueRef)jarg1; 
  arg2 = (size_t *)jarg2; 
  result = (char *)LLVMGetAsString(arg1,arg2);
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CSLLVM_ConstStructInContext(void * jarg1, void* arg2_data, unsigned int jarg2, unsigned int jarg4) {
  void * jresult ;
  LLVMContextRef arg1 ;
  LLVMValueRef *arg2 = (LLVMValueRef *) 0 ;
  unsigned int arg3 ;
  LLVMBool arg4 ;
  LLVMValueRef result;
  
  arg1 = (LLVMContextRef)jarg1; 
  arg2 = (LLVMValueRef*)arg2_data; arg3 = jarg2;
  arg4 = jarg4 ? true : false; 
  result = LLVMConstStructInContext(arg1,arg2,arg3,arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CSLLVM_ConstStruct(void* arg1_data, unsigned int jarg1, unsigned int jarg3) {
  void * jresult ;
  LLVMValueRef *arg1 = (LLVMValueRef *) 0 ;
  unsigned int arg2 ;
  LLVMBool arg3 ;
  LLVMValueRef result;
  
  arg1 = (LLVMValueRef*)arg1_data; arg2 = jarg1;
  arg3 = jarg3 ? true : false; 
  result = LLVMConstStruct(arg1,arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CSLLVM_ConstArray(void * jarg1, void* arg2_data, unsigned int jarg2) {
  void * jresult ;
  LLVMTypeRef arg1 ;
  LLVMValueRef *arg2 = (LLVMValueRef *) 0 ;
  unsigned int arg3 ;
  LLVMValueRef result;
  
  arg1 = (LLVMTypeRef)jarg1; 
  arg2 = (LLVMValueRef*)arg2_data; arg3 = jarg2;
  result = LLVMConstArray(arg1,arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CSLLVM_ConstNamedStruct(void * jarg1, void* arg2_data, unsigned int jarg2) {
  void * jresult ;
  LLVMTypeRef arg1 ;
  LLVMValueRef *arg2 = (LLVMValueRef *) 0 ;
  unsigned int arg3 ;
  LLVMValueRef result;
  
  arg1 = (LLVMTypeRef)jarg1; 
  arg2 = (LLVMValueRef*)arg2_data; arg3 = jarg2;
  result = LLVMConstNamedStruct(arg1,arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CSLLVM_GetElementAsConstant(void * jarg1, unsigned int jarg2) {
  void * jresult ;
  LLVMValueRef arg1 ;
  unsigned int arg2 ;
  LLVMValueRef result;
  
  arg1 = (LLVMValueRef)jarg1; 
  arg2 = (unsigned int)jarg2; 
  result = LLVMGetElementAsConstant(arg1,arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CSLLVM_ConstVector(void* arg1_data, unsigned int jarg1) {
  void * jresult ;
  LLVMValueRef *arg1 = (LLVMValueRef *) 0 ;
  unsigned int arg2 ;
  LLVMValueRef result;
  
  arg1 = (LLVMValueRef*)arg1_data; arg2 = jarg1;
  result = LLVMConstVector(arg1,arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_CSLLVM_GetConstOpcode(void * jarg1) {
  int jresult ;
  LLVMValueRef arg1 ;
  LLVMOpcode result;
  
  arg1 = (LLVMValueRef)jarg1; 
  result = (LLVMOpcode)LLVMGetConstOpcode(arg1);
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CSLLVM_AlignOf(void * jarg1) {
  void * jresult ;
  LLVMTypeRef arg1 ;
  LLVMValueRef result;
  
  arg1 = (LLVMTypeRef)jarg1; 
  result = LLVMAlignOf(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CSLLVM_SizeOf(void * jarg1) {
  void * jresult ;
  LLVMTypeRef arg1 ;
  LLVMValueRef result;
  
  arg1 = (LLVMTypeRef)jarg1; 
  result = LLVMSizeOf(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CSLLVM_ConstNeg(void * jarg1) {
  void * jresult ;
  LLVMValueRef arg1 ;
  LLVMValueRef result;
  
  arg1 = (LLVMValueRef)jarg1; 
  result = LLVMConstNeg(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CSLLVM_ConstNSWNeg(void * jarg1) {
  void * jresult ;
  LLVMValueRef arg1 ;
  LLVMValueRef result;
  
  arg1 = (LLVMValueRef)jarg1; 
  result = LLVMConstNSWNeg(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CSLLVM_ConstNUWNeg(void * jarg1) {
  void * jresult ;
  LLVMValueRef arg1 ;
  LLVMValueRef result;
  
  arg1 = (LLVMValueRef)jarg1; 
  result = LLVMConstNUWNeg(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CSLLVM_ConstFNeg(void * jarg1) {
  void * jresult ;
  LLVMValueRef arg1 ;
  LLVMValueRef result;
  
  arg1 = (LLVMValueRef)jarg1; 
  result = LLVMConstFNeg(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CSLLVM_ConstNot(void * jarg1) {
  void * jresult ;
  LLVMValueRef arg1 ;
  LLVMValueRef result;
  
  arg1 = (LLVMValueRef)jarg1; 
  result = LLVMConstNot(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CSLLVM_ConstAdd(void * jarg1, void * jarg2) {
  void * jresult ;
  LLVMValueRef arg1 ;
  LLVMValueRef arg2 ;
  LLVMValueRef result;
  
  arg1 = (LLVMValueRef)jarg1; 
  arg2 = (LLVMValueRef)jarg2; 
  result = LLVMConstAdd(arg1,arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CSLLVM_ConstNSWAdd(void * jarg1, void * jarg2) {
  void * jresult ;
  LLVMValueRef arg1 ;
  LLVMValueRef arg2 ;
  LLVMValueRef result;
  
  arg1 = (LLVMValueRef)jarg1; 
  arg2 = (LLVMValueRef)jarg2; 
  result = LLVMConstNSWAdd(arg1,arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CSLLVM_ConstNUWAdd(void * jarg1, void * jarg2) {
  void * jresult ;
  LLVMValueRef arg1 ;
  LLVMValueRef arg2 ;
  LLVMValueRef result;
  
  arg1 = (LLVMValueRef)jarg1; 
  arg2 = (LLVMValueRef)jarg2; 
  result = LLVMConstNUWAdd(arg1,arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CSLLVM_ConstFAdd(void * jarg1, void * jarg2) {
  void * jresult ;
  LLVMValueRef arg1 ;
  LLVMValueRef arg2 ;
  LLVMValueRef result;
  
  arg1 = (LLVMValueRef)jarg1; 
  arg2 = (LLVMValueRef)jarg2; 
  result = LLVMConstFAdd(arg1,arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CSLLVM_ConstSub(void * jarg1, void * jarg2) {
  void * jresult ;
  LLVMValueRef arg1 ;
  LLVMValueRef arg2 ;
  LLVMValueRef result;
  
  arg1 = (LLVMValueRef)jarg1; 
  arg2 = (LLVMValueRef)jarg2; 
  result = LLVMConstSub(arg1,arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CSLLVM_ConstNSWSub(void * jarg1, void * jarg2) {
  void * jresult ;
  LLVMValueRef arg1 ;
  LLVMValueRef arg2 ;
  LLVMValueRef result;
  
  arg1 = (LLVMValueRef)jarg1; 
  arg2 = (LLVMValueRef)jarg2; 
  result = LLVMConstNSWSub(arg1,arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CSLLVM_ConstNUWSub(void * jarg1, void * jarg2) {
  void * jresult ;
  LLVMValueRef arg1 ;
  LLVMValueRef arg2 ;
  LLVMValueRef result;
  
  arg1 = (LLVMValueRef)jarg1; 
  arg2 = (LLVMValueRef)jarg2; 
  result = LLVMConstNUWSub(arg1,arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CSLLVM_ConstFSub(void * jarg1, void * jarg2) {
  void * jresult ;
  LLVMValueRef arg1 ;
  LLVMValueRef arg2 ;
  LLVMValueRef result;
  
  arg1 = (LLVMValueRef)jarg1; 
  arg2 = (LLVMValueRef)jarg2; 
  result = LLVMConstFSub(arg1,arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CSLLVM_ConstMul(void * jarg1, void * jarg2) {
  void * jresult ;
  LLVMValueRef arg1 ;
  LLVMValueRef arg2 ;
  LLVMValueRef result;
  
  arg1 = (LLVMValueRef)jarg1; 
  arg2 = (LLVMValueRef)jarg2; 
  result = LLVMConstMul(arg1,arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CSLLVM_ConstNSWMul(void * jarg1, void * jarg2) {
  void * jresult ;
  LLVMValueRef arg1 ;
  LLVMValueRef arg2 ;
  LLVMValueRef result;
  
  arg1 = (LLVMValueRef)jarg1; 
  arg2 = (LLVMValueRef)jarg2; 
  result = LLVMConstNSWMul(arg1,arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CSLLVM_ConstNUWMul(void * jarg1, void * jarg2) {
  void * jresult ;
  LLVMValueRef arg1 ;
  LLVMValueRef arg2 ;
  LLVMValueRef result;
  
  arg1 = (LLVMValueRef)jarg1; 
  arg2 = (LLVMValueRef)jarg2; 
  result = LLVMConstNUWMul(arg1,arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CSLLVM_ConstFMul(void * jarg1, void * jarg2) {
  void * jresult ;
  LLVMValueRef arg1 ;
  LLVMValueRef arg2 ;
  LLVMValueRef result;
  
  arg1 = (LLVMValueRef)jarg1; 
  arg2 = (LLVMValueRef)jarg2; 
  result = LLVMConstFMul(arg1,arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CSLLVM_ConstUDiv(void * jarg1, void * jarg2) {
  void * jresult ;
  LLVMValueRef arg1 ;
  LLVMValueRef arg2 ;
  LLVMValueRef result;
  
  arg1 = (LLVMValueRef)jarg1; 
  arg2 = (LLVMValueRef)jarg2; 
  result = LLVMConstUDiv(arg1,arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CSLLVM_ConstSDiv(void * jarg1, void * jarg2) {
  void * jresult ;
  LLVMValueRef arg1 ;
  LLVMValueRef arg2 ;
  LLVMValueRef result;
  
  arg1 = (LLVMValueRef)jarg1; 
  arg2 = (LLVMValueRef)jarg2; 
  result = LLVMConstSDiv(arg1,arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CSLLVM_ConstExactSDiv(void * jarg1, void * jarg2) {
  void * jresult ;
  LLVMValueRef arg1 ;
  LLVMValueRef arg2 ;
  LLVMValueRef result;
  
  arg1 = (LLVMValueRef)jarg1; 
  arg2 = (LLVMValueRef)jarg2; 
  result = LLVMConstExactSDiv(arg1,arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CSLLVM_ConstFDiv(void * jarg1, void * jarg2) {
  void * jresult ;
  LLVMValueRef arg1 ;
  LLVMValueRef arg2 ;
  LLVMValueRef result;
  
  arg1 = (LLVMValueRef)jarg1; 
  arg2 = (LLVMValueRef)jarg2; 
  result = LLVMConstFDiv(arg1,arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CSLLVM_ConstURem(void * jarg1, void * jarg2) {
  void * jresult ;
  LLVMValueRef arg1 ;
  LLVMValueRef arg2 ;
  LLVMValueRef result;
  
  arg1 = (LLVMValueRef)jarg1; 
  arg2 = (LLVMValueRef)jarg2; 
  result = LLVMConstURem(arg1,arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CSLLVM_ConstSRem(void * jarg1, void * jarg2) {
  void * jresult ;
  LLVMValueRef arg1 ;
  LLVMValueRef arg2 ;
  LLVMValueRef result;
  
  arg1 = (LLVMValueRef)jarg1; 
  arg2 = (LLVMValueRef)jarg2; 
  result = LLVMConstSRem(arg1,arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CSLLVM_ConstFRem(void * jarg1, void * jarg2) {
  void * jresult ;
  LLVMValueRef arg1 ;
  LLVMValueRef arg2 ;
  LLVMValueRef result;
  
  arg1 = (LLVMValueRef)jarg1; 
  arg2 = (LLVMValueRef)jarg2; 
  result = LLVMConstFRem(arg1,arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CSLLVM_ConstAnd(void * jarg1, void * jarg2) {
  void * jresult ;
  LLVMValueRef arg1 ;
  LLVMValueRef arg2 ;
  LLVMValueRef result;
  
  arg1 = (LLVMValueRef)jarg1; 
  arg2 = (LLVMValueRef)jarg2; 
  result = LLVMConstAnd(arg1,arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CSLLVM_ConstOr(void * jarg1, void * jarg2) {
  void * jresult ;
  LLVMValueRef arg1 ;
  LLVMValueRef arg2 ;
  LLVMValueRef result;
  
  arg1 = (LLVMValueRef)jarg1; 
  arg2 = (LLVMValueRef)jarg2; 
  result = LLVMConstOr(arg1,arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CSLLVM_ConstXor(void * jarg1, void * jarg2) {
  void * jresult ;
  LLVMValueRef arg1 ;
  LLVMValueRef arg2 ;
  LLVMValueRef result;
  
  arg1 = (LLVMValueRef)jarg1; 
  arg2 = (LLVMValueRef)jarg2; 
  result = LLVMConstXor(arg1,arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CSLLVM_ConstICmp(int jarg1, void * jarg2, void * jarg3) {
  void * jresult ;
  LLVMIntPredicate arg1 ;
  LLVMValueRef arg2 ;
  LLVMValueRef arg3 ;
  LLVMValueRef result;
  
  arg1 = (LLVMIntPredicate)jarg1; 
  arg2 = (LLVMValueRef)jarg2; 
  arg3 = (LLVMValueRef)jarg3; 
  result = LLVMConstICmp(arg1,arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CSLLVM_ConstFCmp(int jarg1, void * jarg2, void * jarg3) {
  void * jresult ;
  LLVMRealPredicate arg1 ;
  LLVMValueRef arg2 ;
  LLVMValueRef arg3 ;
  LLVMValueRef result;
  
  arg1 = (LLVMRealPredicate)jarg1; 
  arg2 = (LLVMValueRef)jarg2; 
  arg3 = (LLVMValueRef)jarg3; 
  result = LLVMConstFCmp(arg1,arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CSLLVM_ConstShl(void * jarg1, void * jarg2) {
  void * jresult ;
  LLVMValueRef arg1 ;
  LLVMValueRef arg2 ;
  LLVMValueRef result;
  
  arg1 = (LLVMValueRef)jarg1; 
  arg2 = (LLVMValueRef)jarg2; 
  result = LLVMConstShl(arg1,arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CSLLVM_ConstLShr(void * jarg1, void * jarg2) {
  void * jresult ;
  LLVMValueRef arg1 ;
  LLVMValueRef arg2 ;
  LLVMValueRef result;
  
  arg1 = (LLVMValueRef)jarg1; 
  arg2 = (LLVMValueRef)jarg2; 
  result = LLVMConstLShr(arg1,arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CSLLVM_ConstAShr(void * jarg1, void * jarg2) {
  void * jresult ;
  LLVMValueRef arg1 ;
  LLVMValueRef arg2 ;
  LLVMValueRef result;
  
  arg1 = (LLVMValueRef)jarg1; 
  arg2 = (LLVMValueRef)jarg2; 
  result = LLVMConstAShr(arg1,arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CSLLVM_ConstGEP(void * jarg1, void* arg2_data, unsigned int jarg2) {
  void * jresult ;
  LLVMValueRef arg1 ;
  LLVMValueRef *arg2 = (LLVMValueRef *) 0 ;
  unsigned int arg3 ;
  LLVMValueRef result;
  
  arg1 = (LLVMValueRef)jarg1; 
  arg2 = (LLVMValueRef*)arg2_data; arg3 = jarg2;
  result = LLVMConstGEP(arg1,arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CSLLVM_ConstInBoundsGEP(void * jarg1, void* arg2_data, unsigned int jarg2) {
  void * jresult ;
  LLVMValueRef arg1 ;
  LLVMValueRef *arg2 = (LLVMValueRef *) 0 ;
  unsigned int arg3 ;
  LLVMValueRef result;
  
  arg1 = (LLVMValueRef)jarg1; 
  arg2 = (LLVMValueRef*)arg2_data; arg3 = jarg2;
  result = LLVMConstInBoundsGEP(arg1,arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CSLLVM_ConstTrunc(void * jarg1, void * jarg2) {
  void * jresult ;
  LLVMValueRef arg1 ;
  LLVMTypeRef arg2 ;
  LLVMValueRef result;
  
  arg1 = (LLVMValueRef)jarg1; 
  arg2 = (LLVMTypeRef)jarg2; 
  result = LLVMConstTrunc(arg1,arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CSLLVM_ConstSExt(void * jarg1, void * jarg2) {
  void * jresult ;
  LLVMValueRef arg1 ;
  LLVMTypeRef arg2 ;
  LLVMValueRef result;
  
  arg1 = (LLVMValueRef)jarg1; 
  arg2 = (LLVMTypeRef)jarg2; 
  result = LLVMConstSExt(arg1,arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CSLLVM_ConstZExt(void * jarg1, void * jarg2) {
  void * jresult ;
  LLVMValueRef arg1 ;
  LLVMTypeRef arg2 ;
  LLVMValueRef result;
  
  arg1 = (LLVMValueRef)jarg1; 
  arg2 = (LLVMTypeRef)jarg2; 
  result = LLVMConstZExt(arg1,arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CSLLVM_ConstFPTrunc(void * jarg1, void * jarg2) {
  void * jresult ;
  LLVMValueRef arg1 ;
  LLVMTypeRef arg2 ;
  LLVMValueRef result;
  
  arg1 = (LLVMValueRef)jarg1; 
  arg2 = (LLVMTypeRef)jarg2; 
  result = LLVMConstFPTrunc(arg1,arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CSLLVM_ConstFPExt(void * jarg1, void * jarg2) {
  void * jresult ;
  LLVMValueRef arg1 ;
  LLVMTypeRef arg2 ;
  LLVMValueRef result;
  
  arg1 = (LLVMValueRef)jarg1; 
  arg2 = (LLVMTypeRef)jarg2; 
  result = LLVMConstFPExt(arg1,arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CSLLVM_ConstUIToFP(void * jarg1, void * jarg2) {
  void * jresult ;
  LLVMValueRef arg1 ;
  LLVMTypeRef arg2 ;
  LLVMValueRef result;
  
  arg1 = (LLVMValueRef)jarg1; 
  arg2 = (LLVMTypeRef)jarg2; 
  result = LLVMConstUIToFP(arg1,arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CSLLVM_ConstSIToFP(void * jarg1, void * jarg2) {
  void * jresult ;
  LLVMValueRef arg1 ;
  LLVMTypeRef arg2 ;
  LLVMValueRef result;
  
  arg1 = (LLVMValueRef)jarg1; 
  arg2 = (LLVMTypeRef)jarg2; 
  result = LLVMConstSIToFP(arg1,arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CSLLVM_ConstFPToUI(void * jarg1, void * jarg2) {
  void * jresult ;
  LLVMValueRef arg1 ;
  LLVMTypeRef arg2 ;
  LLVMValueRef result;
  
  arg1 = (LLVMValueRef)jarg1; 
  arg2 = (LLVMTypeRef)jarg2; 
  result = LLVMConstFPToUI(arg1,arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CSLLVM_ConstFPToSI(void * jarg1, void * jarg2) {
  void * jresult ;
  LLVMValueRef arg1 ;
  LLVMTypeRef arg2 ;
  LLVMValueRef result;
  
  arg1 = (LLVMValueRef)jarg1; 
  arg2 = (LLVMTypeRef)jarg2; 
  result = LLVMConstFPToSI(arg1,arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CSLLVM_ConstPtrToInt(void * jarg1, void * jarg2) {
  void * jresult ;
  LLVMValueRef arg1 ;
  LLVMTypeRef arg2 ;
  LLVMValueRef result;
  
  arg1 = (LLVMValueRef)jarg1; 
  arg2 = (LLVMTypeRef)jarg2; 
  result = LLVMConstPtrToInt(arg1,arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CSLLVM_ConstIntToPtr(void * jarg1, void * jarg2) {
  void * jresult ;
  LLVMValueRef arg1 ;
  LLVMTypeRef arg2 ;
  LLVMValueRef result;
  
  arg1 = (LLVMValueRef)jarg1; 
  arg2 = (LLVMTypeRef)jarg2; 
  result = LLVMConstIntToPtr(arg1,arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CSLLVM_ConstBitCast(void * jarg1, void * jarg2) {
  void * jresult ;
  LLVMValueRef arg1 ;
  LLVMTypeRef arg2 ;
  LLVMValueRef result;
  
  arg1 = (LLVMValueRef)jarg1; 
  arg2 = (LLVMTypeRef)jarg2; 
  result = LLVMConstBitCast(arg1,arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CSLLVM_ConstAddrSpaceCast(void * jarg1, void * jarg2) {
  void * jresult ;
  LLVMValueRef arg1 ;
  LLVMTypeRef arg2 ;
  LLVMValueRef result;
  
  arg1 = (LLVMValueRef)jarg1; 
  arg2 = (LLVMTypeRef)jarg2; 
  result = LLVMConstAddrSpaceCast(arg1,arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CSLLVM_ConstZExtOrBitCast(void * jarg1, void * jarg2) {
  void * jresult ;
  LLVMValueRef arg1 ;
  LLVMTypeRef arg2 ;
  LLVMValueRef result;
  
  arg1 = (LLVMValueRef)jarg1; 
  arg2 = (LLVMTypeRef)jarg2; 
  result = LLVMConstZExtOrBitCast(arg1,arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CSLLVM_ConstSExtOrBitCast(void * jarg1, void * jarg2) {
  void * jresult ;
  LLVMValueRef arg1 ;
  LLVMTypeRef arg2 ;
  LLVMValueRef result;
  
  arg1 = (LLVMValueRef)jarg1; 
  arg2 = (LLVMTypeRef)jarg2; 
  result = LLVMConstSExtOrBitCast(arg1,arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CSLLVM_ConstTruncOrBitCast(void * jarg1, void * jarg2) {
  void * jresult ;
  LLVMValueRef arg1 ;
  LLVMTypeRef arg2 ;
  LLVMValueRef result;
  
  arg1 = (LLVMValueRef)jarg1; 
  arg2 = (LLVMTypeRef)jarg2; 
  result = LLVMConstTruncOrBitCast(arg1,arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CSLLVM_ConstPointerCast(void * jarg1, void * jarg2) {
  void * jresult ;
  LLVMValueRef arg1 ;
  LLVMTypeRef arg2 ;
  LLVMValueRef result;
  
  arg1 = (LLVMValueRef)jarg1; 
  arg2 = (LLVMTypeRef)jarg2; 
  result = LLVMConstPointerCast(arg1,arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CSLLVM_ConstIntCast(void * jarg1, void * jarg2, unsigned int jarg3) {
  void * jresult ;
  LLVMValueRef arg1 ;
  LLVMTypeRef arg2 ;
  LLVMBool arg3 ;
  LLVMValueRef result;
  
  arg1 = (LLVMValueRef)jarg1; 
  arg2 = (LLVMTypeRef)jarg2; 
  arg3 = jarg3 ? true : false; 
  result = LLVMConstIntCast(arg1,arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CSLLVM_ConstFPCast(void * jarg1, void * jarg2) {
  void * jresult ;
  LLVMValueRef arg1 ;
  LLVMTypeRef arg2 ;
  LLVMValueRef result;
  
  arg1 = (LLVMValueRef)jarg1; 
  arg2 = (LLVMTypeRef)jarg2; 
  result = LLVMConstFPCast(arg1,arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CSLLVM_ConstSelect(void * jarg1, void * jarg2, void * jarg3) {
  void * jresult ;
  LLVMValueRef arg1 ;
  LLVMValueRef arg2 ;
  LLVMValueRef arg3 ;
  LLVMValueRef result;
  
  arg1 = (LLVMValueRef)jarg1; 
  arg2 = (LLVMValueRef)jarg2; 
  arg3 = (LLVMValueRef)jarg3; 
  result = LLVMConstSelect(arg1,arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CSLLVM_ConstExtractElement(void * jarg1, void * jarg2) {
  void * jresult ;
  LLVMValueRef arg1 ;
  LLVMValueRef arg2 ;
  LLVMValueRef result;
  
  arg1 = (LLVMValueRef)jarg1; 
  arg2 = (LLVMValueRef)jarg2; 
  result = LLVMConstExtractElement(arg1,arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CSLLVM_ConstInsertElement(void * jarg1, void * jarg2, void * jarg3) {
  void * jresult ;
  LLVMValueRef arg1 ;
  LLVMValueRef arg2 ;
  LLVMValueRef arg3 ;
  LLVMValueRef result;
  
  arg1 = (LLVMValueRef)jarg1; 
  arg2 = (LLVMValueRef)jarg2; 
  arg3 = (LLVMValueRef)jarg3; 
  result = LLVMConstInsertElement(arg1,arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CSLLVM_ConstShuffleVector(void * jarg1, void * jarg2, void * jarg3) {
  void * jresult ;
  LLVMValueRef arg1 ;
  LLVMValueRef arg2 ;
  LLVMValueRef arg3 ;
  LLVMValueRef result;
  
  arg1 = (LLVMValueRef)jarg1; 
  arg2 = (LLVMValueRef)jarg2; 
  arg3 = (LLVMValueRef)jarg3; 
  result = LLVMConstShuffleVector(arg1,arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CSLLVM_ConstExtractValue(void * jarg1, void* arg2_data, unsigned int jarg2) {
  void * jresult ;
  LLVMValueRef arg1 ;
  unsigned int *arg2 = (unsigned int *) 0 ;
  unsigned int arg3 ;
  LLVMValueRef result;
  
  arg1 = (LLVMValueRef)jarg1; 
  arg2 = (unsigned*)arg2_data; arg3 = jarg2;
  result = LLVMConstExtractValue(arg1,arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CSLLVM_ConstInsertValue(void * jarg1, void * jarg2, void* arg3_data, unsigned int jarg3) {
  void * jresult ;
  LLVMValueRef arg1 ;
  LLVMValueRef arg2 ;
  unsigned int *arg3 = (unsigned int *) 0 ;
  unsigned int arg4 ;
  LLVMValueRef result;
  
  arg1 = (LLVMValueRef)jarg1; 
  arg2 = (LLVMValueRef)jarg2; 
  arg3 = (unsigned*)arg3_data; arg4 = jarg3;
  result = LLVMConstInsertValue(arg1,arg2,arg3,arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CSLLVM_ConstInlineAsm(void * jarg1, char * jarg2, char * jarg3, unsigned int jarg4, unsigned int jarg5) {
  void * jresult ;
  LLVMTypeRef arg1 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  LLVMBool arg4 ;
  LLVMBool arg5 ;
  LLVMValueRef result;
  
  arg1 = (LLVMTypeRef)jarg1; 
  arg2 = (char *)jarg2; 
  arg3 = (char *)jarg3; 
  arg4 = jarg4 ? true : false; 
  arg5 = jarg5 ? true : false; 
  result = LLVMConstInlineAsm(arg1,(char const *)arg2,(char const *)arg3,arg4,arg5);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CSLLVM_BlockAddress(void * jarg1, void * jarg2) {
  void * jresult ;
  LLVMValueRef arg1 ;
  LLVMBasicBlockRef arg2 ;
  LLVMValueRef result;
  
  arg1 = (LLVMValueRef)jarg1; 
  arg2 = (LLVMBasicBlockRef)jarg2; 
  result = LLVMBlockAddress(arg1,arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CSLLVM_GetGlobalParent(void * jarg1) {
  void * jresult ;
  LLVMValueRef arg1 ;
  LLVMModuleRef result;
  
  arg1 = (LLVMValueRef)jarg1; 
  result = LLVMGetGlobalParent(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_CSLLVM_IsDeclaration(void * jarg1) {
  unsigned int jresult ;
  LLVMValueRef arg1 ;
  LLVMBool result;
  
  arg1 = (LLVMValueRef)jarg1; 
  result = (LLVMBool)LLVMIsDeclaration(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_CSLLVM_GetLinkage(void * jarg1) {
  int jresult ;
  LLVMValueRef arg1 ;
  LLVMLinkage result;
  
  arg1 = (LLVMValueRef)jarg1; 
  result = (LLVMLinkage)LLVMGetLinkage(arg1);
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CSLLVM_SetLinkage(void * jarg1, int jarg2) {
  LLVMValueRef arg1 ;
  LLVMLinkage arg2 ;
  
  arg1 = (LLVMValueRef)jarg1; 
  arg2 = (LLVMLinkage)jarg2; 
  LLVMSetLinkage(arg1,arg2);
}


SWIGEXPORT char * SWIGSTDCALL CSharp_CSLLVM_GetSection(void * jarg1) {
  char * jresult ;
  LLVMValueRef arg1 ;
  char *result = 0 ;
  
  arg1 = (LLVMValueRef)jarg1; 
  result = (char *)LLVMGetSection(arg1);
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CSLLVM_SetSection(void * jarg1, char * jarg2) {
  LLVMValueRef arg1 ;
  char *arg2 = (char *) 0 ;
  
  arg1 = (LLVMValueRef)jarg1; 
  arg2 = (char *)jarg2; 
  LLVMSetSection(arg1,(char const *)arg2);
}


SWIGEXPORT int SWIGSTDCALL CSharp_CSLLVM_GetVisibility(void * jarg1) {
  int jresult ;
  LLVMValueRef arg1 ;
  LLVMVisibility result;
  
  arg1 = (LLVMValueRef)jarg1; 
  result = (LLVMVisibility)LLVMGetVisibility(arg1);
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CSLLVM_SetVisibility(void * jarg1, int jarg2) {
  LLVMValueRef arg1 ;
  LLVMVisibility arg2 ;
  
  arg1 = (LLVMValueRef)jarg1; 
  arg2 = (LLVMVisibility)jarg2; 
  LLVMSetVisibility(arg1,arg2);
}


SWIGEXPORT int SWIGSTDCALL CSharp_CSLLVM_GetDLLStorageClass(void * jarg1) {
  int jresult ;
  LLVMValueRef arg1 ;
  LLVMDLLStorageClass result;
  
  arg1 = (LLVMValueRef)jarg1; 
  result = (LLVMDLLStorageClass)LLVMGetDLLStorageClass(arg1);
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CSLLVM_SetDLLStorageClass(void * jarg1, int jarg2) {
  LLVMValueRef arg1 ;
  LLVMDLLStorageClass arg2 ;
  
  arg1 = (LLVMValueRef)jarg1; 
  arg2 = (LLVMDLLStorageClass)jarg2; 
  LLVMSetDLLStorageClass(arg1,arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_CSLLVM_HasUnnamedAddr(void * jarg1) {
  unsigned int jresult ;
  LLVMValueRef arg1 ;
  LLVMBool result;
  
  arg1 = (LLVMValueRef)jarg1; 
  result = (LLVMBool)LLVMHasUnnamedAddr(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CSLLVM_SetUnnamedAddr(void * jarg1, unsigned int jarg2) {
  LLVMValueRef arg1 ;
  LLVMBool arg2 ;
  
  arg1 = (LLVMValueRef)jarg1; 
  arg2 = jarg2 ? true : false; 
  LLVMSetUnnamedAddr(arg1,arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_CSLLVM_GetAlignment(void * jarg1) {
  unsigned int jresult ;
  LLVMValueRef arg1 ;
  unsigned int result;
  
  arg1 = (LLVMValueRef)jarg1; 
  result = (unsigned int)LLVMGetAlignment(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CSLLVM_SetAlignment(void * jarg1, unsigned int jarg2) {
  LLVMValueRef arg1 ;
  unsigned int arg2 ;
  
  arg1 = (LLVMValueRef)jarg1; 
  arg2 = (unsigned int)jarg2; 
  LLVMSetAlignment(arg1,arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CSLLVM_AddGlobal(void * jarg1, void * jarg2, char * jarg3) {
  void * jresult ;
  LLVMModuleRef arg1 ;
  LLVMTypeRef arg2 ;
  char *arg3 = (char *) 0 ;
  LLVMValueRef result;
  
  arg1 = (LLVMModuleRef)jarg1; 
  arg2 = (LLVMTypeRef)jarg2; 
  arg3 = (char *)jarg3; 
  result = LLVMAddGlobal(arg1,arg2,(char const *)arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CSLLVM_AddGlobalInAddressSpace(void * jarg1, void * jarg2, char * jarg3, unsigned int jarg4) {
  void * jresult ;
  LLVMModuleRef arg1 ;
  LLVMTypeRef arg2 ;
  char *arg3 = (char *) 0 ;
  unsigned int arg4 ;
  LLVMValueRef result;
  
  arg1 = (LLVMModuleRef)jarg1; 
  arg2 = (LLVMTypeRef)jarg2; 
  arg3 = (char *)jarg3; 
  arg4 = (unsigned int)jarg4; 
  result = LLVMAddGlobalInAddressSpace(arg1,arg2,(char const *)arg3,arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CSLLVM_GetNamedGlobal(void * jarg1, char * jarg2) {
  void * jresult ;
  LLVMModuleRef arg1 ;
  char *arg2 = (char *) 0 ;
  LLVMValueRef result;
  
  arg1 = (LLVMModuleRef)jarg1; 
  arg2 = (char *)jarg2; 
  result = LLVMGetNamedGlobal(arg1,(char const *)arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CSLLVM_GetFirstGlobal(void * jarg1) {
  void * jresult ;
  LLVMModuleRef arg1 ;
  LLVMValueRef result;
  
  arg1 = (LLVMModuleRef)jarg1; 
  result = LLVMGetFirstGlobal(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CSLLVM_GetLastGlobal(void * jarg1) {
  void * jresult ;
  LLVMModuleRef arg1 ;
  LLVMValueRef result;
  
  arg1 = (LLVMModuleRef)jarg1; 
  result = LLVMGetLastGlobal(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CSLLVM_GetNextGlobal(void * jarg1) {
  void * jresult ;
  LLVMValueRef arg1 ;
  LLVMValueRef result;
  
  arg1 = (LLVMValueRef)jarg1; 
  result = LLVMGetNextGlobal(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CSLLVM_GetPreviousGlobal(void * jarg1) {
  void * jresult ;
  LLVMValueRef arg1 ;
  LLVMValueRef result;
  
  arg1 = (LLVMValueRef)jarg1; 
  result = LLVMGetPreviousGlobal(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CSLLVM_DeleteGlobal(void * jarg1) {
  LLVMValueRef arg1 ;
  
  arg1 = (LLVMValueRef)jarg1; 
  LLVMDeleteGlobal(arg1);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CSLLVM_GetInitializer(void * jarg1) {
  void * jresult ;
  LLVMValueRef arg1 ;
  LLVMValueRef result;
  
  arg1 = (LLVMValueRef)jarg1; 
  result = LLVMGetInitializer(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CSLLVM_SetInitializer(void * jarg1, void * jarg2) {
  LLVMValueRef arg1 ;
  LLVMValueRef arg2 ;
  
  arg1 = (LLVMValueRef)jarg1; 
  arg2 = (LLVMValueRef)jarg2; 
  LLVMSetInitializer(arg1,arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_CSLLVM_IsThreadLocal(void * jarg1) {
  unsigned int jresult ;
  LLVMValueRef arg1 ;
  LLVMBool result;
  
  arg1 = (LLVMValueRef)jarg1; 
  result = (LLVMBool)LLVMIsThreadLocal(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CSLLVM_SetThreadLocal(void * jarg1, unsigned int jarg2) {
  LLVMValueRef arg1 ;
  LLVMBool arg2 ;
  
  arg1 = (LLVMValueRef)jarg1; 
  arg2 = jarg2 ? true : false; 
  LLVMSetThreadLocal(arg1,arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_CSLLVM_IsGlobalConstant(void * jarg1) {
  unsigned int jresult ;
  LLVMValueRef arg1 ;
  LLVMBool result;
  
  arg1 = (LLVMValueRef)jarg1; 
  result = (LLVMBool)LLVMIsGlobalConstant(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CSLLVM_SetGlobalConstant(void * jarg1, unsigned int jarg2) {
  LLVMValueRef arg1 ;
  LLVMBool arg2 ;
  
  arg1 = (LLVMValueRef)jarg1; 
  arg2 = jarg2 ? true : false; 
  LLVMSetGlobalConstant(arg1,arg2);
}


SWIGEXPORT int SWIGSTDCALL CSharp_CSLLVM_GetThreadLocalMode(void * jarg1) {
  int jresult ;
  LLVMValueRef arg1 ;
  LLVMThreadLocalMode result;
  
  arg1 = (LLVMValueRef)jarg1; 
  result = (LLVMThreadLocalMode)LLVMGetThreadLocalMode(arg1);
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CSLLVM_SetThreadLocalMode(void * jarg1, int jarg2) {
  LLVMValueRef arg1 ;
  LLVMThreadLocalMode arg2 ;
  
  arg1 = (LLVMValueRef)jarg1; 
  arg2 = (LLVMThreadLocalMode)jarg2; 
  LLVMSetThreadLocalMode(arg1,arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_CSLLVM_IsExternallyInitialized(void * jarg1) {
  unsigned int jresult ;
  LLVMValueRef arg1 ;
  LLVMBool result;
  
  arg1 = (LLVMValueRef)jarg1; 
  result = (LLVMBool)LLVMIsExternallyInitialized(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CSLLVM_SetExternallyInitialized(void * jarg1, unsigned int jarg2) {
  LLVMValueRef arg1 ;
  LLVMBool arg2 ;
  
  arg1 = (LLVMValueRef)jarg1; 
  arg2 = jarg2 ? true : false; 
  LLVMSetExternallyInitialized(arg1,arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CSLLVM_AddAlias(void * jarg1, void * jarg2, void * jarg3, char * jarg4) {
  void * jresult ;
  LLVMModuleRef arg1 ;
  LLVMTypeRef arg2 ;
  LLVMValueRef arg3 ;
  char *arg4 = (char *) 0 ;
  LLVMValueRef result;
  
  arg1 = (LLVMModuleRef)jarg1; 
  arg2 = (LLVMTypeRef)jarg2; 
  arg3 = (LLVMValueRef)jarg3; 
  arg4 = (char *)jarg4; 
  result = LLVMAddAlias(arg1,arg2,arg3,(char const *)arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CSLLVM_DeleteFunction(void * jarg1) {
  LLVMValueRef arg1 ;
  
  arg1 = (LLVMValueRef)jarg1; 
  LLVMDeleteFunction(arg1);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_CSLLVM_HasPersonalityFn(void * jarg1) {
  unsigned int jresult ;
  LLVMValueRef arg1 ;
  LLVMBool result;
  
  arg1 = (LLVMValueRef)jarg1; 
  result = (LLVMBool)LLVMHasPersonalityFn(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CSLLVM_GetPersonalityFn(void * jarg1) {
  void * jresult ;
  LLVMValueRef arg1 ;
  LLVMValueRef result;
  
  arg1 = (LLVMValueRef)jarg1; 
  result = LLVMGetPersonalityFn(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CSLLVM_SetPersonalityFn(void * jarg1, void * jarg2) {
  LLVMValueRef arg1 ;
  LLVMValueRef arg2 ;
  
  arg1 = (LLVMValueRef)jarg1; 
  arg2 = (LLVMValueRef)jarg2; 
  LLVMSetPersonalityFn(arg1,arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_CSLLVM_GetIntrinsicID(void * jarg1) {
  unsigned int jresult ;
  LLVMValueRef arg1 ;
  unsigned int result;
  
  arg1 = (LLVMValueRef)jarg1; 
  result = (unsigned int)LLVMGetIntrinsicID(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_CSLLVM_GetFunctionCallConv(void * jarg1) {
  unsigned int jresult ;
  LLVMValueRef arg1 ;
  unsigned int result;
  
  arg1 = (LLVMValueRef)jarg1; 
  result = (unsigned int)LLVMGetFunctionCallConv(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CSLLVM_SetFunctionCallConv(void * jarg1, unsigned int jarg2) {
  LLVMValueRef arg1 ;
  unsigned int arg2 ;
  
  arg1 = (LLVMValueRef)jarg1; 
  arg2 = (unsigned int)jarg2; 
  LLVMSetFunctionCallConv(arg1,arg2);
}


SWIGEXPORT char * SWIGSTDCALL CSharp_CSLLVM_GetGC(void * jarg1) {
  char * jresult ;
  LLVMValueRef arg1 ;
  char *result = 0 ;
  
  arg1 = (LLVMValueRef)jarg1; 
  result = (char *)LLVMGetGC(arg1);
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CSLLVM_SetGC(void * jarg1, char * jarg2) {
  LLVMValueRef arg1 ;
  char *arg2 = (char *) 0 ;
  
  arg1 = (LLVMValueRef)jarg1; 
  arg2 = (char *)jarg2; 
  LLVMSetGC(arg1,(char const *)arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_CSLLVM_AddFunctionAttr(void * jarg1, int jarg2) {
  LLVMValueRef arg1 ;
  LLVMAttribute arg2 ;
  
  arg1 = (LLVMValueRef)jarg1; 
  arg2 = (LLVMAttribute)jarg2; 
  LLVMAddFunctionAttr(arg1,arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_CSLLVM_AddTargetDependentFunctionAttr(void * jarg1, char * jarg2, char * jarg3) {
  LLVMValueRef arg1 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  
  arg1 = (LLVMValueRef)jarg1; 
  arg2 = (char *)jarg2; 
  arg3 = (char *)jarg3; 
  LLVMAddTargetDependentFunctionAttr(arg1,(char const *)arg2,(char const *)arg3);
}


SWIGEXPORT int SWIGSTDCALL CSharp_CSLLVM_GetFunctionAttr(void * jarg1) {
  int jresult ;
  LLVMValueRef arg1 ;
  LLVMAttribute result;
  
  arg1 = (LLVMValueRef)jarg1; 
  result = (LLVMAttribute)LLVMGetFunctionAttr(arg1);
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CSLLVM_RemoveFunctionAttr(void * jarg1, int jarg2) {
  LLVMValueRef arg1 ;
  LLVMAttribute arg2 ;
  
  arg1 = (LLVMValueRef)jarg1; 
  arg2 = (LLVMAttribute)jarg2; 
  LLVMRemoveFunctionAttr(arg1,arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_CSLLVM_CountParams(void * jarg1) {
  unsigned int jresult ;
  LLVMValueRef arg1 ;
  unsigned int result;
  
  arg1 = (LLVMValueRef)jarg1; 
  result = (unsigned int)LLVMCountParams(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CSLLVM_GetParams(void * jarg1, void * jarg2) {
  LLVMValueRef arg1 ;
  LLVMValueRef *arg2 = (LLVMValueRef *) 0 ;
  
  arg1 = (LLVMValueRef)jarg1; 
  arg2 = (LLVMValueRef *)jarg2; 
  LLVMGetParams(arg1,arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CSLLVM_GetParam(void * jarg1, unsigned int jarg2) {
  void * jresult ;
  LLVMValueRef arg1 ;
  unsigned int arg2 ;
  LLVMValueRef result;
  
  arg1 = (LLVMValueRef)jarg1; 
  arg2 = (unsigned int)jarg2; 
  result = LLVMGetParam(arg1,arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CSLLVM_GetParamParent(void * jarg1) {
  void * jresult ;
  LLVMValueRef arg1 ;
  LLVMValueRef result;
  
  arg1 = (LLVMValueRef)jarg1; 
  result = LLVMGetParamParent(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CSLLVM_GetFirstParam(void * jarg1) {
  void * jresult ;
  LLVMValueRef arg1 ;
  LLVMValueRef result;
  
  arg1 = (LLVMValueRef)jarg1; 
  result = LLVMGetFirstParam(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CSLLVM_GetLastParam(void * jarg1) {
  void * jresult ;
  LLVMValueRef arg1 ;
  LLVMValueRef result;
  
  arg1 = (LLVMValueRef)jarg1; 
  result = LLVMGetLastParam(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CSLLVM_GetNextParam(void * jarg1) {
  void * jresult ;
  LLVMValueRef arg1 ;
  LLVMValueRef result;
  
  arg1 = (LLVMValueRef)jarg1; 
  result = LLVMGetNextParam(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CSLLVM_GetPreviousParam(void * jarg1) {
  void * jresult ;
  LLVMValueRef arg1 ;
  LLVMValueRef result;
  
  arg1 = (LLVMValueRef)jarg1; 
  result = LLVMGetPreviousParam(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CSLLVM_AddAttribute(void * jarg1, int jarg2) {
  LLVMValueRef arg1 ;
  LLVMAttribute arg2 ;
  
  arg1 = (LLVMValueRef)jarg1; 
  arg2 = (LLVMAttribute)jarg2; 
  LLVMAddAttribute(arg1,arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_CSLLVM_RemoveAttribute(void * jarg1, int jarg2) {
  LLVMValueRef arg1 ;
  LLVMAttribute arg2 ;
  
  arg1 = (LLVMValueRef)jarg1; 
  arg2 = (LLVMAttribute)jarg2; 
  LLVMRemoveAttribute(arg1,arg2);
}


SWIGEXPORT int SWIGSTDCALL CSharp_CSLLVM_GetAttribute(void * jarg1) {
  int jresult ;
  LLVMValueRef arg1 ;
  LLVMAttribute result;
  
  arg1 = (LLVMValueRef)jarg1; 
  result = (LLVMAttribute)LLVMGetAttribute(arg1);
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CSLLVM_SetParamAlignment(void * jarg1, unsigned int jarg2) {
  LLVMValueRef arg1 ;
  unsigned int arg2 ;
  
  arg1 = (LLVMValueRef)jarg1; 
  arg2 = (unsigned int)jarg2; 
  LLVMSetParamAlignment(arg1,arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CSLLVM_MDStringInContext(void * jarg1, char * jarg2, unsigned int jarg3) {
  void * jresult ;
  LLVMContextRef arg1 ;
  char *arg2 = (char *) 0 ;
  unsigned int arg3 ;
  LLVMValueRef result;
  
  arg1 = (LLVMContextRef)jarg1; 
  arg2 = (char *)jarg2; 
  arg3 = (unsigned int)jarg3; 
  result = LLVMMDStringInContext(arg1,(char const *)arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CSLLVM_MDString(char * jarg1, unsigned int jarg2) {
  void * jresult ;
  char *arg1 = (char *) 0 ;
  unsigned int arg2 ;
  LLVMValueRef result;
  
  arg1 = (char *)jarg1; 
  arg2 = (unsigned int)jarg2; 
  result = LLVMMDString((char const *)arg1,arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CSLLVM_MDNodeInContext(void * jarg1, void* arg2_data, unsigned int jarg2) {
  void * jresult ;
  LLVMContextRef arg1 ;
  LLVMValueRef *arg2 = (LLVMValueRef *) 0 ;
  unsigned int arg3 ;
  LLVMValueRef result;
  
  arg1 = (LLVMContextRef)jarg1; 
  arg2 = (LLVMValueRef*)arg2_data; arg3 = jarg2;
  result = LLVMMDNodeInContext(arg1,arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CSLLVM_MDNode(void* arg1_data, unsigned int jarg1) {
  void * jresult ;
  LLVMValueRef *arg1 = (LLVMValueRef *) 0 ;
  unsigned int arg2 ;
  LLVMValueRef result;
  
  arg1 = (LLVMValueRef*)arg1_data; arg2 = jarg1;
  result = LLVMMDNode(arg1,arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_CSLLVM_GetMDString(void * jarg1, void * jarg2) {
  char * jresult ;
  LLVMValueRef arg1 ;
  unsigned int *arg2 = (unsigned int *) 0 ;
  char *result = 0 ;
  
  arg1 = (LLVMValueRef)jarg1; 
  arg2 = (unsigned int *)jarg2; 
  result = (char *)LLVMGetMDString(arg1,arg2);
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_CSLLVM_GetMDNodeNumOperands(void * jarg1) {
  unsigned int jresult ;
  LLVMValueRef arg1 ;
  unsigned int result;
  
  arg1 = (LLVMValueRef)jarg1; 
  result = (unsigned int)LLVMGetMDNodeNumOperands(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CSLLVM_GetMDNodeOperands(void * jarg1, void * jarg2) {
  LLVMValueRef arg1 ;
  LLVMValueRef *arg2 = (LLVMValueRef *) 0 ;
  
  arg1 = (LLVMValueRef)jarg1; 
  arg2 = (LLVMValueRef *)jarg2; 
  LLVMGetMDNodeOperands(arg1,arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CSLLVM_BasicBlockAsValue(void * jarg1) {
  void * jresult ;
  LLVMBasicBlockRef arg1 ;
  LLVMValueRef result;
  
  arg1 = (LLVMBasicBlockRef)jarg1; 
  result = LLVMBasicBlockAsValue(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_CSLLVM_ValueIsBasicBlock(void * jarg1) {
  unsigned int jresult ;
  LLVMValueRef arg1 ;
  LLVMBool result;
  
  arg1 = (LLVMValueRef)jarg1; 
  result = (LLVMBool)LLVMValueIsBasicBlock(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CSLLVM_ValueAsBasicBlock(void * jarg1) {
  void * jresult ;
  LLVMValueRef arg1 ;
  LLVMBasicBlockRef result;
  
  arg1 = (LLVMValueRef)jarg1; 
  result = LLVMValueAsBasicBlock(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_CSLLVM_GetBasicBlockName(void * jarg1) {
  char * jresult ;
  LLVMBasicBlockRef arg1 ;
  char *result = 0 ;
  
  arg1 = (LLVMBasicBlockRef)jarg1; 
  result = (char *)LLVMGetBasicBlockName(arg1);
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CSLLVM_GetBasicBlockParent(void * jarg1) {
  void * jresult ;
  LLVMBasicBlockRef arg1 ;
  LLVMValueRef result;
  
  arg1 = (LLVMBasicBlockRef)jarg1; 
  result = LLVMGetBasicBlockParent(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CSLLVM_GetBasicBlockTerminator(void * jarg1) {
  void * jresult ;
  LLVMBasicBlockRef arg1 ;
  LLVMValueRef result;
  
  arg1 = (LLVMBasicBlockRef)jarg1; 
  result = LLVMGetBasicBlockTerminator(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_CSLLVM_CountBasicBlocks(void * jarg1) {
  unsigned int jresult ;
  LLVMValueRef arg1 ;
  unsigned int result;
  
  arg1 = (LLVMValueRef)jarg1; 
  result = (unsigned int)LLVMCountBasicBlocks(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CSLLVM_GetBasicBlocks(void * jarg1, void * jarg2) {
  LLVMValueRef arg1 ;
  LLVMBasicBlockRef *arg2 = (LLVMBasicBlockRef *) 0 ;
  
  arg1 = (LLVMValueRef)jarg1; 
  arg2 = (LLVMBasicBlockRef *)jarg2; 
  LLVMGetBasicBlocks(arg1,arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CSLLVM_GetFirstBasicBlock(void * jarg1) {
  void * jresult ;
  LLVMValueRef arg1 ;
  LLVMBasicBlockRef result;
  
  arg1 = (LLVMValueRef)jarg1; 
  result = LLVMGetFirstBasicBlock(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CSLLVM_GetLastBasicBlock(void * jarg1) {
  void * jresult ;
  LLVMValueRef arg1 ;
  LLVMBasicBlockRef result;
  
  arg1 = (LLVMValueRef)jarg1; 
  result = LLVMGetLastBasicBlock(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CSLLVM_GetNextBasicBlock(void * jarg1) {
  void * jresult ;
  LLVMBasicBlockRef arg1 ;
  LLVMBasicBlockRef result;
  
  arg1 = (LLVMBasicBlockRef)jarg1; 
  result = LLVMGetNextBasicBlock(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CSLLVM_GetPreviousBasicBlock(void * jarg1) {
  void * jresult ;
  LLVMBasicBlockRef arg1 ;
  LLVMBasicBlockRef result;
  
  arg1 = (LLVMBasicBlockRef)jarg1; 
  result = LLVMGetPreviousBasicBlock(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CSLLVM_GetEntryBasicBlock(void * jarg1) {
  void * jresult ;
  LLVMValueRef arg1 ;
  LLVMBasicBlockRef result;
  
  arg1 = (LLVMValueRef)jarg1; 
  result = LLVMGetEntryBasicBlock(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CSLLVM_AppendBasicBlockInContext(void * jarg1, void * jarg2, char * jarg3) {
  void * jresult ;
  LLVMContextRef arg1 ;
  LLVMValueRef arg2 ;
  char *arg3 = (char *) 0 ;
  LLVMBasicBlockRef result;
  
  arg1 = (LLVMContextRef)jarg1; 
  arg2 = (LLVMValueRef)jarg2; 
  arg3 = (char *)jarg3; 
  result = LLVMAppendBasicBlockInContext(arg1,arg2,(char const *)arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CSLLVM_AppendBasicBlock(void * jarg1, char * jarg2) {
  void * jresult ;
  LLVMValueRef arg1 ;
  char *arg2 = (char *) 0 ;
  LLVMBasicBlockRef result;
  
  arg1 = (LLVMValueRef)jarg1; 
  arg2 = (char *)jarg2; 
  result = LLVMAppendBasicBlock(arg1,(char const *)arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CSLLVM_InsertBasicBlockInContext(void * jarg1, void * jarg2, char * jarg3) {
  void * jresult ;
  LLVMContextRef arg1 ;
  LLVMBasicBlockRef arg2 ;
  char *arg3 = (char *) 0 ;
  LLVMBasicBlockRef result;
  
  arg1 = (LLVMContextRef)jarg1; 
  arg2 = (LLVMBasicBlockRef)jarg2; 
  arg3 = (char *)jarg3; 
  result = LLVMInsertBasicBlockInContext(arg1,arg2,(char const *)arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CSLLVM_InsertBasicBlock(void * jarg1, char * jarg2) {
  void * jresult ;
  LLVMBasicBlockRef arg1 ;
  char *arg2 = (char *) 0 ;
  LLVMBasicBlockRef result;
  
  arg1 = (LLVMBasicBlockRef)jarg1; 
  arg2 = (char *)jarg2; 
  result = LLVMInsertBasicBlock(arg1,(char const *)arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CSLLVM_DeleteBasicBlock(void * jarg1) {
  LLVMBasicBlockRef arg1 ;
  
  arg1 = (LLVMBasicBlockRef)jarg1; 
  LLVMDeleteBasicBlock(arg1);
}


SWIGEXPORT void SWIGSTDCALL CSharp_CSLLVM_RemoveBasicBlockFromParent(void * jarg1) {
  LLVMBasicBlockRef arg1 ;
  
  arg1 = (LLVMBasicBlockRef)jarg1; 
  LLVMRemoveBasicBlockFromParent(arg1);
}


SWIGEXPORT void SWIGSTDCALL CSharp_CSLLVM_MoveBasicBlockBefore(void * jarg1, void * jarg2) {
  LLVMBasicBlockRef arg1 ;
  LLVMBasicBlockRef arg2 ;
  
  arg1 = (LLVMBasicBlockRef)jarg1; 
  arg2 = (LLVMBasicBlockRef)jarg2; 
  LLVMMoveBasicBlockBefore(arg1,arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_CSLLVM_MoveBasicBlockAfter(void * jarg1, void * jarg2) {
  LLVMBasicBlockRef arg1 ;
  LLVMBasicBlockRef arg2 ;
  
  arg1 = (LLVMBasicBlockRef)jarg1; 
  arg2 = (LLVMBasicBlockRef)jarg2; 
  LLVMMoveBasicBlockAfter(arg1,arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CSLLVM_GetFirstInstruction(void * jarg1) {
  void * jresult ;
  LLVMBasicBlockRef arg1 ;
  LLVMValueRef result;
  
  arg1 = (LLVMBasicBlockRef)jarg1; 
  result = LLVMGetFirstInstruction(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CSLLVM_GetLastInstruction(void * jarg1) {
  void * jresult ;
  LLVMBasicBlockRef arg1 ;
  LLVMValueRef result;
  
  arg1 = (LLVMBasicBlockRef)jarg1; 
  result = LLVMGetLastInstruction(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_CSLLVM_HasMetadata(void * jarg1) {
  int jresult ;
  LLVMValueRef arg1 ;
  int result;
  
  arg1 = (LLVMValueRef)jarg1; 
  result = (int)LLVMHasMetadata(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CSLLVM_GetMetadata(void * jarg1, unsigned int jarg2) {
  void * jresult ;
  LLVMValueRef arg1 ;
  unsigned int arg2 ;
  LLVMValueRef result;
  
  arg1 = (LLVMValueRef)jarg1; 
  arg2 = (unsigned int)jarg2; 
  result = LLVMGetMetadata(arg1,arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CSLLVM_SetMetadata(void * jarg1, unsigned int jarg2, void * jarg3) {
  LLVMValueRef arg1 ;
  unsigned int arg2 ;
  LLVMValueRef arg3 ;
  
  arg1 = (LLVMValueRef)jarg1; 
  arg2 = (unsigned int)jarg2; 
  arg3 = (LLVMValueRef)jarg3; 
  LLVMSetMetadata(arg1,arg2,arg3);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CSLLVM_GetInstructionParent(void * jarg1) {
  void * jresult ;
  LLVMValueRef arg1 ;
  LLVMBasicBlockRef result;
  
  arg1 = (LLVMValueRef)jarg1; 
  result = LLVMGetInstructionParent(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CSLLVM_GetNextInstruction(void * jarg1) {
  void * jresult ;
  LLVMValueRef arg1 ;
  LLVMValueRef result;
  
  arg1 = (LLVMValueRef)jarg1; 
  result = LLVMGetNextInstruction(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CSLLVM_GetPreviousInstruction(void * jarg1) {
  void * jresult ;
  LLVMValueRef arg1 ;
  LLVMValueRef result;
  
  arg1 = (LLVMValueRef)jarg1; 
  result = LLVMGetPreviousInstruction(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CSLLVM_InstructionRemoveFromParent(void * jarg1) {
  LLVMValueRef arg1 ;
  
  arg1 = (LLVMValueRef)jarg1; 
  LLVMInstructionRemoveFromParent(arg1);
}


SWIGEXPORT void SWIGSTDCALL CSharp_CSLLVM_InstructionEraseFromParent(void * jarg1) {
  LLVMValueRef arg1 ;
  
  arg1 = (LLVMValueRef)jarg1; 
  LLVMInstructionEraseFromParent(arg1);
}


SWIGEXPORT int SWIGSTDCALL CSharp_CSLLVM_GetInstructionOpcode(void * jarg1) {
  int jresult ;
  LLVMValueRef arg1 ;
  LLVMOpcode result;
  
  arg1 = (LLVMValueRef)jarg1; 
  result = (LLVMOpcode)LLVMGetInstructionOpcode(arg1);
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_CSLLVM_GetICmpPredicate(void * jarg1) {
  int jresult ;
  LLVMValueRef arg1 ;
  LLVMIntPredicate result;
  
  arg1 = (LLVMValueRef)jarg1; 
  result = (LLVMIntPredicate)LLVMGetICmpPredicate(arg1);
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_CSLLVM_GetFCmpPredicate(void * jarg1) {
  int jresult ;
  LLVMValueRef arg1 ;
  LLVMRealPredicate result;
  
  arg1 = (LLVMValueRef)jarg1; 
  result = (LLVMRealPredicate)LLVMGetFCmpPredicate(arg1);
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CSLLVM_InstructionClone(void * jarg1) {
  void * jresult ;
  LLVMValueRef arg1 ;
  LLVMValueRef result;
  
  arg1 = (LLVMValueRef)jarg1; 
  result = LLVMInstructionClone(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_CSLLVM_GetNumArgOperands(void * jarg1) {
  unsigned int jresult ;
  LLVMValueRef arg1 ;
  unsigned int result;
  
  arg1 = (LLVMValueRef)jarg1; 
  result = (unsigned int)LLVMGetNumArgOperands(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CSLLVM_SetInstructionCallConv(void * jarg1, unsigned int jarg2) {
  LLVMValueRef arg1 ;
  unsigned int arg2 ;
  
  arg1 = (LLVMValueRef)jarg1; 
  arg2 = (unsigned int)jarg2; 
  LLVMSetInstructionCallConv(arg1,arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_CSLLVM_GetInstructionCallConv(void * jarg1) {
  unsigned int jresult ;
  LLVMValueRef arg1 ;
  unsigned int result;
  
  arg1 = (LLVMValueRef)jarg1; 
  result = (unsigned int)LLVMGetInstructionCallConv(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CSLLVM_AddInstrAttribute(void * jarg1, unsigned int jarg2, int jarg3) {
  LLVMValueRef arg1 ;
  unsigned int arg2 ;
  LLVMAttribute arg3 ;
  
  arg1 = (LLVMValueRef)jarg1; 
  arg2 = (unsigned int)jarg2; 
  arg3 = (LLVMAttribute)jarg3; 
  LLVMAddInstrAttribute(arg1,arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_CSLLVM_RemoveInstrAttribute(void * jarg1, unsigned int jarg2, int jarg3) {
  LLVMValueRef arg1 ;
  unsigned int arg2 ;
  LLVMAttribute arg3 ;
  
  arg1 = (LLVMValueRef)jarg1; 
  arg2 = (unsigned int)jarg2; 
  arg3 = (LLVMAttribute)jarg3; 
  LLVMRemoveInstrAttribute(arg1,arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_CSLLVM_SetInstrParamAlignment(void * jarg1, unsigned int jarg2, unsigned int jarg3) {
  LLVMValueRef arg1 ;
  unsigned int arg2 ;
  unsigned int arg3 ;
  
  arg1 = (LLVMValueRef)jarg1; 
  arg2 = (unsigned int)jarg2; 
  arg3 = (unsigned int)jarg3; 
  LLVMSetInstrParamAlignment(arg1,arg2,arg3);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CSLLVM_GetCalledValue(void * jarg1) {
  void * jresult ;
  LLVMValueRef arg1 ;
  LLVMValueRef result;
  
  arg1 = (LLVMValueRef)jarg1; 
  result = LLVMGetCalledValue(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_CSLLVM_IsTailCall(void * jarg1) {
  unsigned int jresult ;
  LLVMValueRef arg1 ;
  LLVMBool result;
  
  arg1 = (LLVMValueRef)jarg1; 
  result = (LLVMBool)LLVMIsTailCall(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CSLLVM_SetTailCall(void * jarg1, unsigned int jarg2) {
  LLVMValueRef arg1 ;
  LLVMBool arg2 ;
  
  arg1 = (LLVMValueRef)jarg1; 
  arg2 = jarg2 ? true : false; 
  LLVMSetTailCall(arg1,arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CSLLVM_GetNormalDest(void * jarg1) {
  void * jresult ;
  LLVMValueRef arg1 ;
  LLVMBasicBlockRef result;
  
  arg1 = (LLVMValueRef)jarg1; 
  result = LLVMGetNormalDest(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CSLLVM_GetUnwindDest(void * jarg1) {
  void * jresult ;
  LLVMValueRef arg1 ;
  LLVMBasicBlockRef result;
  
  arg1 = (LLVMValueRef)jarg1; 
  result = LLVMGetUnwindDest(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CSLLVM_SetNormalDest(void * jarg1, void * jarg2) {
  LLVMValueRef arg1 ;
  LLVMBasicBlockRef arg2 ;
  
  arg1 = (LLVMValueRef)jarg1; 
  arg2 = (LLVMBasicBlockRef)jarg2; 
  LLVMSetNormalDest(arg1,arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_CSLLVM_SetUnwindDest(void * jarg1, void * jarg2) {
  LLVMValueRef arg1 ;
  LLVMBasicBlockRef arg2 ;
  
  arg1 = (LLVMValueRef)jarg1; 
  arg2 = (LLVMBasicBlockRef)jarg2; 
  LLVMSetUnwindDest(arg1,arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_CSLLVM_GetNumSuccessors(void * jarg1) {
  unsigned int jresult ;
  LLVMValueRef arg1 ;
  unsigned int result;
  
  arg1 = (LLVMValueRef)jarg1; 
  result = (unsigned int)LLVMGetNumSuccessors(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CSLLVM_GetSuccessor(void * jarg1, unsigned int jarg2) {
  void * jresult ;
  LLVMValueRef arg1 ;
  unsigned int arg2 ;
  LLVMBasicBlockRef result;
  
  arg1 = (LLVMValueRef)jarg1; 
  arg2 = (unsigned int)jarg2; 
  result = LLVMGetSuccessor(arg1,arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CSLLVM_SetSuccessor(void * jarg1, unsigned int jarg2, void * jarg3) {
  LLVMValueRef arg1 ;
  unsigned int arg2 ;
  LLVMBasicBlockRef arg3 ;
  
  arg1 = (LLVMValueRef)jarg1; 
  arg2 = (unsigned int)jarg2; 
  arg3 = (LLVMBasicBlockRef)jarg3; 
  LLVMSetSuccessor(arg1,arg2,arg3);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_CSLLVM_IsConditional(void * jarg1) {
  unsigned int jresult ;
  LLVMValueRef arg1 ;
  LLVMBool result;
  
  arg1 = (LLVMValueRef)jarg1; 
  result = (LLVMBool)LLVMIsConditional(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CSLLVM_GetCondition(void * jarg1) {
  void * jresult ;
  LLVMValueRef arg1 ;
  LLVMValueRef result;
  
  arg1 = (LLVMValueRef)jarg1; 
  result = LLVMGetCondition(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CSLLVM_SetCondition(void * jarg1, void * jarg2) {
  LLVMValueRef arg1 ;
  LLVMValueRef arg2 ;
  
  arg1 = (LLVMValueRef)jarg1; 
  arg2 = (LLVMValueRef)jarg2; 
  LLVMSetCondition(arg1,arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CSLLVM_GetSwitchDefaultDest(void * jarg1) {
  void * jresult ;
  LLVMValueRef arg1 ;
  LLVMBasicBlockRef result;
  
  arg1 = (LLVMValueRef)jarg1; 
  result = LLVMGetSwitchDefaultDest(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CSLLVM_GetAllocatedType(void * jarg1) {
  void * jresult ;
  LLVMValueRef arg1 ;
  LLVMTypeRef result;
  
  arg1 = (LLVMValueRef)jarg1; 
  result = LLVMGetAllocatedType(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_CSLLVM_IsInBounds(void * jarg1) {
  unsigned int jresult ;
  LLVMValueRef arg1 ;
  LLVMBool result;
  
  arg1 = (LLVMValueRef)jarg1; 
  result = (LLVMBool)LLVMIsInBounds(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CSLLVM_SetIsInBounds(void * jarg1, unsigned int jarg2) {
  LLVMValueRef arg1 ;
  LLVMBool arg2 ;
  
  arg1 = (LLVMValueRef)jarg1; 
  arg2 = jarg2 ? true : false; 
  LLVMSetIsInBounds(arg1,arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_CSLLVM_AddIncoming(void * jarg1, void * jarg2, void* arg3_data, unsigned int jarg3) {
  LLVMValueRef arg1 ;
  LLVMValueRef *arg2 = (LLVMValueRef *) 0 ;
  LLVMBasicBlockRef *arg3 = (LLVMBasicBlockRef *) 0 ;
  unsigned int arg4 ;
  
  arg1 = (LLVMValueRef)jarg1; 
  arg2 = (LLVMValueRef *)jarg2; 
  arg3 = (LLVMBasicBlockRef*)arg3_data; arg4 = jarg3;
  LLVMAddIncoming(arg1,arg2,arg3,arg4);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_CSLLVM_CountIncoming(void * jarg1) {
  unsigned int jresult ;
  LLVMValueRef arg1 ;
  unsigned int result;
  
  arg1 = (LLVMValueRef)jarg1; 
  result = (unsigned int)LLVMCountIncoming(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CSLLVM_GetIncomingValue(void * jarg1, unsigned int jarg2) {
  void * jresult ;
  LLVMValueRef arg1 ;
  unsigned int arg2 ;
  LLVMValueRef result;
  
  arg1 = (LLVMValueRef)jarg1; 
  arg2 = (unsigned int)jarg2; 
  result = LLVMGetIncomingValue(arg1,arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CSLLVM_GetIncomingBlock(void * jarg1, unsigned int jarg2) {
  void * jresult ;
  LLVMValueRef arg1 ;
  unsigned int arg2 ;
  LLVMBasicBlockRef result;
  
  arg1 = (LLVMValueRef)jarg1; 
  arg2 = (unsigned int)jarg2; 
  result = LLVMGetIncomingBlock(arg1,arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_CSLLVM_GetNumIndices(void * jarg1) {
  unsigned int jresult ;
  LLVMValueRef arg1 ;
  unsigned int result;
  
  arg1 = (LLVMValueRef)jarg1; 
  result = (unsigned int)LLVMGetNumIndices(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CSLLVM_GetIndices(void * jarg1) {
  void * jresult ;
  LLVMValueRef arg1 ;
  unsigned int *result = 0 ;
  
  arg1 = (LLVMValueRef)jarg1; 
  result = (unsigned int *)LLVMGetIndices(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CSLLVM_CreateBuilderInContext(void * jarg1) {
  void * jresult ;
  LLVMContextRef arg1 ;
  LLVMBuilderRef result;
  
  arg1 = (LLVMContextRef)jarg1; 
  result = LLVMCreateBuilderInContext(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CSLLVM_CreateBuilder() {
  void * jresult ;
  LLVMBuilderRef result;
  
  result = LLVMCreateBuilder();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CSLLVM_PositionBuilder(void * jarg1, void * jarg2, void * jarg3) {
  LLVMBuilderRef arg1 ;
  LLVMBasicBlockRef arg2 ;
  LLVMValueRef arg3 ;
  
  arg1 = (LLVMBuilderRef)jarg1; 
  arg2 = (LLVMBasicBlockRef)jarg2; 
  arg3 = (LLVMValueRef)jarg3; 
  LLVMPositionBuilder(arg1,arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_CSLLVM_PositionBuilderBefore(void * jarg1, void * jarg2) {
  LLVMBuilderRef arg1 ;
  LLVMValueRef arg2 ;
  
  arg1 = (LLVMBuilderRef)jarg1; 
  arg2 = (LLVMValueRef)jarg2; 
  LLVMPositionBuilderBefore(arg1,arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_CSLLVM_PositionBuilderAtEnd(void * jarg1, void * jarg2) {
  LLVMBuilderRef arg1 ;
  LLVMBasicBlockRef arg2 ;
  
  arg1 = (LLVMBuilderRef)jarg1; 
  arg2 = (LLVMBasicBlockRef)jarg2; 
  LLVMPositionBuilderAtEnd(arg1,arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CSLLVM_GetInsertBlock(void * jarg1) {
  void * jresult ;
  LLVMBuilderRef arg1 ;
  LLVMBasicBlockRef result;
  
  arg1 = (LLVMBuilderRef)jarg1; 
  result = LLVMGetInsertBlock(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CSLLVM_ClearInsertionPosition(void * jarg1) {
  LLVMBuilderRef arg1 ;
  
  arg1 = (LLVMBuilderRef)jarg1; 
  LLVMClearInsertionPosition(arg1);
}


SWIGEXPORT void SWIGSTDCALL CSharp_CSLLVM_InsertIntoBuilder(void * jarg1, void * jarg2) {
  LLVMBuilderRef arg1 ;
  LLVMValueRef arg2 ;
  
  arg1 = (LLVMBuilderRef)jarg1; 
  arg2 = (LLVMValueRef)jarg2; 
  LLVMInsertIntoBuilder(arg1,arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_CSLLVM_InsertIntoBuilderWithName(void * jarg1, void * jarg2, char * jarg3) {
  LLVMBuilderRef arg1 ;
  LLVMValueRef arg2 ;
  char *arg3 = (char *) 0 ;
  
  arg1 = (LLVMBuilderRef)jarg1; 
  arg2 = (LLVMValueRef)jarg2; 
  arg3 = (char *)jarg3; 
  LLVMInsertIntoBuilderWithName(arg1,arg2,(char const *)arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_CSLLVM_DisposeBuilder(void * jarg1) {
  LLVMBuilderRef arg1 ;
  
  arg1 = (LLVMBuilderRef)jarg1; 
  LLVMDisposeBuilder(arg1);
}


SWIGEXPORT void SWIGSTDCALL CSharp_CSLLVM_SetCurrentDebugLocation(void * jarg1, void * jarg2) {
  LLVMBuilderRef arg1 ;
  LLVMValueRef arg2 ;
  
  arg1 = (LLVMBuilderRef)jarg1; 
  arg2 = (LLVMValueRef)jarg2; 
  LLVMSetCurrentDebugLocation(arg1,arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CSLLVM_GetCurrentDebugLocation(void * jarg1) {
  void * jresult ;
  LLVMBuilderRef arg1 ;
  LLVMValueRef result;
  
  arg1 = (LLVMBuilderRef)jarg1; 
  result = LLVMGetCurrentDebugLocation(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CSLLVM_SetInstDebugLocation(void * jarg1, void * jarg2) {
  LLVMBuilderRef arg1 ;
  LLVMValueRef arg2 ;
  
  arg1 = (LLVMBuilderRef)jarg1; 
  arg2 = (LLVMValueRef)jarg2; 
  LLVMSetInstDebugLocation(arg1,arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CSLLVM_BuildRetVoid(void * jarg1) {
  void * jresult ;
  LLVMBuilderRef arg1 ;
  LLVMValueRef result;
  
  arg1 = (LLVMBuilderRef)jarg1; 
  result = LLVMBuildRetVoid(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CSLLVM_BuildRet(void * jarg1, void * jarg2) {
  void * jresult ;
  LLVMBuilderRef arg1 ;
  LLVMValueRef arg2 ;
  LLVMValueRef result;
  
  arg1 = (LLVMBuilderRef)jarg1; 
  arg2 = (LLVMValueRef)jarg2; 
  result = LLVMBuildRet(arg1,arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CSLLVM_BuildAggregateRet(void * jarg1, void* arg2_data, unsigned int jarg2) {
  void * jresult ;
  LLVMBuilderRef arg1 ;
  LLVMValueRef *arg2 = (LLVMValueRef *) 0 ;
  unsigned int arg3 ;
  LLVMValueRef result;
  
  arg1 = (LLVMBuilderRef)jarg1; 
  arg2 = (LLVMValueRef*)arg2_data; arg3 = jarg2;
  result = LLVMBuildAggregateRet(arg1,arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CSLLVM_BuildBr(void * jarg1, void * jarg2) {
  void * jresult ;
  LLVMBuilderRef arg1 ;
  LLVMBasicBlockRef arg2 ;
  LLVMValueRef result;
  
  arg1 = (LLVMBuilderRef)jarg1; 
  arg2 = (LLVMBasicBlockRef)jarg2; 
  result = LLVMBuildBr(arg1,arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CSLLVM_BuildCondBr(void * jarg1, void * jarg2, void * jarg3, void * jarg4) {
  void * jresult ;
  LLVMBuilderRef arg1 ;
  LLVMValueRef arg2 ;
  LLVMBasicBlockRef arg3 ;
  LLVMBasicBlockRef arg4 ;
  LLVMValueRef result;
  
  arg1 = (LLVMBuilderRef)jarg1; 
  arg2 = (LLVMValueRef)jarg2; 
  arg3 = (LLVMBasicBlockRef)jarg3; 
  arg4 = (LLVMBasicBlockRef)jarg4; 
  result = LLVMBuildCondBr(arg1,arg2,arg3,arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CSLLVM_BuildSwitch(void * jarg1, void * jarg2, void * jarg3, unsigned int jarg4) {
  void * jresult ;
  LLVMBuilderRef arg1 ;
  LLVMValueRef arg2 ;
  LLVMBasicBlockRef arg3 ;
  unsigned int arg4 ;
  LLVMValueRef result;
  
  arg1 = (LLVMBuilderRef)jarg1; 
  arg2 = (LLVMValueRef)jarg2; 
  arg3 = (LLVMBasicBlockRef)jarg3; 
  arg4 = (unsigned int)jarg4; 
  result = LLVMBuildSwitch(arg1,arg2,arg3,arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CSLLVM_BuildIndirectBr(void * jarg1, void * jarg2, unsigned int jarg3) {
  void * jresult ;
  LLVMBuilderRef arg1 ;
  LLVMValueRef arg2 ;
  unsigned int arg3 ;
  LLVMValueRef result;
  
  arg1 = (LLVMBuilderRef)jarg1; 
  arg2 = (LLVMValueRef)jarg2; 
  arg3 = (unsigned int)jarg3; 
  result = LLVMBuildIndirectBr(arg1,arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CSLLVM_BuildInvoke(void * jarg1, void * jarg2, void* arg3_data, unsigned int jarg3, void * jarg5, void * jarg6, char * jarg7) {
  void * jresult ;
  LLVMBuilderRef arg1 ;
  LLVMValueRef arg2 ;
  LLVMValueRef *arg3 = (LLVMValueRef *) 0 ;
  unsigned int arg4 ;
  LLVMBasicBlockRef arg5 ;
  LLVMBasicBlockRef arg6 ;
  char *arg7 = (char *) 0 ;
  LLVMValueRef result;
  
  arg1 = (LLVMBuilderRef)jarg1; 
  arg2 = (LLVMValueRef)jarg2; 
  arg3 = (LLVMValueRef*)arg3_data; arg4 = jarg3;
  arg5 = (LLVMBasicBlockRef)jarg5; 
  arg6 = (LLVMBasicBlockRef)jarg6; 
  arg7 = (char *)jarg7; 
  result = LLVMBuildInvoke(arg1,arg2,arg3,arg4,arg5,arg6,(char const *)arg7);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CSLLVM_BuildLandingPad(void * jarg1, void * jarg2, void * jarg3, unsigned int jarg4, char * jarg5) {
  void * jresult ;
  LLVMBuilderRef arg1 ;
  LLVMTypeRef arg2 ;
  LLVMValueRef arg3 ;
  unsigned int arg4 ;
  char *arg5 = (char *) 0 ;
  LLVMValueRef result;
  
  arg1 = (LLVMBuilderRef)jarg1; 
  arg2 = (LLVMTypeRef)jarg2; 
  arg3 = (LLVMValueRef)jarg3; 
  arg4 = (unsigned int)jarg4; 
  arg5 = (char *)jarg5; 
  result = LLVMBuildLandingPad(arg1,arg2,arg3,arg4,(char const *)arg5);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CSLLVM_BuildResume(void * jarg1, void * jarg2) {
  void * jresult ;
  LLVMBuilderRef arg1 ;
  LLVMValueRef arg2 ;
  LLVMValueRef result;
  
  arg1 = (LLVMBuilderRef)jarg1; 
  arg2 = (LLVMValueRef)jarg2; 
  result = LLVMBuildResume(arg1,arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CSLLVM_BuildUnreachable(void * jarg1) {
  void * jresult ;
  LLVMBuilderRef arg1 ;
  LLVMValueRef result;
  
  arg1 = (LLVMBuilderRef)jarg1; 
  result = LLVMBuildUnreachable(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CSLLVM_AddCase(void * jarg1, void * jarg2, void * jarg3) {
  LLVMValueRef arg1 ;
  LLVMValueRef arg2 ;
  LLVMBasicBlockRef arg3 ;
  
  arg1 = (LLVMValueRef)jarg1; 
  arg2 = (LLVMValueRef)jarg2; 
  arg3 = (LLVMBasicBlockRef)jarg3; 
  LLVMAddCase(arg1,arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_CSLLVM_AddDestination(void * jarg1, void * jarg2) {
  LLVMValueRef arg1 ;
  LLVMBasicBlockRef arg2 ;
  
  arg1 = (LLVMValueRef)jarg1; 
  arg2 = (LLVMBasicBlockRef)jarg2; 
  LLVMAddDestination(arg1,arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_CSLLVM_GetNumClauses(void * jarg1) {
  unsigned int jresult ;
  LLVMValueRef arg1 ;
  unsigned int result;
  
  arg1 = (LLVMValueRef)jarg1; 
  result = (unsigned int)LLVMGetNumClauses(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CSLLVM_GetClause(void * jarg1, unsigned int jarg2) {
  void * jresult ;
  LLVMValueRef arg1 ;
  unsigned int arg2 ;
  LLVMValueRef result;
  
  arg1 = (LLVMValueRef)jarg1; 
  arg2 = (unsigned int)jarg2; 
  result = LLVMGetClause(arg1,arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CSLLVM_AddClause(void * jarg1, void * jarg2) {
  LLVMValueRef arg1 ;
  LLVMValueRef arg2 ;
  
  arg1 = (LLVMValueRef)jarg1; 
  arg2 = (LLVMValueRef)jarg2; 
  LLVMAddClause(arg1,arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_CSLLVM_IsCleanup(void * jarg1) {
  unsigned int jresult ;
  LLVMValueRef arg1 ;
  LLVMBool result;
  
  arg1 = (LLVMValueRef)jarg1; 
  result = (LLVMBool)LLVMIsCleanup(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CSLLVM_SetCleanup(void * jarg1, unsigned int jarg2) {
  LLVMValueRef arg1 ;
  LLVMBool arg2 ;
  
  arg1 = (LLVMValueRef)jarg1; 
  arg2 = jarg2 ? true : false; 
  LLVMSetCleanup(arg1,arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CSLLVM_BuildAdd(void * jarg1, void * jarg2, void * jarg3, char * jarg4) {
  void * jresult ;
  LLVMBuilderRef arg1 ;
  LLVMValueRef arg2 ;
  LLVMValueRef arg3 ;
  char *arg4 = (char *) 0 ;
  LLVMValueRef result;
  
  arg1 = (LLVMBuilderRef)jarg1; 
  arg2 = (LLVMValueRef)jarg2; 
  arg3 = (LLVMValueRef)jarg3; 
  arg4 = (char *)jarg4; 
  result = LLVMBuildAdd(arg1,arg2,arg3,(char const *)arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CSLLVM_BuildNSWAdd(void * jarg1, void * jarg2, void * jarg3, char * jarg4) {
  void * jresult ;
  LLVMBuilderRef arg1 ;
  LLVMValueRef arg2 ;
  LLVMValueRef arg3 ;
  char *arg4 = (char *) 0 ;
  LLVMValueRef result;
  
  arg1 = (LLVMBuilderRef)jarg1; 
  arg2 = (LLVMValueRef)jarg2; 
  arg3 = (LLVMValueRef)jarg3; 
  arg4 = (char *)jarg4; 
  result = LLVMBuildNSWAdd(arg1,arg2,arg3,(char const *)arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CSLLVM_BuildNUWAdd(void * jarg1, void * jarg2, void * jarg3, char * jarg4) {
  void * jresult ;
  LLVMBuilderRef arg1 ;
  LLVMValueRef arg2 ;
  LLVMValueRef arg3 ;
  char *arg4 = (char *) 0 ;
  LLVMValueRef result;
  
  arg1 = (LLVMBuilderRef)jarg1; 
  arg2 = (LLVMValueRef)jarg2; 
  arg3 = (LLVMValueRef)jarg3; 
  arg4 = (char *)jarg4; 
  result = LLVMBuildNUWAdd(arg1,arg2,arg3,(char const *)arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CSLLVM_BuildFAdd(void * jarg1, void * jarg2, void * jarg3, char * jarg4) {
  void * jresult ;
  LLVMBuilderRef arg1 ;
  LLVMValueRef arg2 ;
  LLVMValueRef arg3 ;
  char *arg4 = (char *) 0 ;
  LLVMValueRef result;
  
  arg1 = (LLVMBuilderRef)jarg1; 
  arg2 = (LLVMValueRef)jarg2; 
  arg3 = (LLVMValueRef)jarg3; 
  arg4 = (char *)jarg4; 
  result = LLVMBuildFAdd(arg1,arg2,arg3,(char const *)arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CSLLVM_BuildSub(void * jarg1, void * jarg2, void * jarg3, char * jarg4) {
  void * jresult ;
  LLVMBuilderRef arg1 ;
  LLVMValueRef arg2 ;
  LLVMValueRef arg3 ;
  char *arg4 = (char *) 0 ;
  LLVMValueRef result;
  
  arg1 = (LLVMBuilderRef)jarg1; 
  arg2 = (LLVMValueRef)jarg2; 
  arg3 = (LLVMValueRef)jarg3; 
  arg4 = (char *)jarg4; 
  result = LLVMBuildSub(arg1,arg2,arg3,(char const *)arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CSLLVM_BuildNSWSub(void * jarg1, void * jarg2, void * jarg3, char * jarg4) {
  void * jresult ;
  LLVMBuilderRef arg1 ;
  LLVMValueRef arg2 ;
  LLVMValueRef arg3 ;
  char *arg4 = (char *) 0 ;
  LLVMValueRef result;
  
  arg1 = (LLVMBuilderRef)jarg1; 
  arg2 = (LLVMValueRef)jarg2; 
  arg3 = (LLVMValueRef)jarg3; 
  arg4 = (char *)jarg4; 
  result = LLVMBuildNSWSub(arg1,arg2,arg3,(char const *)arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CSLLVM_BuildNUWSub(void * jarg1, void * jarg2, void * jarg3, char * jarg4) {
  void * jresult ;
  LLVMBuilderRef arg1 ;
  LLVMValueRef arg2 ;
  LLVMValueRef arg3 ;
  char *arg4 = (char *) 0 ;
  LLVMValueRef result;
  
  arg1 = (LLVMBuilderRef)jarg1; 
  arg2 = (LLVMValueRef)jarg2; 
  arg3 = (LLVMValueRef)jarg3; 
  arg4 = (char *)jarg4; 
  result = LLVMBuildNUWSub(arg1,arg2,arg3,(char const *)arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CSLLVM_BuildFSub(void * jarg1, void * jarg2, void * jarg3, char * jarg4) {
  void * jresult ;
  LLVMBuilderRef arg1 ;
  LLVMValueRef arg2 ;
  LLVMValueRef arg3 ;
  char *arg4 = (char *) 0 ;
  LLVMValueRef result;
  
  arg1 = (LLVMBuilderRef)jarg1; 
  arg2 = (LLVMValueRef)jarg2; 
  arg3 = (LLVMValueRef)jarg3; 
  arg4 = (char *)jarg4; 
  result = LLVMBuildFSub(arg1,arg2,arg3,(char const *)arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CSLLVM_BuildMul(void * jarg1, void * jarg2, void * jarg3, char * jarg4) {
  void * jresult ;
  LLVMBuilderRef arg1 ;
  LLVMValueRef arg2 ;
  LLVMValueRef arg3 ;
  char *arg4 = (char *) 0 ;
  LLVMValueRef result;
  
  arg1 = (LLVMBuilderRef)jarg1; 
  arg2 = (LLVMValueRef)jarg2; 
  arg3 = (LLVMValueRef)jarg3; 
  arg4 = (char *)jarg4; 
  result = LLVMBuildMul(arg1,arg2,arg3,(char const *)arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CSLLVM_BuildNSWMul(void * jarg1, void * jarg2, void * jarg3, char * jarg4) {
  void * jresult ;
  LLVMBuilderRef arg1 ;
  LLVMValueRef arg2 ;
  LLVMValueRef arg3 ;
  char *arg4 = (char *) 0 ;
  LLVMValueRef result;
  
  arg1 = (LLVMBuilderRef)jarg1; 
  arg2 = (LLVMValueRef)jarg2; 
  arg3 = (LLVMValueRef)jarg3; 
  arg4 = (char *)jarg4; 
  result = LLVMBuildNSWMul(arg1,arg2,arg3,(char const *)arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CSLLVM_BuildNUWMul(void * jarg1, void * jarg2, void * jarg3, char * jarg4) {
  void * jresult ;
  LLVMBuilderRef arg1 ;
  LLVMValueRef arg2 ;
  LLVMValueRef arg3 ;
  char *arg4 = (char *) 0 ;
  LLVMValueRef result;
  
  arg1 = (LLVMBuilderRef)jarg1; 
  arg2 = (LLVMValueRef)jarg2; 
  arg3 = (LLVMValueRef)jarg3; 
  arg4 = (char *)jarg4; 
  result = LLVMBuildNUWMul(arg1,arg2,arg3,(char const *)arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CSLLVM_BuildFMul(void * jarg1, void * jarg2, void * jarg3, char * jarg4) {
  void * jresult ;
  LLVMBuilderRef arg1 ;
  LLVMValueRef arg2 ;
  LLVMValueRef arg3 ;
  char *arg4 = (char *) 0 ;
  LLVMValueRef result;
  
  arg1 = (LLVMBuilderRef)jarg1; 
  arg2 = (LLVMValueRef)jarg2; 
  arg3 = (LLVMValueRef)jarg3; 
  arg4 = (char *)jarg4; 
  result = LLVMBuildFMul(arg1,arg2,arg3,(char const *)arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CSLLVM_BuildUDiv(void * jarg1, void * jarg2, void * jarg3, char * jarg4) {
  void * jresult ;
  LLVMBuilderRef arg1 ;
  LLVMValueRef arg2 ;
  LLVMValueRef arg3 ;
  char *arg4 = (char *) 0 ;
  LLVMValueRef result;
  
  arg1 = (LLVMBuilderRef)jarg1; 
  arg2 = (LLVMValueRef)jarg2; 
  arg3 = (LLVMValueRef)jarg3; 
  arg4 = (char *)jarg4; 
  result = LLVMBuildUDiv(arg1,arg2,arg3,(char const *)arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CSLLVM_BuildSDiv(void * jarg1, void * jarg2, void * jarg3, char * jarg4) {
  void * jresult ;
  LLVMBuilderRef arg1 ;
  LLVMValueRef arg2 ;
  LLVMValueRef arg3 ;
  char *arg4 = (char *) 0 ;
  LLVMValueRef result;
  
  arg1 = (LLVMBuilderRef)jarg1; 
  arg2 = (LLVMValueRef)jarg2; 
  arg3 = (LLVMValueRef)jarg3; 
  arg4 = (char *)jarg4; 
  result = LLVMBuildSDiv(arg1,arg2,arg3,(char const *)arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CSLLVM_BuildExactSDiv(void * jarg1, void * jarg2, void * jarg3, char * jarg4) {
  void * jresult ;
  LLVMBuilderRef arg1 ;
  LLVMValueRef arg2 ;
  LLVMValueRef arg3 ;
  char *arg4 = (char *) 0 ;
  LLVMValueRef result;
  
  arg1 = (LLVMBuilderRef)jarg1; 
  arg2 = (LLVMValueRef)jarg2; 
  arg3 = (LLVMValueRef)jarg3; 
  arg4 = (char *)jarg4; 
  result = LLVMBuildExactSDiv(arg1,arg2,arg3,(char const *)arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CSLLVM_BuildFDiv(void * jarg1, void * jarg2, void * jarg3, char * jarg4) {
  void * jresult ;
  LLVMBuilderRef arg1 ;
  LLVMValueRef arg2 ;
  LLVMValueRef arg3 ;
  char *arg4 = (char *) 0 ;
  LLVMValueRef result;
  
  arg1 = (LLVMBuilderRef)jarg1; 
  arg2 = (LLVMValueRef)jarg2; 
  arg3 = (LLVMValueRef)jarg3; 
  arg4 = (char *)jarg4; 
  result = LLVMBuildFDiv(arg1,arg2,arg3,(char const *)arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CSLLVM_BuildURem(void * jarg1, void * jarg2, void * jarg3, char * jarg4) {
  void * jresult ;
  LLVMBuilderRef arg1 ;
  LLVMValueRef arg2 ;
  LLVMValueRef arg3 ;
  char *arg4 = (char *) 0 ;
  LLVMValueRef result;
  
  arg1 = (LLVMBuilderRef)jarg1; 
  arg2 = (LLVMValueRef)jarg2; 
  arg3 = (LLVMValueRef)jarg3; 
  arg4 = (char *)jarg4; 
  result = LLVMBuildURem(arg1,arg2,arg3,(char const *)arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CSLLVM_BuildSRem(void * jarg1, void * jarg2, void * jarg3, char * jarg4) {
  void * jresult ;
  LLVMBuilderRef arg1 ;
  LLVMValueRef arg2 ;
  LLVMValueRef arg3 ;
  char *arg4 = (char *) 0 ;
  LLVMValueRef result;
  
  arg1 = (LLVMBuilderRef)jarg1; 
  arg2 = (LLVMValueRef)jarg2; 
  arg3 = (LLVMValueRef)jarg3; 
  arg4 = (char *)jarg4; 
  result = LLVMBuildSRem(arg1,arg2,arg3,(char const *)arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CSLLVM_BuildFRem(void * jarg1, void * jarg2, void * jarg3, char * jarg4) {
  void * jresult ;
  LLVMBuilderRef arg1 ;
  LLVMValueRef arg2 ;
  LLVMValueRef arg3 ;
  char *arg4 = (char *) 0 ;
  LLVMValueRef result;
  
  arg1 = (LLVMBuilderRef)jarg1; 
  arg2 = (LLVMValueRef)jarg2; 
  arg3 = (LLVMValueRef)jarg3; 
  arg4 = (char *)jarg4; 
  result = LLVMBuildFRem(arg1,arg2,arg3,(char const *)arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CSLLVM_BuildShl(void * jarg1, void * jarg2, void * jarg3, char * jarg4) {
  void * jresult ;
  LLVMBuilderRef arg1 ;
  LLVMValueRef arg2 ;
  LLVMValueRef arg3 ;
  char *arg4 = (char *) 0 ;
  LLVMValueRef result;
  
  arg1 = (LLVMBuilderRef)jarg1; 
  arg2 = (LLVMValueRef)jarg2; 
  arg3 = (LLVMValueRef)jarg3; 
  arg4 = (char *)jarg4; 
  result = LLVMBuildShl(arg1,arg2,arg3,(char const *)arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CSLLVM_BuildLShr(void * jarg1, void * jarg2, void * jarg3, char * jarg4) {
  void * jresult ;
  LLVMBuilderRef arg1 ;
  LLVMValueRef arg2 ;
  LLVMValueRef arg3 ;
  char *arg4 = (char *) 0 ;
  LLVMValueRef result;
  
  arg1 = (LLVMBuilderRef)jarg1; 
  arg2 = (LLVMValueRef)jarg2; 
  arg3 = (LLVMValueRef)jarg3; 
  arg4 = (char *)jarg4; 
  result = LLVMBuildLShr(arg1,arg2,arg3,(char const *)arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CSLLVM_BuildAShr(void * jarg1, void * jarg2, void * jarg3, char * jarg4) {
  void * jresult ;
  LLVMBuilderRef arg1 ;
  LLVMValueRef arg2 ;
  LLVMValueRef arg3 ;
  char *arg4 = (char *) 0 ;
  LLVMValueRef result;
  
  arg1 = (LLVMBuilderRef)jarg1; 
  arg2 = (LLVMValueRef)jarg2; 
  arg3 = (LLVMValueRef)jarg3; 
  arg4 = (char *)jarg4; 
  result = LLVMBuildAShr(arg1,arg2,arg3,(char const *)arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CSLLVM_BuildAnd(void * jarg1, void * jarg2, void * jarg3, char * jarg4) {
  void * jresult ;
  LLVMBuilderRef arg1 ;
  LLVMValueRef arg2 ;
  LLVMValueRef arg3 ;
  char *arg4 = (char *) 0 ;
  LLVMValueRef result;
  
  arg1 = (LLVMBuilderRef)jarg1; 
  arg2 = (LLVMValueRef)jarg2; 
  arg3 = (LLVMValueRef)jarg3; 
  arg4 = (char *)jarg4; 
  result = LLVMBuildAnd(arg1,arg2,arg3,(char const *)arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CSLLVM_BuildOr(void * jarg1, void * jarg2, void * jarg3, char * jarg4) {
  void * jresult ;
  LLVMBuilderRef arg1 ;
  LLVMValueRef arg2 ;
  LLVMValueRef arg3 ;
  char *arg4 = (char *) 0 ;
  LLVMValueRef result;
  
  arg1 = (LLVMBuilderRef)jarg1; 
  arg2 = (LLVMValueRef)jarg2; 
  arg3 = (LLVMValueRef)jarg3; 
  arg4 = (char *)jarg4; 
  result = LLVMBuildOr(arg1,arg2,arg3,(char const *)arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CSLLVM_BuildXor(void * jarg1, void * jarg2, void * jarg3, char * jarg4) {
  void * jresult ;
  LLVMBuilderRef arg1 ;
  LLVMValueRef arg2 ;
  LLVMValueRef arg3 ;
  char *arg4 = (char *) 0 ;
  LLVMValueRef result;
  
  arg1 = (LLVMBuilderRef)jarg1; 
  arg2 = (LLVMValueRef)jarg2; 
  arg3 = (LLVMValueRef)jarg3; 
  arg4 = (char *)jarg4; 
  result = LLVMBuildXor(arg1,arg2,arg3,(char const *)arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CSLLVM_BuildBinOp(void * jarg1, int jarg2, void * jarg3, void * jarg4, char * jarg5) {
  void * jresult ;
  LLVMBuilderRef arg1 ;
  LLVMOpcode arg2 ;
  LLVMValueRef arg3 ;
  LLVMValueRef arg4 ;
  char *arg5 = (char *) 0 ;
  LLVMValueRef result;
  
  arg1 = (LLVMBuilderRef)jarg1; 
  arg2 = (LLVMOpcode)jarg2; 
  arg3 = (LLVMValueRef)jarg3; 
  arg4 = (LLVMValueRef)jarg4; 
  arg5 = (char *)jarg5; 
  result = LLVMBuildBinOp(arg1,arg2,arg3,arg4,(char const *)arg5);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CSLLVM_BuildNeg(void * jarg1, void * jarg2, char * jarg3) {
  void * jresult ;
  LLVMBuilderRef arg1 ;
  LLVMValueRef arg2 ;
  char *arg3 = (char *) 0 ;
  LLVMValueRef result;
  
  arg1 = (LLVMBuilderRef)jarg1; 
  arg2 = (LLVMValueRef)jarg2; 
  arg3 = (char *)jarg3; 
  result = LLVMBuildNeg(arg1,arg2,(char const *)arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CSLLVM_BuildNSWNeg(void * jarg1, void * jarg2, char * jarg3) {
  void * jresult ;
  LLVMBuilderRef arg1 ;
  LLVMValueRef arg2 ;
  char *arg3 = (char *) 0 ;
  LLVMValueRef result;
  
  arg1 = (LLVMBuilderRef)jarg1; 
  arg2 = (LLVMValueRef)jarg2; 
  arg3 = (char *)jarg3; 
  result = LLVMBuildNSWNeg(arg1,arg2,(char const *)arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CSLLVM_BuildNUWNeg(void * jarg1, void * jarg2, char * jarg3) {
  void * jresult ;
  LLVMBuilderRef arg1 ;
  LLVMValueRef arg2 ;
  char *arg3 = (char *) 0 ;
  LLVMValueRef result;
  
  arg1 = (LLVMBuilderRef)jarg1; 
  arg2 = (LLVMValueRef)jarg2; 
  arg3 = (char *)jarg3; 
  result = LLVMBuildNUWNeg(arg1,arg2,(char const *)arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CSLLVM_BuildFNeg(void * jarg1, void * jarg2, char * jarg3) {
  void * jresult ;
  LLVMBuilderRef arg1 ;
  LLVMValueRef arg2 ;
  char *arg3 = (char *) 0 ;
  LLVMValueRef result;
  
  arg1 = (LLVMBuilderRef)jarg1; 
  arg2 = (LLVMValueRef)jarg2; 
  arg3 = (char *)jarg3; 
  result = LLVMBuildFNeg(arg1,arg2,(char const *)arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CSLLVM_BuildNot(void * jarg1, void * jarg2, char * jarg3) {
  void * jresult ;
  LLVMBuilderRef arg1 ;
  LLVMValueRef arg2 ;
  char *arg3 = (char *) 0 ;
  LLVMValueRef result;
  
  arg1 = (LLVMBuilderRef)jarg1; 
  arg2 = (LLVMValueRef)jarg2; 
  arg3 = (char *)jarg3; 
  result = LLVMBuildNot(arg1,arg2,(char const *)arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CSLLVM_BuildMalloc(void * jarg1, void * jarg2, char * jarg3) {
  void * jresult ;
  LLVMBuilderRef arg1 ;
  LLVMTypeRef arg2 ;
  char *arg3 = (char *) 0 ;
  LLVMValueRef result;
  
  arg1 = (LLVMBuilderRef)jarg1; 
  arg2 = (LLVMTypeRef)jarg2; 
  arg3 = (char *)jarg3; 
  result = LLVMBuildMalloc(arg1,arg2,(char const *)arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CSLLVM_BuildArrayMalloc(void * jarg1, void * jarg2, void * jarg3, char * jarg4) {
  void * jresult ;
  LLVMBuilderRef arg1 ;
  LLVMTypeRef arg2 ;
  LLVMValueRef arg3 ;
  char *arg4 = (char *) 0 ;
  LLVMValueRef result;
  
  arg1 = (LLVMBuilderRef)jarg1; 
  arg2 = (LLVMTypeRef)jarg2; 
  arg3 = (LLVMValueRef)jarg3; 
  arg4 = (char *)jarg4; 
  result = LLVMBuildArrayMalloc(arg1,arg2,arg3,(char const *)arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CSLLVM_BuildAlloca(void * jarg1, void * jarg2, char * jarg3) {
  void * jresult ;
  LLVMBuilderRef arg1 ;
  LLVMTypeRef arg2 ;
  char *arg3 = (char *) 0 ;
  LLVMValueRef result;
  
  arg1 = (LLVMBuilderRef)jarg1; 
  arg2 = (LLVMTypeRef)jarg2; 
  arg3 = (char *)jarg3; 
  result = LLVMBuildAlloca(arg1,arg2,(char const *)arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CSLLVM_BuildArrayAlloca(void * jarg1, void * jarg2, void * jarg3, char * jarg4) {
  void * jresult ;
  LLVMBuilderRef arg1 ;
  LLVMTypeRef arg2 ;
  LLVMValueRef arg3 ;
  char *arg4 = (char *) 0 ;
  LLVMValueRef result;
  
  arg1 = (LLVMBuilderRef)jarg1; 
  arg2 = (LLVMTypeRef)jarg2; 
  arg3 = (LLVMValueRef)jarg3; 
  arg4 = (char *)jarg4; 
  result = LLVMBuildArrayAlloca(arg1,arg2,arg3,(char const *)arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CSLLVM_BuildFree(void * jarg1, void * jarg2) {
  void * jresult ;
  LLVMBuilderRef arg1 ;
  LLVMValueRef arg2 ;
  LLVMValueRef result;
  
  arg1 = (LLVMBuilderRef)jarg1; 
  arg2 = (LLVMValueRef)jarg2; 
  result = LLVMBuildFree(arg1,arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CSLLVM_BuildLoad(void * jarg1, void * jarg2, char * jarg3) {
  void * jresult ;
  LLVMBuilderRef arg1 ;
  LLVMValueRef arg2 ;
  char *arg3 = (char *) 0 ;
  LLVMValueRef result;
  
  arg1 = (LLVMBuilderRef)jarg1; 
  arg2 = (LLVMValueRef)jarg2; 
  arg3 = (char *)jarg3; 
  result = LLVMBuildLoad(arg1,arg2,(char const *)arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CSLLVM_BuildStore(void * jarg1, void * jarg2, void * jarg3) {
  void * jresult ;
  LLVMBuilderRef arg1 ;
  LLVMValueRef arg2 ;
  LLVMValueRef arg3 ;
  LLVMValueRef result;
  
  arg1 = (LLVMBuilderRef)jarg1; 
  arg2 = (LLVMValueRef)jarg2; 
  arg3 = (LLVMValueRef)jarg3; 
  result = LLVMBuildStore(arg1,arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CSLLVM_BuildGEP(void * jarg1, void * jarg2, void* arg3_data, unsigned int jarg3, char * jarg5) {
  void * jresult ;
  LLVMBuilderRef arg1 ;
  LLVMValueRef arg2 ;
  LLVMValueRef *arg3 = (LLVMValueRef *) 0 ;
  unsigned int arg4 ;
  char *arg5 = (char *) 0 ;
  LLVMValueRef result;
  
  arg1 = (LLVMBuilderRef)jarg1; 
  arg2 = (LLVMValueRef)jarg2; 
  arg3 = (LLVMValueRef*)arg3_data; arg4 = jarg3;
  arg5 = (char *)jarg5; 
  result = LLVMBuildGEP(arg1,arg2,arg3,arg4,(char const *)arg5);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CSLLVM_BuildInBoundsGEP(void * jarg1, void * jarg2, void* arg3_data, unsigned int jarg3, char * jarg5) {
  void * jresult ;
  LLVMBuilderRef arg1 ;
  LLVMValueRef arg2 ;
  LLVMValueRef *arg3 = (LLVMValueRef *) 0 ;
  unsigned int arg4 ;
  char *arg5 = (char *) 0 ;
  LLVMValueRef result;
  
  arg1 = (LLVMBuilderRef)jarg1; 
  arg2 = (LLVMValueRef)jarg2; 
  arg3 = (LLVMValueRef*)arg3_data; arg4 = jarg3;
  arg5 = (char *)jarg5; 
  result = LLVMBuildInBoundsGEP(arg1,arg2,arg3,arg4,(char const *)arg5);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CSLLVM_BuildStructGEP(void * jarg1, void * jarg2, unsigned int jarg3, char * jarg4) {
  void * jresult ;
  LLVMBuilderRef arg1 ;
  LLVMValueRef arg2 ;
  unsigned int arg3 ;
  char *arg4 = (char *) 0 ;
  LLVMValueRef result;
  
  arg1 = (LLVMBuilderRef)jarg1; 
  arg2 = (LLVMValueRef)jarg2; 
  arg3 = (unsigned int)jarg3; 
  arg4 = (char *)jarg4; 
  result = LLVMBuildStructGEP(arg1,arg2,arg3,(char const *)arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CSLLVM_BuildGlobalString(void * jarg1, char * jarg2, char * jarg3) {
  void * jresult ;
  LLVMBuilderRef arg1 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  LLVMValueRef result;
  
  arg1 = (LLVMBuilderRef)jarg1; 
  arg2 = (char *)jarg2; 
  arg3 = (char *)jarg3; 
  result = LLVMBuildGlobalString(arg1,(char const *)arg2,(char const *)arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CSLLVM_BuildGlobalStringPtr(void * jarg1, char * jarg2, char * jarg3) {
  void * jresult ;
  LLVMBuilderRef arg1 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  LLVMValueRef result;
  
  arg1 = (LLVMBuilderRef)jarg1; 
  arg2 = (char *)jarg2; 
  arg3 = (char *)jarg3; 
  result = LLVMBuildGlobalStringPtr(arg1,(char const *)arg2,(char const *)arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_CSLLVM_GetVolatile(void * jarg1) {
  unsigned int jresult ;
  LLVMValueRef arg1 ;
  LLVMBool result;
  
  arg1 = (LLVMValueRef)jarg1; 
  result = (LLVMBool)LLVMGetVolatile(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CSLLVM_SetVolatile(void * jarg1, unsigned int jarg2) {
  LLVMValueRef arg1 ;
  LLVMBool arg2 ;
  
  arg1 = (LLVMValueRef)jarg1; 
  arg2 = jarg2 ? true : false; 
  LLVMSetVolatile(arg1,arg2);
}


SWIGEXPORT int SWIGSTDCALL CSharp_CSLLVM_GetOrdering(void * jarg1) {
  int jresult ;
  LLVMValueRef arg1 ;
  LLVMAtomicOrdering result;
  
  arg1 = (LLVMValueRef)jarg1; 
  result = (LLVMAtomicOrdering)LLVMGetOrdering(arg1);
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CSLLVM_SetOrdering(void * jarg1, int jarg2) {
  LLVMValueRef arg1 ;
  LLVMAtomicOrdering arg2 ;
  
  arg1 = (LLVMValueRef)jarg1; 
  arg2 = (LLVMAtomicOrdering)jarg2; 
  LLVMSetOrdering(arg1,arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CSLLVM_BuildTrunc(void * jarg1, void * jarg2, void * jarg3, char * jarg4) {
  void * jresult ;
  LLVMBuilderRef arg1 ;
  LLVMValueRef arg2 ;
  LLVMTypeRef arg3 ;
  char *arg4 = (char *) 0 ;
  LLVMValueRef result;
  
  arg1 = (LLVMBuilderRef)jarg1; 
  arg2 = (LLVMValueRef)jarg2; 
  arg3 = (LLVMTypeRef)jarg3; 
  arg4 = (char *)jarg4; 
  result = LLVMBuildTrunc(arg1,arg2,arg3,(char const *)arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CSLLVM_BuildZExt(void * jarg1, void * jarg2, void * jarg3, char * jarg4) {
  void * jresult ;
  LLVMBuilderRef arg1 ;
  LLVMValueRef arg2 ;
  LLVMTypeRef arg3 ;
  char *arg4 = (char *) 0 ;
  LLVMValueRef result;
  
  arg1 = (LLVMBuilderRef)jarg1; 
  arg2 = (LLVMValueRef)jarg2; 
  arg3 = (LLVMTypeRef)jarg3; 
  arg4 = (char *)jarg4; 
  result = LLVMBuildZExt(arg1,arg2,arg3,(char const *)arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CSLLVM_BuildSExt(void * jarg1, void * jarg2, void * jarg3, char * jarg4) {
  void * jresult ;
  LLVMBuilderRef arg1 ;
  LLVMValueRef arg2 ;
  LLVMTypeRef arg3 ;
  char *arg4 = (char *) 0 ;
  LLVMValueRef result;
  
  arg1 = (LLVMBuilderRef)jarg1; 
  arg2 = (LLVMValueRef)jarg2; 
  arg3 = (LLVMTypeRef)jarg3; 
  arg4 = (char *)jarg4; 
  result = LLVMBuildSExt(arg1,arg2,arg3,(char const *)arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CSLLVM_BuildFPToUI(void * jarg1, void * jarg2, void * jarg3, char * jarg4) {
  void * jresult ;
  LLVMBuilderRef arg1 ;
  LLVMValueRef arg2 ;
  LLVMTypeRef arg3 ;
  char *arg4 = (char *) 0 ;
  LLVMValueRef result;
  
  arg1 = (LLVMBuilderRef)jarg1; 
  arg2 = (LLVMValueRef)jarg2; 
  arg3 = (LLVMTypeRef)jarg3; 
  arg4 = (char *)jarg4; 
  result = LLVMBuildFPToUI(arg1,arg2,arg3,(char const *)arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CSLLVM_BuildFPToSI(void * jarg1, void * jarg2, void * jarg3, char * jarg4) {
  void * jresult ;
  LLVMBuilderRef arg1 ;
  LLVMValueRef arg2 ;
  LLVMTypeRef arg3 ;
  char *arg4 = (char *) 0 ;
  LLVMValueRef result;
  
  arg1 = (LLVMBuilderRef)jarg1; 
  arg2 = (LLVMValueRef)jarg2; 
  arg3 = (LLVMTypeRef)jarg3; 
  arg4 = (char *)jarg4; 
  result = LLVMBuildFPToSI(arg1,arg2,arg3,(char const *)arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CSLLVM_BuildUIToFP(void * jarg1, void * jarg2, void * jarg3, char * jarg4) {
  void * jresult ;
  LLVMBuilderRef arg1 ;
  LLVMValueRef arg2 ;
  LLVMTypeRef arg3 ;
  char *arg4 = (char *) 0 ;
  LLVMValueRef result;
  
  arg1 = (LLVMBuilderRef)jarg1; 
  arg2 = (LLVMValueRef)jarg2; 
  arg3 = (LLVMTypeRef)jarg3; 
  arg4 = (char *)jarg4; 
  result = LLVMBuildUIToFP(arg1,arg2,arg3,(char const *)arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CSLLVM_BuildSIToFP(void * jarg1, void * jarg2, void * jarg3, char * jarg4) {
  void * jresult ;
  LLVMBuilderRef arg1 ;
  LLVMValueRef arg2 ;
  LLVMTypeRef arg3 ;
  char *arg4 = (char *) 0 ;
  LLVMValueRef result;
  
  arg1 = (LLVMBuilderRef)jarg1; 
  arg2 = (LLVMValueRef)jarg2; 
  arg3 = (LLVMTypeRef)jarg3; 
  arg4 = (char *)jarg4; 
  result = LLVMBuildSIToFP(arg1,arg2,arg3,(char const *)arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CSLLVM_BuildFPTrunc(void * jarg1, void * jarg2, void * jarg3, char * jarg4) {
  void * jresult ;
  LLVMBuilderRef arg1 ;
  LLVMValueRef arg2 ;
  LLVMTypeRef arg3 ;
  char *arg4 = (char *) 0 ;
  LLVMValueRef result;
  
  arg1 = (LLVMBuilderRef)jarg1; 
  arg2 = (LLVMValueRef)jarg2; 
  arg3 = (LLVMTypeRef)jarg3; 
  arg4 = (char *)jarg4; 
  result = LLVMBuildFPTrunc(arg1,arg2,arg3,(char const *)arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CSLLVM_BuildFPExt(void * jarg1, void * jarg2, void * jarg3, char * jarg4) {
  void * jresult ;
  LLVMBuilderRef arg1 ;
  LLVMValueRef arg2 ;
  LLVMTypeRef arg3 ;
  char *arg4 = (char *) 0 ;
  LLVMValueRef result;
  
  arg1 = (LLVMBuilderRef)jarg1; 
  arg2 = (LLVMValueRef)jarg2; 
  arg3 = (LLVMTypeRef)jarg3; 
  arg4 = (char *)jarg4; 
  result = LLVMBuildFPExt(arg1,arg2,arg3,(char const *)arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CSLLVM_BuildPtrToInt(void * jarg1, void * jarg2, void * jarg3, char * jarg4) {
  void * jresult ;
  LLVMBuilderRef arg1 ;
  LLVMValueRef arg2 ;
  LLVMTypeRef arg3 ;
  char *arg4 = (char *) 0 ;
  LLVMValueRef result;
  
  arg1 = (LLVMBuilderRef)jarg1; 
  arg2 = (LLVMValueRef)jarg2; 
  arg3 = (LLVMTypeRef)jarg3; 
  arg4 = (char *)jarg4; 
  result = LLVMBuildPtrToInt(arg1,arg2,arg3,(char const *)arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CSLLVM_BuildIntToPtr(void * jarg1, void * jarg2, void * jarg3, char * jarg4) {
  void * jresult ;
  LLVMBuilderRef arg1 ;
  LLVMValueRef arg2 ;
  LLVMTypeRef arg3 ;
  char *arg4 = (char *) 0 ;
  LLVMValueRef result;
  
  arg1 = (LLVMBuilderRef)jarg1; 
  arg2 = (LLVMValueRef)jarg2; 
  arg3 = (LLVMTypeRef)jarg3; 
  arg4 = (char *)jarg4; 
  result = LLVMBuildIntToPtr(arg1,arg2,arg3,(char const *)arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CSLLVM_BuildBitCast(void * jarg1, void * jarg2, void * jarg3, char * jarg4) {
  void * jresult ;
  LLVMBuilderRef arg1 ;
  LLVMValueRef arg2 ;
  LLVMTypeRef arg3 ;
  char *arg4 = (char *) 0 ;
  LLVMValueRef result;
  
  arg1 = (LLVMBuilderRef)jarg1; 
  arg2 = (LLVMValueRef)jarg2; 
  arg3 = (LLVMTypeRef)jarg3; 
  arg4 = (char *)jarg4; 
  result = LLVMBuildBitCast(arg1,arg2,arg3,(char const *)arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CSLLVM_BuildAddrSpaceCast(void * jarg1, void * jarg2, void * jarg3, char * jarg4) {
  void * jresult ;
  LLVMBuilderRef arg1 ;
  LLVMValueRef arg2 ;
  LLVMTypeRef arg3 ;
  char *arg4 = (char *) 0 ;
  LLVMValueRef result;
  
  arg1 = (LLVMBuilderRef)jarg1; 
  arg2 = (LLVMValueRef)jarg2; 
  arg3 = (LLVMTypeRef)jarg3; 
  arg4 = (char *)jarg4; 
  result = LLVMBuildAddrSpaceCast(arg1,arg2,arg3,(char const *)arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CSLLVM_BuildZExtOrBitCast(void * jarg1, void * jarg2, void * jarg3, char * jarg4) {
  void * jresult ;
  LLVMBuilderRef arg1 ;
  LLVMValueRef arg2 ;
  LLVMTypeRef arg3 ;
  char *arg4 = (char *) 0 ;
  LLVMValueRef result;
  
  arg1 = (LLVMBuilderRef)jarg1; 
  arg2 = (LLVMValueRef)jarg2; 
  arg3 = (LLVMTypeRef)jarg3; 
  arg4 = (char *)jarg4; 
  result = LLVMBuildZExtOrBitCast(arg1,arg2,arg3,(char const *)arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CSLLVM_BuildSExtOrBitCast(void * jarg1, void * jarg2, void * jarg3, char * jarg4) {
  void * jresult ;
  LLVMBuilderRef arg1 ;
  LLVMValueRef arg2 ;
  LLVMTypeRef arg3 ;
  char *arg4 = (char *) 0 ;
  LLVMValueRef result;
  
  arg1 = (LLVMBuilderRef)jarg1; 
  arg2 = (LLVMValueRef)jarg2; 
  arg3 = (LLVMTypeRef)jarg3; 
  arg4 = (char *)jarg4; 
  result = LLVMBuildSExtOrBitCast(arg1,arg2,arg3,(char const *)arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CSLLVM_BuildTruncOrBitCast(void * jarg1, void * jarg2, void * jarg3, char * jarg4) {
  void * jresult ;
  LLVMBuilderRef arg1 ;
  LLVMValueRef arg2 ;
  LLVMTypeRef arg3 ;
  char *arg4 = (char *) 0 ;
  LLVMValueRef result;
  
  arg1 = (LLVMBuilderRef)jarg1; 
  arg2 = (LLVMValueRef)jarg2; 
  arg3 = (LLVMTypeRef)jarg3; 
  arg4 = (char *)jarg4; 
  result = LLVMBuildTruncOrBitCast(arg1,arg2,arg3,(char const *)arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CSLLVM_BuildCast(void * jarg1, int jarg2, void * jarg3, void * jarg4, char * jarg5) {
  void * jresult ;
  LLVMBuilderRef arg1 ;
  LLVMOpcode arg2 ;
  LLVMValueRef arg3 ;
  LLVMTypeRef arg4 ;
  char *arg5 = (char *) 0 ;
  LLVMValueRef result;
  
  arg1 = (LLVMBuilderRef)jarg1; 
  arg2 = (LLVMOpcode)jarg2; 
  arg3 = (LLVMValueRef)jarg3; 
  arg4 = (LLVMTypeRef)jarg4; 
  arg5 = (char *)jarg5; 
  result = LLVMBuildCast(arg1,arg2,arg3,arg4,(char const *)arg5);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CSLLVM_BuildPointerCast(void * jarg1, void * jarg2, void * jarg3, char * jarg4) {
  void * jresult ;
  LLVMBuilderRef arg1 ;
  LLVMValueRef arg2 ;
  LLVMTypeRef arg3 ;
  char *arg4 = (char *) 0 ;
  LLVMValueRef result;
  
  arg1 = (LLVMBuilderRef)jarg1; 
  arg2 = (LLVMValueRef)jarg2; 
  arg3 = (LLVMTypeRef)jarg3; 
  arg4 = (char *)jarg4; 
  result = LLVMBuildPointerCast(arg1,arg2,arg3,(char const *)arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CSLLVM_BuildIntCast(void * jarg1, void * jarg2, void * jarg3, char * jarg4) {
  void * jresult ;
  LLVMBuilderRef arg1 ;
  LLVMValueRef arg2 ;
  LLVMTypeRef arg3 ;
  char *arg4 = (char *) 0 ;
  LLVMValueRef result;
  
  arg1 = (LLVMBuilderRef)jarg1; 
  arg2 = (LLVMValueRef)jarg2; 
  arg3 = (LLVMTypeRef)jarg3; 
  arg4 = (char *)jarg4; 
  result = LLVMBuildIntCast(arg1,arg2,arg3,(char const *)arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CSLLVM_BuildFPCast(void * jarg1, void * jarg2, void * jarg3, char * jarg4) {
  void * jresult ;
  LLVMBuilderRef arg1 ;
  LLVMValueRef arg2 ;
  LLVMTypeRef arg3 ;
  char *arg4 = (char *) 0 ;
  LLVMValueRef result;
  
  arg1 = (LLVMBuilderRef)jarg1; 
  arg2 = (LLVMValueRef)jarg2; 
  arg3 = (LLVMTypeRef)jarg3; 
  arg4 = (char *)jarg4; 
  result = LLVMBuildFPCast(arg1,arg2,arg3,(char const *)arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CSLLVM_BuildICmp(void * jarg1, int jarg2, void * jarg3, void * jarg4, char * jarg5) {
  void * jresult ;
  LLVMBuilderRef arg1 ;
  LLVMIntPredicate arg2 ;
  LLVMValueRef arg3 ;
  LLVMValueRef arg4 ;
  char *arg5 = (char *) 0 ;
  LLVMValueRef result;
  
  arg1 = (LLVMBuilderRef)jarg1; 
  arg2 = (LLVMIntPredicate)jarg2; 
  arg3 = (LLVMValueRef)jarg3; 
  arg4 = (LLVMValueRef)jarg4; 
  arg5 = (char *)jarg5; 
  result = LLVMBuildICmp(arg1,arg2,arg3,arg4,(char const *)arg5);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CSLLVM_BuildFCmp(void * jarg1, int jarg2, void * jarg3, void * jarg4, char * jarg5) {
  void * jresult ;
  LLVMBuilderRef arg1 ;
  LLVMRealPredicate arg2 ;
  LLVMValueRef arg3 ;
  LLVMValueRef arg4 ;
  char *arg5 = (char *) 0 ;
  LLVMValueRef result;
  
  arg1 = (LLVMBuilderRef)jarg1; 
  arg2 = (LLVMRealPredicate)jarg2; 
  arg3 = (LLVMValueRef)jarg3; 
  arg4 = (LLVMValueRef)jarg4; 
  arg5 = (char *)jarg5; 
  result = LLVMBuildFCmp(arg1,arg2,arg3,arg4,(char const *)arg5);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CSLLVM_BuildPhi(void * jarg1, void * jarg2, char * jarg3) {
  void * jresult ;
  LLVMBuilderRef arg1 ;
  LLVMTypeRef arg2 ;
  char *arg3 = (char *) 0 ;
  LLVMValueRef result;
  
  arg1 = (LLVMBuilderRef)jarg1; 
  arg2 = (LLVMTypeRef)jarg2; 
  arg3 = (char *)jarg3; 
  result = LLVMBuildPhi(arg1,arg2,(char const *)arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CSLLVM_BuildCall(void * jarg1, void * jarg2, void* arg3_data, unsigned int jarg3, char * jarg5) {
  void * jresult ;
  LLVMBuilderRef arg1 ;
  LLVMValueRef arg2 ;
  LLVMValueRef *arg3 = (LLVMValueRef *) 0 ;
  unsigned int arg4 ;
  char *arg5 = (char *) 0 ;
  LLVMValueRef result;
  
  arg1 = (LLVMBuilderRef)jarg1; 
  arg2 = (LLVMValueRef)jarg2; 
  arg3 = (LLVMValueRef*)arg3_data; arg4 = jarg3;
  arg5 = (char *)jarg5; 
  result = LLVMBuildCall(arg1,arg2,arg3,arg4,(char const *)arg5);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CSLLVM_BuildSelect(void * jarg1, void * jarg2, void * jarg3, void * jarg4, char * jarg5) {
  void * jresult ;
  LLVMBuilderRef arg1 ;
  LLVMValueRef arg2 ;
  LLVMValueRef arg3 ;
  LLVMValueRef arg4 ;
  char *arg5 = (char *) 0 ;
  LLVMValueRef result;
  
  arg1 = (LLVMBuilderRef)jarg1; 
  arg2 = (LLVMValueRef)jarg2; 
  arg3 = (LLVMValueRef)jarg3; 
  arg4 = (LLVMValueRef)jarg4; 
  arg5 = (char *)jarg5; 
  result = LLVMBuildSelect(arg1,arg2,arg3,arg4,(char const *)arg5);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CSLLVM_BuildVAArg(void * jarg1, void * jarg2, void * jarg3, char * jarg4) {
  void * jresult ;
  LLVMBuilderRef arg1 ;
  LLVMValueRef arg2 ;
  LLVMTypeRef arg3 ;
  char *arg4 = (char *) 0 ;
  LLVMValueRef result;
  
  arg1 = (LLVMBuilderRef)jarg1; 
  arg2 = (LLVMValueRef)jarg2; 
  arg3 = (LLVMTypeRef)jarg3; 
  arg4 = (char *)jarg4; 
  result = LLVMBuildVAArg(arg1,arg2,arg3,(char const *)arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CSLLVM_BuildExtractElement(void * jarg1, void * jarg2, void * jarg3, char * jarg4) {
  void * jresult ;
  LLVMBuilderRef arg1 ;
  LLVMValueRef arg2 ;
  LLVMValueRef arg3 ;
  char *arg4 = (char *) 0 ;
  LLVMValueRef result;
  
  arg1 = (LLVMBuilderRef)jarg1; 
  arg2 = (LLVMValueRef)jarg2; 
  arg3 = (LLVMValueRef)jarg3; 
  arg4 = (char *)jarg4; 
  result = LLVMBuildExtractElement(arg1,arg2,arg3,(char const *)arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CSLLVM_BuildInsertElement(void * jarg1, void * jarg2, void * jarg3, void * jarg4, char * jarg5) {
  void * jresult ;
  LLVMBuilderRef arg1 ;
  LLVMValueRef arg2 ;
  LLVMValueRef arg3 ;
  LLVMValueRef arg4 ;
  char *arg5 = (char *) 0 ;
  LLVMValueRef result;
  
  arg1 = (LLVMBuilderRef)jarg1; 
  arg2 = (LLVMValueRef)jarg2; 
  arg3 = (LLVMValueRef)jarg3; 
  arg4 = (LLVMValueRef)jarg4; 
  arg5 = (char *)jarg5; 
  result = LLVMBuildInsertElement(arg1,arg2,arg3,arg4,(char const *)arg5);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CSLLVM_BuildShuffleVector(void * jarg1, void * jarg2, void * jarg3, void * jarg4, char * jarg5) {
  void * jresult ;
  LLVMBuilderRef arg1 ;
  LLVMValueRef arg2 ;
  LLVMValueRef arg3 ;
  LLVMValueRef arg4 ;
  char *arg5 = (char *) 0 ;
  LLVMValueRef result;
  
  arg1 = (LLVMBuilderRef)jarg1; 
  arg2 = (LLVMValueRef)jarg2; 
  arg3 = (LLVMValueRef)jarg3; 
  arg4 = (LLVMValueRef)jarg4; 
  arg5 = (char *)jarg5; 
  result = LLVMBuildShuffleVector(arg1,arg2,arg3,arg4,(char const *)arg5);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CSLLVM_BuildExtractValue(void * jarg1, void * jarg2, unsigned int jarg3, char * jarg4) {
  void * jresult ;
  LLVMBuilderRef arg1 ;
  LLVMValueRef arg2 ;
  unsigned int arg3 ;
  char *arg4 = (char *) 0 ;
  LLVMValueRef result;
  
  arg1 = (LLVMBuilderRef)jarg1; 
  arg2 = (LLVMValueRef)jarg2; 
  arg3 = (unsigned int)jarg3; 
  arg4 = (char *)jarg4; 
  result = LLVMBuildExtractValue(arg1,arg2,arg3,(char const *)arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CSLLVM_BuildInsertValue(void * jarg1, void * jarg2, void * jarg3, unsigned int jarg4, char * jarg5) {
  void * jresult ;
  LLVMBuilderRef arg1 ;
  LLVMValueRef arg2 ;
  LLVMValueRef arg3 ;
  unsigned int arg4 ;
  char *arg5 = (char *) 0 ;
  LLVMValueRef result;
  
  arg1 = (LLVMBuilderRef)jarg1; 
  arg2 = (LLVMValueRef)jarg2; 
  arg3 = (LLVMValueRef)jarg3; 
  arg4 = (unsigned int)jarg4; 
  arg5 = (char *)jarg5; 
  result = LLVMBuildInsertValue(arg1,arg2,arg3,arg4,(char const *)arg5);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CSLLVM_BuildIsNull(void * jarg1, void * jarg2, char * jarg3) {
  void * jresult ;
  LLVMBuilderRef arg1 ;
  LLVMValueRef arg2 ;
  char *arg3 = (char *) 0 ;
  LLVMValueRef result;
  
  arg1 = (LLVMBuilderRef)jarg1; 
  arg2 = (LLVMValueRef)jarg2; 
  arg3 = (char *)jarg3; 
  result = LLVMBuildIsNull(arg1,arg2,(char const *)arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CSLLVM_BuildIsNotNull(void * jarg1, void * jarg2, char * jarg3) {
  void * jresult ;
  LLVMBuilderRef arg1 ;
  LLVMValueRef arg2 ;
  char *arg3 = (char *) 0 ;
  LLVMValueRef result;
  
  arg1 = (LLVMBuilderRef)jarg1; 
  arg2 = (LLVMValueRef)jarg2; 
  arg3 = (char *)jarg3; 
  result = LLVMBuildIsNotNull(arg1,arg2,(char const *)arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CSLLVM_BuildPtrDiff(void * jarg1, void * jarg2, void * jarg3, char * jarg4) {
  void * jresult ;
  LLVMBuilderRef arg1 ;
  LLVMValueRef arg2 ;
  LLVMValueRef arg3 ;
  char *arg4 = (char *) 0 ;
  LLVMValueRef result;
  
  arg1 = (LLVMBuilderRef)jarg1; 
  arg2 = (LLVMValueRef)jarg2; 
  arg3 = (LLVMValueRef)jarg3; 
  arg4 = (char *)jarg4; 
  result = LLVMBuildPtrDiff(arg1,arg2,arg3,(char const *)arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CSLLVM_BuildFence(void * jarg1, int jarg2, unsigned int jarg3, char * jarg4) {
  void * jresult ;
  LLVMBuilderRef arg1 ;
  LLVMAtomicOrdering arg2 ;
  LLVMBool arg3 ;
  char *arg4 = (char *) 0 ;
  LLVMValueRef result;
  
  arg1 = (LLVMBuilderRef)jarg1; 
  arg2 = (LLVMAtomicOrdering)jarg2; 
  arg3 = jarg3 ? true : false; 
  arg4 = (char *)jarg4; 
  result = LLVMBuildFence(arg1,arg2,arg3,(char const *)arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CSLLVM_BuildAtomicRMW(void * jarg1, int jarg2, void * jarg3, void * jarg4, int jarg5, unsigned int jarg6) {
  void * jresult ;
  LLVMBuilderRef arg1 ;
  LLVMAtomicRMWBinOp arg2 ;
  LLVMValueRef arg3 ;
  LLVMValueRef arg4 ;
  LLVMAtomicOrdering arg5 ;
  LLVMBool arg6 ;
  LLVMValueRef result;
  
  arg1 = (LLVMBuilderRef)jarg1; 
  arg2 = (LLVMAtomicRMWBinOp)jarg2; 
  arg3 = (LLVMValueRef)jarg3; 
  arg4 = (LLVMValueRef)jarg4; 
  arg5 = (LLVMAtomicOrdering)jarg5; 
  arg6 = jarg6 ? true : false; 
  result = LLVMBuildAtomicRMW(arg1,arg2,arg3,arg4,arg5,arg6);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CSLLVM_CreateModuleProviderForExistingModule(void * jarg1) {
  void * jresult ;
  LLVMModuleRef arg1 ;
  LLVMModuleProviderRef result;
  
  arg1 = (LLVMModuleRef)jarg1; 
  result = LLVMCreateModuleProviderForExistingModule(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CSLLVM_DisposeModuleProvider(void * jarg1) {
  LLVMModuleProviderRef arg1 ;
  
  arg1 = (LLVMModuleProviderRef)jarg1; 
  LLVMDisposeModuleProvider(arg1);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_CSLLVM_CreateMemoryBufferWithContentsOfFile(char * jarg1, void * jarg2, void * jarg3) {
  unsigned int jresult ;
  char *arg1 = (char *) 0 ;
  LLVMMemoryBufferRef *arg2 = (LLVMMemoryBufferRef *) 0 ;
  char **arg3 = (char **) 0 ;
  LLVMBool result;
  
  arg1 = (char *)jarg1; 
  arg2 = (LLVMMemoryBufferRef *)jarg2; 
  {
    // Used in generating wrap.cpp:
    // Converts input parameter of target type to C.
    arg3 = (char**)jarg3;
  }
  result = (LLVMBool)LLVMCreateMemoryBufferWithContentsOfFile((char const *)arg1,arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_CSLLVM_CreateMemoryBufferWithSTDIN(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  LLVMMemoryBufferRef *arg1 = (LLVMMemoryBufferRef *) 0 ;
  char **arg2 = (char **) 0 ;
  LLVMBool result;
  
  arg1 = (LLVMMemoryBufferRef *)jarg1; 
  {
    // Used in generating wrap.cpp:
    // Converts input parameter of target type to C.
    arg2 = (char**)jarg2;
  }
  result = (LLVMBool)LLVMCreateMemoryBufferWithSTDIN(arg1,arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CSLLVM_CreateMemoryBufferWithMemoryRange(char * jarg1, unsigned long jarg2, char * jarg3, unsigned int jarg4) {
  void * jresult ;
  char *arg1 = (char *) 0 ;
  size_t arg2 ;
  char *arg3 = (char *) 0 ;
  LLVMBool arg4 ;
  LLVMMemoryBufferRef result;
  
  arg1 = (char *)jarg1; 
  arg2 = (size_t)jarg2; 
  arg3 = (char *)jarg3; 
  arg4 = jarg4 ? true : false; 
  result = LLVMCreateMemoryBufferWithMemoryRange((char const *)arg1,arg2,(char const *)arg3,arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CSLLVM_CreateMemoryBufferWithMemoryRangeCopy(char * jarg1, unsigned long jarg2, char * jarg3) {
  void * jresult ;
  char *arg1 = (char *) 0 ;
  size_t arg2 ;
  char *arg3 = (char *) 0 ;
  LLVMMemoryBufferRef result;
  
  arg1 = (char *)jarg1; 
  arg2 = (size_t)jarg2; 
  arg3 = (char *)jarg3; 
  result = LLVMCreateMemoryBufferWithMemoryRangeCopy((char const *)arg1,arg2,(char const *)arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_CSLLVM_GetBufferStart(void * jarg1) {
  char * jresult ;
  LLVMMemoryBufferRef arg1 ;
  char *result = 0 ;
  
  arg1 = (LLVMMemoryBufferRef)jarg1; 
  result = (char *)LLVMGetBufferStart(arg1);
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_CSLLVM_GetBufferSize(void * jarg1) {
  unsigned long jresult ;
  LLVMMemoryBufferRef arg1 ;
  size_t result;
  
  arg1 = (LLVMMemoryBufferRef)jarg1; 
  result = LLVMGetBufferSize(arg1);
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CSLLVM_DisposeMemoryBuffer(void * jarg1) {
  LLVMMemoryBufferRef arg1 ;
  
  arg1 = (LLVMMemoryBufferRef)jarg1; 
  LLVMDisposeMemoryBuffer(arg1);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CSLLVM_GetGlobalPassRegistry() {
  void * jresult ;
  LLVMPassRegistryRef result;
  
  result = LLVMGetGlobalPassRegistry();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CSLLVM_CreatePassManager() {
  void * jresult ;
  LLVMPassManagerRef result;
  
  result = LLVMCreatePassManager();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CSLLVM_CreateFunctionPassManagerForModule(void * jarg1) {
  void * jresult ;
  LLVMModuleRef arg1 ;
  LLVMPassManagerRef result;
  
  arg1 = (LLVMModuleRef)jarg1; 
  result = LLVMCreateFunctionPassManagerForModule(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CSLLVM_CreateFunctionPassManager(void * jarg1) {
  void * jresult ;
  LLVMModuleProviderRef arg1 ;
  LLVMPassManagerRef result;
  
  arg1 = (LLVMModuleProviderRef)jarg1; 
  result = LLVMCreateFunctionPassManager(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_CSLLVM_RunPassManager(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  LLVMPassManagerRef arg1 ;
  LLVMModuleRef arg2 ;
  LLVMBool result;
  
  arg1 = (LLVMPassManagerRef)jarg1; 
  arg2 = (LLVMModuleRef)jarg2; 
  result = (LLVMBool)LLVMRunPassManager(arg1,arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_CSLLVM_InitializeFunctionPassManager(void * jarg1) {
  unsigned int jresult ;
  LLVMPassManagerRef arg1 ;
  LLVMBool result;
  
  arg1 = (LLVMPassManagerRef)jarg1; 
  result = (LLVMBool)LLVMInitializeFunctionPassManager(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_CSLLVM_RunFunctionPassManager(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  LLVMPassManagerRef arg1 ;
  LLVMValueRef arg2 ;
  LLVMBool result;
  
  arg1 = (LLVMPassManagerRef)jarg1; 
  arg2 = (LLVMValueRef)jarg2; 
  result = (LLVMBool)LLVMRunFunctionPassManager(arg1,arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_CSLLVM_FinalizeFunctionPassManager(void * jarg1) {
  unsigned int jresult ;
  LLVMPassManagerRef arg1 ;
  LLVMBool result;
  
  arg1 = (LLVMPassManagerRef)jarg1; 
  result = (LLVMBool)LLVMFinalizeFunctionPassManager(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CSLLVM_DisposePassManager(void * jarg1) {
  LLVMPassManagerRef arg1 ;
  
  arg1 = (LLVMPassManagerRef)jarg1; 
  LLVMDisposePassManager(arg1);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_CSLLVM_StartMultithreaded() {
  unsigned int jresult ;
  LLVMBool result;
  
  result = (LLVMBool)LLVMStartMultithreaded();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CSLLVM_StopMultithreaded() {
  LLVMStopMultithreaded();
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_CSLLVM_IsMultithreaded() {
  unsigned int jresult ;
  LLVMBool result;
  
  result = (LLVMBool)LLVMIsMultithreaded();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_CSLLVM_ParseBitcode(void * jarg1, void * jarg2, void * jarg3) {
  unsigned int jresult ;
  LLVMMemoryBufferRef arg1 ;
  LLVMModuleRef *arg2 = (LLVMModuleRef *) 0 ;
  char **arg3 = (char **) 0 ;
  LLVMBool result;
  
  arg1 = (LLVMMemoryBufferRef)jarg1; 
  arg2 = (LLVMModuleRef *)jarg2; 
  {
    // Used in generating wrap.cpp:
    // Converts input parameter of target type to C.
    arg3 = (char**)jarg3;
  }
  result = (LLVMBool)LLVMParseBitcode(arg1,arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_CSLLVM_ParseBitcode2(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  LLVMMemoryBufferRef arg1 ;
  LLVMModuleRef *arg2 = (LLVMModuleRef *) 0 ;
  LLVMBool result;
  
  arg1 = (LLVMMemoryBufferRef)jarg1; 
  arg2 = (LLVMModuleRef *)jarg2; 
  result = (LLVMBool)LLVMParseBitcode2(arg1,arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_CSLLVM_ParseBitcodeInContext(void * jarg1, void * jarg2, void * jarg3, void * jarg4) {
  unsigned int jresult ;
  LLVMContextRef arg1 ;
  LLVMMemoryBufferRef arg2 ;
  LLVMModuleRef *arg3 = (LLVMModuleRef *) 0 ;
  char **arg4 = (char **) 0 ;
  LLVMBool result;
  
  arg1 = (LLVMContextRef)jarg1; 
  arg2 = (LLVMMemoryBufferRef)jarg2; 
  arg3 = (LLVMModuleRef *)jarg3; 
  {
    // Used in generating wrap.cpp:
    // Converts input parameter of target type to C.
    arg4 = (char**)jarg4;
  }
  result = (LLVMBool)LLVMParseBitcodeInContext(arg1,arg2,arg3,arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_CSLLVM_ParseBitcodeInContext2(void * jarg1, void * jarg2, void * jarg3) {
  unsigned int jresult ;
  LLVMContextRef arg1 ;
  LLVMMemoryBufferRef arg2 ;
  LLVMModuleRef *arg3 = (LLVMModuleRef *) 0 ;
  LLVMBool result;
  
  arg1 = (LLVMContextRef)jarg1; 
  arg2 = (LLVMMemoryBufferRef)jarg2; 
  arg3 = (LLVMModuleRef *)jarg3; 
  result = (LLVMBool)LLVMParseBitcodeInContext2(arg1,arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_CSLLVM_GetBitcodeModuleInContext(void * jarg1, void * jarg2, void * jarg3, void * jarg4) {
  unsigned int jresult ;
  LLVMContextRef arg1 ;
  LLVMMemoryBufferRef arg2 ;
  LLVMModuleRef *arg3 = (LLVMModuleRef *) 0 ;
  char **arg4 = (char **) 0 ;
  LLVMBool result;
  
  arg1 = (LLVMContextRef)jarg1; 
  arg2 = (LLVMMemoryBufferRef)jarg2; 
  arg3 = (LLVMModuleRef *)jarg3; 
  {
    // Used in generating wrap.cpp:
    // Converts input parameter of target type to C.
    arg4 = (char**)jarg4;
  }
  result = (LLVMBool)LLVMGetBitcodeModuleInContext(arg1,arg2,arg3,arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_CSLLVM_GetBitcodeModuleInContext2(void * jarg1, void * jarg2, void * jarg3) {
  unsigned int jresult ;
  LLVMContextRef arg1 ;
  LLVMMemoryBufferRef arg2 ;
  LLVMModuleRef *arg3 = (LLVMModuleRef *) 0 ;
  LLVMBool result;
  
  arg1 = (LLVMContextRef)jarg1; 
  arg2 = (LLVMMemoryBufferRef)jarg2; 
  arg3 = (LLVMModuleRef *)jarg3; 
  result = (LLVMBool)LLVMGetBitcodeModuleInContext2(arg1,arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_CSLLVM_GetBitcodeModule(void * jarg1, void * jarg2, void * jarg3) {
  unsigned int jresult ;
  LLVMMemoryBufferRef arg1 ;
  LLVMModuleRef *arg2 = (LLVMModuleRef *) 0 ;
  char **arg3 = (char **) 0 ;
  LLVMBool result;
  
  arg1 = (LLVMMemoryBufferRef)jarg1; 
  arg2 = (LLVMModuleRef *)jarg2; 
  {
    // Used in generating wrap.cpp:
    // Converts input parameter of target type to C.
    arg3 = (char**)jarg3;
  }
  result = (LLVMBool)LLVMGetBitcodeModule(arg1,arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_CSLLVM_GetBitcodeModule2(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  LLVMMemoryBufferRef arg1 ;
  LLVMModuleRef *arg2 = (LLVMModuleRef *) 0 ;
  LLVMBool result;
  
  arg1 = (LLVMMemoryBufferRef)jarg1; 
  arg2 = (LLVMModuleRef *)jarg2; 
  result = (LLVMBool)LLVMGetBitcodeModule2(arg1,arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_CSLLVM_WriteBitcodeToFile(void * jarg1, char * jarg2) {
  int jresult ;
  LLVMModuleRef arg1 ;
  char *arg2 = (char *) 0 ;
  int result;
  
  arg1 = (LLVMModuleRef)jarg1; 
  arg2 = (char *)jarg2; 
  result = (int)LLVMWriteBitcodeToFile(arg1,(char const *)arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_CSLLVM_WriteBitcodeToFD(void * jarg1, int jarg2, int jarg3, int jarg4) {
  int jresult ;
  LLVMModuleRef arg1 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  int result;
  
  arg1 = (LLVMModuleRef)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  arg4 = (int)jarg4; 
  result = (int)LLVMWriteBitcodeToFD(arg1,arg2,arg3,arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_CSLLVM_WriteBitcodeToFileHandle(void * jarg1, int jarg2) {
  int jresult ;
  LLVMModuleRef arg1 ;
  int arg2 ;
  int result;
  
  arg1 = (LLVMModuleRef)jarg1; 
  arg2 = (int)jarg2; 
  result = (int)LLVMWriteBitcodeToFileHandle(arg1,arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CSLLVM_WriteBitcodeToMemoryBuffer(void * jarg1) {
  void * jresult ;
  LLVMModuleRef arg1 ;
  LLVMMemoryBufferRef result;
  
  arg1 = (LLVMModuleRef)jarg1; 
  result = LLVMWriteBitcodeToMemoryBuffer(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CSLLVM_LinkInMCJIT() {
  LLVMLinkInMCJIT();
}


SWIGEXPORT void SWIGSTDCALL CSharp_CSLLVM_LinkInInterpreter() {
  LLVMLinkInInterpreter();
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CSLLVM_CreateGenericValueOfInt(void * jarg1, unsigned long long jarg2, unsigned int jarg3) {
  void * jresult ;
  LLVMTypeRef arg1 ;
  unsigned long long arg2 ;
  LLVMBool arg3 ;
  LLVMGenericValueRef result;
  
  arg1 = (LLVMTypeRef)jarg1; 
  arg2 = (unsigned long long)jarg2; 
  arg3 = jarg3 ? true : false; 
  result = LLVMCreateGenericValueOfInt(arg1,arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CSLLVM_CreateGenericValueOfPointer(void * jarg1) {
  void * jresult ;
  void *arg1 = (void *) 0 ;
  LLVMGenericValueRef result;
  
  arg1 = jarg1; 
  result = LLVMCreateGenericValueOfPointer(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CSLLVM_CreateGenericValueOfFloat(void * jarg1, double jarg2) {
  void * jresult ;
  LLVMTypeRef arg1 ;
  double arg2 ;
  LLVMGenericValueRef result;
  
  arg1 = (LLVMTypeRef)jarg1; 
  arg2 = (double)jarg2; 
  result = LLVMCreateGenericValueOfFloat(arg1,arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_CSLLVM_GenericValueIntWidth(void * jarg1) {
  unsigned int jresult ;
  LLVMGenericValueRef arg1 ;
  unsigned int result;
  
  arg1 = (LLVMGenericValueRef)jarg1; 
  result = (unsigned int)LLVMGenericValueIntWidth(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned long long SWIGSTDCALL CSharp_CSLLVM_GenericValueToInt(void * jarg1, unsigned int jarg2) {
  unsigned long long jresult ;
  LLVMGenericValueRef arg1 ;
  LLVMBool arg2 ;
  unsigned long long result;
  
  arg1 = (LLVMGenericValueRef)jarg1; 
  arg2 = jarg2 ? true : false; 
  result = (unsigned long long)LLVMGenericValueToInt(arg1,arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CSLLVM_GenericValueToPointer(void * jarg1) {
  void * jresult ;
  LLVMGenericValueRef arg1 ;
  void *result = 0 ;
  
  arg1 = (LLVMGenericValueRef)jarg1; 
  result = (void *)LLVMGenericValueToPointer(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_CSLLVM_GenericValueToFloat(void * jarg1, void * jarg2) {
  double jresult ;
  LLVMTypeRef arg1 ;
  LLVMGenericValueRef arg2 ;
  double result;
  
  arg1 = (LLVMTypeRef)jarg1; 
  arg2 = (LLVMGenericValueRef)jarg2; 
  result = (double)LLVMGenericValueToFloat(arg1,arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CSLLVM_DisposeGenericValue(void * jarg1) {
  LLVMGenericValueRef arg1 ;
  
  arg1 = (LLVMGenericValueRef)jarg1; 
  LLVMDisposeGenericValue(arg1);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_CSLLVM_CreateExecutionEngineForModule(void * jarg1, void * jarg2, void * jarg3) {
  unsigned int jresult ;
  LLVMExecutionEngineRef *arg1 = (LLVMExecutionEngineRef *) 0 ;
  LLVMModuleRef arg2 ;
  char **arg3 = (char **) 0 ;
  LLVMBool result;
  
  arg1 = (LLVMExecutionEngineRef *)jarg1; 
  arg2 = (LLVMModuleRef)jarg2; 
  {
    // Used in generating wrap.cpp:
    // Converts input parameter of target type to C.
    arg3 = (char**)jarg3;
  }
  result = (LLVMBool)LLVMCreateExecutionEngineForModule(arg1,arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_CSLLVM_CreateInterpreterForModule(void * jarg1, void * jarg2, void * jarg3) {
  unsigned int jresult ;
  LLVMExecutionEngineRef *arg1 = (LLVMExecutionEngineRef *) 0 ;
  LLVMModuleRef arg2 ;
  char **arg3 = (char **) 0 ;
  LLVMBool result;
  
  arg1 = (LLVMExecutionEngineRef *)jarg1; 
  arg2 = (LLVMModuleRef)jarg2; 
  {
    // Used in generating wrap.cpp:
    // Converts input parameter of target type to C.
    arg3 = (char**)jarg3;
  }
  result = (LLVMBool)LLVMCreateInterpreterForModule(arg1,arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_CSLLVM_CreateJITCompilerForModule(void * jarg1, void * jarg2, unsigned int jarg3, void * jarg4) {
  unsigned int jresult ;
  LLVMExecutionEngineRef *arg1 = (LLVMExecutionEngineRef *) 0 ;
  LLVMModuleRef arg2 ;
  unsigned int arg3 ;
  char **arg4 = (char **) 0 ;
  LLVMBool result;
  
  arg1 = (LLVMExecutionEngineRef *)jarg1; 
  arg2 = (LLVMModuleRef)jarg2; 
  arg3 = (unsigned int)jarg3; 
  {
    // Used in generating wrap.cpp:
    // Converts input parameter of target type to C.
    arg4 = (char**)jarg4;
  }
  result = (LLVMBool)LLVMCreateJITCompilerForModule(arg1,arg2,arg3,arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CSLLVM_InitializeMCJITCompilerOptions(void * jarg1, unsigned long jarg2) {
  LLVMMCJITCompilerOptions *arg1 = (LLVMMCJITCompilerOptions *) 0 ;
  size_t arg2 ;
  
  arg1 = (LLVMMCJITCompilerOptions *)jarg1; 
  arg2 = (size_t)jarg2; 
  LLVMInitializeMCJITCompilerOptions(arg1,arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_CSLLVM_CreateMCJITCompilerForModule(void * jarg1, void * jarg2, void * jarg3, unsigned long jarg4, void * jarg5) {
  unsigned int jresult ;
  LLVMExecutionEngineRef *arg1 = (LLVMExecutionEngineRef *) 0 ;
  LLVMModuleRef arg2 ;
  LLVMMCJITCompilerOptions *arg3 = (LLVMMCJITCompilerOptions *) 0 ;
  size_t arg4 ;
  char **arg5 = (char **) 0 ;
  LLVMBool result;
  
  arg1 = (LLVMExecutionEngineRef *)jarg1; 
  arg2 = (LLVMModuleRef)jarg2; 
  arg3 = (LLVMMCJITCompilerOptions *)jarg3; 
  arg4 = (size_t)jarg4; 
  {
    // Used in generating wrap.cpp:
    // Converts input parameter of target type to C.
    arg5 = (char**)jarg5;
  }
  result = (LLVMBool)LLVMCreateMCJITCompilerForModule(arg1,arg2,arg3,arg4,arg5);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CSLLVM_DisposeExecutionEngine(void * jarg1) {
  LLVMExecutionEngineRef arg1 ;
  
  arg1 = (LLVMExecutionEngineRef)jarg1; 
  LLVMDisposeExecutionEngine(arg1);
}


SWIGEXPORT void SWIGSTDCALL CSharp_CSLLVM_RunStaticConstructors(void * jarg1) {
  LLVMExecutionEngineRef arg1 ;
  
  arg1 = (LLVMExecutionEngineRef)jarg1; 
  LLVMRunStaticConstructors(arg1);
}


SWIGEXPORT void SWIGSTDCALL CSharp_CSLLVM_RunStaticDestructors(void * jarg1) {
  LLVMExecutionEngineRef arg1 ;
  
  arg1 = (LLVMExecutionEngineRef)jarg1; 
  LLVMRunStaticDestructors(arg1);
}


SWIGEXPORT int SWIGSTDCALL CSharp_CSLLVM_RunFunctionAsMain(void * jarg1, void * jarg2, unsigned int jarg3, void * jarg4, void * jarg5) {
  int jresult ;
  LLVMExecutionEngineRef arg1 ;
  LLVMValueRef arg2 ;
  unsigned int arg3 ;
  char **arg4 = (char **) 0 ;
  char **arg5 = (char **) 0 ;
  int result;
  
  arg1 = (LLVMExecutionEngineRef)jarg1; 
  arg2 = (LLVMValueRef)jarg2; 
  arg3 = (unsigned int)jarg3; 
  {
    // Used in generating wrap.cpp:
    // Converts input parameter of target type to C.
    arg4 = (char**)jarg4;
  }
  {
    // Used in generating wrap.cpp:
    // Converts input parameter of target type to C.
    arg5 = (char**)jarg5;
  }
  result = (int)LLVMRunFunctionAsMain(arg1,arg2,arg3,(char const *const *)arg4,(char const *const *)arg5);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CSLLVM_RunFunction(void * jarg1, void * jarg2, unsigned int jarg3, void * jarg4) {
  void * jresult ;
  LLVMExecutionEngineRef arg1 ;
  LLVMValueRef arg2 ;
  unsigned int arg3 ;
  LLVMGenericValueRef *arg4 = (LLVMGenericValueRef *) 0 ;
  LLVMGenericValueRef result;
  
  arg1 = (LLVMExecutionEngineRef)jarg1; 
  arg2 = (LLVMValueRef)jarg2; 
  arg3 = (unsigned int)jarg3; 
  arg4 = (LLVMGenericValueRef *)jarg4; 
  result = LLVMRunFunction(arg1,arg2,arg3,arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CSLLVM_FreeMachineCodeForFunction(void * jarg1, void * jarg2) {
  LLVMExecutionEngineRef arg1 ;
  LLVMValueRef arg2 ;
  
  arg1 = (LLVMExecutionEngineRef)jarg1; 
  arg2 = (LLVMValueRef)jarg2; 
  LLVMFreeMachineCodeForFunction(arg1,arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_CSLLVM_AddModule(void * jarg1, void * jarg2) {
  LLVMExecutionEngineRef arg1 ;
  LLVMModuleRef arg2 ;
  
  arg1 = (LLVMExecutionEngineRef)jarg1; 
  arg2 = (LLVMModuleRef)jarg2; 
  LLVMAddModule(arg1,arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_CSLLVM_RemoveModule(void * jarg1, void * jarg2, void * jarg3, void * jarg4) {
  unsigned int jresult ;
  LLVMExecutionEngineRef arg1 ;
  LLVMModuleRef arg2 ;
  LLVMModuleRef *arg3 = (LLVMModuleRef *) 0 ;
  char **arg4 = (char **) 0 ;
  LLVMBool result;
  
  arg1 = (LLVMExecutionEngineRef)jarg1; 
  arg2 = (LLVMModuleRef)jarg2; 
  arg3 = (LLVMModuleRef *)jarg3; 
  {
    // Used in generating wrap.cpp:
    // Converts input parameter of target type to C.
    arg4 = (char**)jarg4;
  }
  result = (LLVMBool)LLVMRemoveModule(arg1,arg2,arg3,arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_CSLLVM_FindFunction(void * jarg1, char * jarg2, void * jarg3) {
  unsigned int jresult ;
  LLVMExecutionEngineRef arg1 ;
  char *arg2 = (char *) 0 ;
  LLVMValueRef *arg3 = (LLVMValueRef *) 0 ;
  LLVMBool result;
  
  arg1 = (LLVMExecutionEngineRef)jarg1; 
  arg2 = (char *)jarg2; 
  arg3 = (LLVMValueRef *)jarg3; 
  result = (LLVMBool)LLVMFindFunction(arg1,(char const *)arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CSLLVM_RecompileAndRelinkFunction(void * jarg1, void * jarg2) {
  void * jresult ;
  LLVMExecutionEngineRef arg1 ;
  LLVMValueRef arg2 ;
  void *result = 0 ;
  
  arg1 = (LLVMExecutionEngineRef)jarg1; 
  arg2 = (LLVMValueRef)jarg2; 
  result = (void *)LLVMRecompileAndRelinkFunction(arg1,arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CSLLVM_GetExecutionEngineTargetData(void * jarg1) {
  void * jresult ;
  LLVMExecutionEngineRef arg1 ;
  LLVMTargetDataRef result;
  
  arg1 = (LLVMExecutionEngineRef)jarg1; 
  result = LLVMGetExecutionEngineTargetData(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CSLLVM_GetExecutionEngineTargetMachine(void * jarg1) {
  void * jresult ;
  LLVMExecutionEngineRef arg1 ;
  LLVMTargetMachineRef result;
  
  arg1 = (LLVMExecutionEngineRef)jarg1; 
  result = LLVMGetExecutionEngineTargetMachine(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CSLLVM_AddGlobalMapping(void * jarg1, void * jarg2, void * jarg3) {
  LLVMExecutionEngineRef arg1 ;
  LLVMValueRef arg2 ;
  void *arg3 = (void *) 0 ;
  
  arg1 = (LLVMExecutionEngineRef)jarg1; 
  arg2 = (LLVMValueRef)jarg2; 
  arg3 = jarg3; 
  LLVMAddGlobalMapping(arg1,arg2,arg3);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CSLLVM_GetPointerToGlobal(void * jarg1, void * jarg2) {
  void * jresult ;
  LLVMExecutionEngineRef arg1 ;
  LLVMValueRef arg2 ;
  void *result = 0 ;
  
  arg1 = (LLVMExecutionEngineRef)jarg1; 
  arg2 = (LLVMValueRef)jarg2; 
  result = (void *)LLVMGetPointerToGlobal(arg1,arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned long long SWIGSTDCALL CSharp_CSLLVM_GetGlobalValueAddress(void * jarg1, char * jarg2) {
  unsigned long long jresult ;
  LLVMExecutionEngineRef arg1 ;
  char *arg2 = (char *) 0 ;
  uint64_t result;
  
  arg1 = (LLVMExecutionEngineRef)jarg1; 
  arg2 = (char *)jarg2; 
  result = (uint64_t)LLVMGetGlobalValueAddress(arg1,(char const *)arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned long long SWIGSTDCALL CSharp_CSLLVM_GetFunctionAddress(void * jarg1, char * jarg2) {
  unsigned long long jresult ;
  LLVMExecutionEngineRef arg1 ;
  char *arg2 = (char *) 0 ;
  uint64_t result;
  
  arg1 = (LLVMExecutionEngineRef)jarg1; 
  arg2 = (char *)jarg2; 
  result = (uint64_t)LLVMGetFunctionAddress(arg1,(char const *)arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CSLLVM_CreateSimpleMCJITMemoryManager(void * jarg1, void * jarg2, void * jarg3, void * jarg4, void * jarg5) {
  void * jresult ;
  void *arg1 = (void *) 0 ;
  LLVMMemoryManagerAllocateCodeSectionCallback arg2 = (LLVMMemoryManagerAllocateCodeSectionCallback) 0 ;
  LLVMMemoryManagerAllocateDataSectionCallback arg3 = (LLVMMemoryManagerAllocateDataSectionCallback) 0 ;
  LLVMMemoryManagerFinalizeMemoryCallback arg4 = (LLVMMemoryManagerFinalizeMemoryCallback) 0 ;
  LLVMMemoryManagerDestroyCallback arg5 = (LLVMMemoryManagerDestroyCallback) 0 ;
  LLVMMCJITMemoryManagerRef result;
  
  arg1 = jarg1; 
  arg2 = (LLVMMemoryManagerAllocateCodeSectionCallback)jarg2; 
  arg3 = (LLVMMemoryManagerAllocateDataSectionCallback)jarg3; 
  arg4 = (LLVMMemoryManagerFinalizeMemoryCallback)jarg4; 
  arg5 = (LLVMMemoryManagerDestroyCallback)jarg5; 
  result = LLVMCreateSimpleMCJITMemoryManager(arg1,arg2,arg3,arg4,arg5);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CSLLVM_DisposeMCJITMemoryManager(void * jarg1) {
  LLVMMCJITMemoryManagerRef arg1 ;
  
  arg1 = (LLVMMCJITMemoryManagerRef)jarg1; 
  LLVMDisposeMCJITMemoryManager(arg1);
}


SWIGEXPORT void SWIGSTDCALL CSharp_CSLLVM_AddArgumentPromotionPass(void * jarg1) {
  LLVMPassManagerRef arg1 ;
  
  arg1 = (LLVMPassManagerRef)jarg1; 
  LLVMAddArgumentPromotionPass(arg1);
}


SWIGEXPORT void SWIGSTDCALL CSharp_CSLLVM_AddConstantMergePass(void * jarg1) {
  LLVMPassManagerRef arg1 ;
  
  arg1 = (LLVMPassManagerRef)jarg1; 
  LLVMAddConstantMergePass(arg1);
}


SWIGEXPORT void SWIGSTDCALL CSharp_CSLLVM_AddDeadArgEliminationPass(void * jarg1) {
  LLVMPassManagerRef arg1 ;
  
  arg1 = (LLVMPassManagerRef)jarg1; 
  LLVMAddDeadArgEliminationPass(arg1);
}


SWIGEXPORT void SWIGSTDCALL CSharp_CSLLVM_AddFunctionAttrsPass(void * jarg1) {
  LLVMPassManagerRef arg1 ;
  
  arg1 = (LLVMPassManagerRef)jarg1; 
  LLVMAddFunctionAttrsPass(arg1);
}


SWIGEXPORT void SWIGSTDCALL CSharp_CSLLVM_AddFunctionInliningPass(void * jarg1) {
  LLVMPassManagerRef arg1 ;
  
  arg1 = (LLVMPassManagerRef)jarg1; 
  LLVMAddFunctionInliningPass(arg1);
}


SWIGEXPORT void SWIGSTDCALL CSharp_CSLLVM_AddAlwaysInlinerPass(void * jarg1) {
  LLVMPassManagerRef arg1 ;
  
  arg1 = (LLVMPassManagerRef)jarg1; 
  LLVMAddAlwaysInlinerPass(arg1);
}


SWIGEXPORT void SWIGSTDCALL CSharp_CSLLVM_AddGlobalDCEPass(void * jarg1) {
  LLVMPassManagerRef arg1 ;
  
  arg1 = (LLVMPassManagerRef)jarg1; 
  LLVMAddGlobalDCEPass(arg1);
}


SWIGEXPORT void SWIGSTDCALL CSharp_CSLLVM_AddGlobalOptimizerPass(void * jarg1) {
  LLVMPassManagerRef arg1 ;
  
  arg1 = (LLVMPassManagerRef)jarg1; 
  LLVMAddGlobalOptimizerPass(arg1);
}


SWIGEXPORT void SWIGSTDCALL CSharp_CSLLVM_AddIPConstantPropagationPass(void * jarg1) {
  LLVMPassManagerRef arg1 ;
  
  arg1 = (LLVMPassManagerRef)jarg1; 
  LLVMAddIPConstantPropagationPass(arg1);
}


SWIGEXPORT void SWIGSTDCALL CSharp_CSLLVM_AddPruneEHPass(void * jarg1) {
  LLVMPassManagerRef arg1 ;
  
  arg1 = (LLVMPassManagerRef)jarg1; 
  LLVMAddPruneEHPass(arg1);
}


SWIGEXPORT void SWIGSTDCALL CSharp_CSLLVM_AddIPSCCPPass(void * jarg1) {
  LLVMPassManagerRef arg1 ;
  
  arg1 = (LLVMPassManagerRef)jarg1; 
  LLVMAddIPSCCPPass(arg1);
}


SWIGEXPORT void SWIGSTDCALL CSharp_CSLLVM_AddInternalizePass(void * jarg1, unsigned int jarg2) {
  LLVMPassManagerRef arg1 ;
  unsigned int arg2 ;
  
  arg1 = (LLVMPassManagerRef)jarg1; 
  arg2 = (unsigned int)jarg2; 
  LLVMAddInternalizePass(arg1,arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_CSLLVM_AddStripDeadPrototypesPass(void * jarg1) {
  LLVMPassManagerRef arg1 ;
  
  arg1 = (LLVMPassManagerRef)jarg1; 
  LLVMAddStripDeadPrototypesPass(arg1);
}


SWIGEXPORT void SWIGSTDCALL CSharp_CSLLVM_AddStripSymbolsPass(void * jarg1) {
  LLVMPassManagerRef arg1 ;
  
  arg1 = (LLVMPassManagerRef)jarg1; 
  LLVMAddStripSymbolsPass(arg1);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CSLLVM_PassManagerBuilderCreate() {
  void * jresult ;
  LLVMPassManagerBuilderRef result;
  
  result = LLVMPassManagerBuilderCreate();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CSLLVM_PassManagerBuilderDispose(void * jarg1) {
  LLVMPassManagerBuilderRef arg1 ;
  
  arg1 = (LLVMPassManagerBuilderRef)jarg1; 
  LLVMPassManagerBuilderDispose(arg1);
}


SWIGEXPORT void SWIGSTDCALL CSharp_CSLLVM_PassManagerBuilderSetOptLevel(void * jarg1, unsigned int jarg2) {
  LLVMPassManagerBuilderRef arg1 ;
  unsigned int arg2 ;
  
  arg1 = (LLVMPassManagerBuilderRef)jarg1; 
  arg2 = (unsigned int)jarg2; 
  LLVMPassManagerBuilderSetOptLevel(arg1,arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_CSLLVM_PassManagerBuilderSetSizeLevel(void * jarg1, unsigned int jarg2) {
  LLVMPassManagerBuilderRef arg1 ;
  unsigned int arg2 ;
  
  arg1 = (LLVMPassManagerBuilderRef)jarg1; 
  arg2 = (unsigned int)jarg2; 
  LLVMPassManagerBuilderSetSizeLevel(arg1,arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_CSLLVM_PassManagerBuilderSetDisableUnitAtATime(void * jarg1, unsigned int jarg2) {
  LLVMPassManagerBuilderRef arg1 ;
  LLVMBool arg2 ;
  
  arg1 = (LLVMPassManagerBuilderRef)jarg1; 
  arg2 = jarg2 ? true : false; 
  LLVMPassManagerBuilderSetDisableUnitAtATime(arg1,arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_CSLLVM_PassManagerBuilderSetDisableUnrollLoops(void * jarg1, unsigned int jarg2) {
  LLVMPassManagerBuilderRef arg1 ;
  LLVMBool arg2 ;
  
  arg1 = (LLVMPassManagerBuilderRef)jarg1; 
  arg2 = jarg2 ? true : false; 
  LLVMPassManagerBuilderSetDisableUnrollLoops(arg1,arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_CSLLVM_PassManagerBuilderSetDisableSimplifyLibCalls(void * jarg1, unsigned int jarg2) {
  LLVMPassManagerBuilderRef arg1 ;
  LLVMBool arg2 ;
  
  arg1 = (LLVMPassManagerBuilderRef)jarg1; 
  arg2 = jarg2 ? true : false; 
  LLVMPassManagerBuilderSetDisableSimplifyLibCalls(arg1,arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_CSLLVM_PassManagerBuilderUseInlinerWithThreshold(void * jarg1, unsigned int jarg2) {
  LLVMPassManagerBuilderRef arg1 ;
  unsigned int arg2 ;
  
  arg1 = (LLVMPassManagerBuilderRef)jarg1; 
  arg2 = (unsigned int)jarg2; 
  LLVMPassManagerBuilderUseInlinerWithThreshold(arg1,arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_CSLLVM_PassManagerBuilderPopulateFunctionPassManager(void * jarg1, void * jarg2) {
  LLVMPassManagerBuilderRef arg1 ;
  LLVMPassManagerRef arg2 ;
  
  arg1 = (LLVMPassManagerBuilderRef)jarg1; 
  arg2 = (LLVMPassManagerRef)jarg2; 
  LLVMPassManagerBuilderPopulateFunctionPassManager(arg1,arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_CSLLVM_PassManagerBuilderPopulateModulePassManager(void * jarg1, void * jarg2) {
  LLVMPassManagerBuilderRef arg1 ;
  LLVMPassManagerRef arg2 ;
  
  arg1 = (LLVMPassManagerBuilderRef)jarg1; 
  arg2 = (LLVMPassManagerRef)jarg2; 
  LLVMPassManagerBuilderPopulateModulePassManager(arg1,arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_CSLLVM_PassManagerBuilderPopulateLTOPassManager(void * jarg1, void * jarg2, unsigned int jarg3, unsigned int jarg4) {
  LLVMPassManagerBuilderRef arg1 ;
  LLVMPassManagerRef arg2 ;
  LLVMBool arg3 ;
  LLVMBool arg4 ;
  
  arg1 = (LLVMPassManagerBuilderRef)jarg1; 
  arg2 = (LLVMPassManagerRef)jarg2; 
  arg3 = jarg3 ? true : false; 
  arg4 = jarg4 ? true : false; 
  LLVMPassManagerBuilderPopulateLTOPassManager(arg1,arg2,arg3,arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_CSLLVM_AddAggressiveDCEPass(void * jarg1) {
  LLVMPassManagerRef arg1 ;
  
  arg1 = (LLVMPassManagerRef)jarg1; 
  LLVMAddAggressiveDCEPass(arg1);
}


SWIGEXPORT void SWIGSTDCALL CSharp_CSLLVM_AddBitTrackingDCEPass(void * jarg1) {
  LLVMPassManagerRef arg1 ;
  
  arg1 = (LLVMPassManagerRef)jarg1; 
  LLVMAddBitTrackingDCEPass(arg1);
}


SWIGEXPORT void SWIGSTDCALL CSharp_CSLLVM_AddAlignmentFromAssumptionsPass(void * jarg1) {
  LLVMPassManagerRef arg1 ;
  
  arg1 = (LLVMPassManagerRef)jarg1; 
  LLVMAddAlignmentFromAssumptionsPass(arg1);
}


SWIGEXPORT void SWIGSTDCALL CSharp_CSLLVM_AddCFGSimplificationPass(void * jarg1) {
  LLVMPassManagerRef arg1 ;
  
  arg1 = (LLVMPassManagerRef)jarg1; 
  LLVMAddCFGSimplificationPass(arg1);
}


SWIGEXPORT void SWIGSTDCALL CSharp_CSLLVM_AddDeadStoreEliminationPass(void * jarg1) {
  LLVMPassManagerRef arg1 ;
  
  arg1 = (LLVMPassManagerRef)jarg1; 
  LLVMAddDeadStoreEliminationPass(arg1);
}


SWIGEXPORT void SWIGSTDCALL CSharp_CSLLVM_AddScalarizerPass(void * jarg1) {
  LLVMPassManagerRef arg1 ;
  
  arg1 = (LLVMPassManagerRef)jarg1; 
  LLVMAddScalarizerPass(arg1);
}


SWIGEXPORT void SWIGSTDCALL CSharp_CSLLVM_AddMergedLoadStoreMotionPass(void * jarg1) {
  LLVMPassManagerRef arg1 ;
  
  arg1 = (LLVMPassManagerRef)jarg1; 
  LLVMAddMergedLoadStoreMotionPass(arg1);
}


SWIGEXPORT void SWIGSTDCALL CSharp_CSLLVM_AddGVNPass(void * jarg1) {
  LLVMPassManagerRef arg1 ;
  
  arg1 = (LLVMPassManagerRef)jarg1; 
  LLVMAddGVNPass(arg1);
}


SWIGEXPORT void SWIGSTDCALL CSharp_CSLLVM_AddIndVarSimplifyPass(void * jarg1) {
  LLVMPassManagerRef arg1 ;
  
  arg1 = (LLVMPassManagerRef)jarg1; 
  LLVMAddIndVarSimplifyPass(arg1);
}


SWIGEXPORT void SWIGSTDCALL CSharp_CSLLVM_AddInstructionCombiningPass(void * jarg1) {
  LLVMPassManagerRef arg1 ;
  
  arg1 = (LLVMPassManagerRef)jarg1; 
  LLVMAddInstructionCombiningPass(arg1);
}


SWIGEXPORT void SWIGSTDCALL CSharp_CSLLVM_AddJumpThreadingPass(void * jarg1) {
  LLVMPassManagerRef arg1 ;
  
  arg1 = (LLVMPassManagerRef)jarg1; 
  LLVMAddJumpThreadingPass(arg1);
}


SWIGEXPORT void SWIGSTDCALL CSharp_CSLLVM_AddLICMPass(void * jarg1) {
  LLVMPassManagerRef arg1 ;
  
  arg1 = (LLVMPassManagerRef)jarg1; 
  LLVMAddLICMPass(arg1);
}


SWIGEXPORT void SWIGSTDCALL CSharp_CSLLVM_AddLoopDeletionPass(void * jarg1) {
  LLVMPassManagerRef arg1 ;
  
  arg1 = (LLVMPassManagerRef)jarg1; 
  LLVMAddLoopDeletionPass(arg1);
}


SWIGEXPORT void SWIGSTDCALL CSharp_CSLLVM_AddLoopIdiomPass(void * jarg1) {
  LLVMPassManagerRef arg1 ;
  
  arg1 = (LLVMPassManagerRef)jarg1; 
  LLVMAddLoopIdiomPass(arg1);
}


SWIGEXPORT void SWIGSTDCALL CSharp_CSLLVM_AddLoopRotatePass(void * jarg1) {
  LLVMPassManagerRef arg1 ;
  
  arg1 = (LLVMPassManagerRef)jarg1; 
  LLVMAddLoopRotatePass(arg1);
}


SWIGEXPORT void SWIGSTDCALL CSharp_CSLLVM_AddLoopRerollPass(void * jarg1) {
  LLVMPassManagerRef arg1 ;
  
  arg1 = (LLVMPassManagerRef)jarg1; 
  LLVMAddLoopRerollPass(arg1);
}


SWIGEXPORT void SWIGSTDCALL CSharp_CSLLVM_AddLoopUnrollPass(void * jarg1) {
  LLVMPassManagerRef arg1 ;
  
  arg1 = (LLVMPassManagerRef)jarg1; 
  LLVMAddLoopUnrollPass(arg1);
}


SWIGEXPORT void SWIGSTDCALL CSharp_CSLLVM_AddLoopUnswitchPass(void * jarg1) {
  LLVMPassManagerRef arg1 ;
  
  arg1 = (LLVMPassManagerRef)jarg1; 
  LLVMAddLoopUnswitchPass(arg1);
}


SWIGEXPORT void SWIGSTDCALL CSharp_CSLLVM_AddMemCpyOptPass(void * jarg1) {
  LLVMPassManagerRef arg1 ;
  
  arg1 = (LLVMPassManagerRef)jarg1; 
  LLVMAddMemCpyOptPass(arg1);
}


SWIGEXPORT void SWIGSTDCALL CSharp_CSLLVM_AddPartiallyInlineLibCallsPass(void * jarg1) {
  LLVMPassManagerRef arg1 ;
  
  arg1 = (LLVMPassManagerRef)jarg1; 
  LLVMAddPartiallyInlineLibCallsPass(arg1);
}


SWIGEXPORT void SWIGSTDCALL CSharp_CSLLVM_AddLowerSwitchPass(void * jarg1) {
  LLVMPassManagerRef arg1 ;
  
  arg1 = (LLVMPassManagerRef)jarg1; 
  LLVMAddLowerSwitchPass(arg1);
}


SWIGEXPORT void SWIGSTDCALL CSharp_CSLLVM_AddPromoteMemoryToRegisterPass(void * jarg1) {
  LLVMPassManagerRef arg1 ;
  
  arg1 = (LLVMPassManagerRef)jarg1; 
  LLVMAddPromoteMemoryToRegisterPass(arg1);
}


SWIGEXPORT void SWIGSTDCALL CSharp_CSLLVM_AddReassociatePass(void * jarg1) {
  LLVMPassManagerRef arg1 ;
  
  arg1 = (LLVMPassManagerRef)jarg1; 
  LLVMAddReassociatePass(arg1);
}


SWIGEXPORT void SWIGSTDCALL CSharp_CSLLVM_AddSCCPPass(void * jarg1) {
  LLVMPassManagerRef arg1 ;
  
  arg1 = (LLVMPassManagerRef)jarg1; 
  LLVMAddSCCPPass(arg1);
}


SWIGEXPORT void SWIGSTDCALL CSharp_CSLLVM_AddScalarReplAggregatesPass(void * jarg1) {
  LLVMPassManagerRef arg1 ;
  
  arg1 = (LLVMPassManagerRef)jarg1; 
  LLVMAddScalarReplAggregatesPass(arg1);
}


SWIGEXPORT void SWIGSTDCALL CSharp_CSLLVM_AddScalarReplAggregatesPassSSA(void * jarg1) {
  LLVMPassManagerRef arg1 ;
  
  arg1 = (LLVMPassManagerRef)jarg1; 
  LLVMAddScalarReplAggregatesPassSSA(arg1);
}


SWIGEXPORT void SWIGSTDCALL CSharp_CSLLVM_AddScalarReplAggregatesPassWithThreshold(void * jarg1, int jarg2) {
  LLVMPassManagerRef arg1 ;
  int arg2 ;
  
  arg1 = (LLVMPassManagerRef)jarg1; 
  arg2 = (int)jarg2; 
  LLVMAddScalarReplAggregatesPassWithThreshold(arg1,arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_CSLLVM_AddSimplifyLibCallsPass(void * jarg1) {
  LLVMPassManagerRef arg1 ;
  
  arg1 = (LLVMPassManagerRef)jarg1; 
  LLVMAddSimplifyLibCallsPass(arg1);
}


SWIGEXPORT void SWIGSTDCALL CSharp_CSLLVM_AddTailCallEliminationPass(void * jarg1) {
  LLVMPassManagerRef arg1 ;
  
  arg1 = (LLVMPassManagerRef)jarg1; 
  LLVMAddTailCallEliminationPass(arg1);
}


SWIGEXPORT void SWIGSTDCALL CSharp_CSLLVM_AddConstantPropagationPass(void * jarg1) {
  LLVMPassManagerRef arg1 ;
  
  arg1 = (LLVMPassManagerRef)jarg1; 
  LLVMAddConstantPropagationPass(arg1);
}


SWIGEXPORT void SWIGSTDCALL CSharp_CSLLVM_AddDemoteMemoryToRegisterPass(void * jarg1) {
  LLVMPassManagerRef arg1 ;
  
  arg1 = (LLVMPassManagerRef)jarg1; 
  LLVMAddDemoteMemoryToRegisterPass(arg1);
}


SWIGEXPORT void SWIGSTDCALL CSharp_CSLLVM_AddVerifierPass(void * jarg1) {
  LLVMPassManagerRef arg1 ;
  
  arg1 = (LLVMPassManagerRef)jarg1; 
  LLVMAddVerifierPass(arg1);
}


SWIGEXPORT void SWIGSTDCALL CSharp_CSLLVM_AddCorrelatedValuePropagationPass(void * jarg1) {
  LLVMPassManagerRef arg1 ;
  
  arg1 = (LLVMPassManagerRef)jarg1; 
  LLVMAddCorrelatedValuePropagationPass(arg1);
}


SWIGEXPORT void SWIGSTDCALL CSharp_CSLLVM_AddEarlyCSEPass(void * jarg1) {
  LLVMPassManagerRef arg1 ;
  
  arg1 = (LLVMPassManagerRef)jarg1; 
  LLVMAddEarlyCSEPass(arg1);
}


SWIGEXPORT void SWIGSTDCALL CSharp_CSLLVM_AddLowerExpectIntrinsicPass(void * jarg1) {
  LLVMPassManagerRef arg1 ;
  
  arg1 = (LLVMPassManagerRef)jarg1; 
  LLVMAddLowerExpectIntrinsicPass(arg1);
}


SWIGEXPORT void SWIGSTDCALL CSharp_CSLLVM_AddTypeBasedAliasAnalysisPass(void * jarg1) {
  LLVMPassManagerRef arg1 ;
  
  arg1 = (LLVMPassManagerRef)jarg1; 
  LLVMAddTypeBasedAliasAnalysisPass(arg1);
}


SWIGEXPORT void SWIGSTDCALL CSharp_CSLLVM_AddScopedNoAliasAAPass(void * jarg1) {
  LLVMPassManagerRef arg1 ;
  
  arg1 = (LLVMPassManagerRef)jarg1; 
  LLVMAddScopedNoAliasAAPass(arg1);
}


SWIGEXPORT void SWIGSTDCALL CSharp_CSLLVM_AddBasicAliasAnalysisPass(void * jarg1) {
  LLVMPassManagerRef arg1 ;
  
  arg1 = (LLVMPassManagerRef)jarg1; 
  LLVMAddBasicAliasAnalysisPass(arg1);
}


SWIGEXPORT void SWIGSTDCALL CSharp_CSLLVM_AddBBVectorizePass(void * jarg1) {
  LLVMPassManagerRef arg1 ;
  
  arg1 = (LLVMPassManagerRef)jarg1; 
  LLVMAddBBVectorizePass(arg1);
}


SWIGEXPORT void SWIGSTDCALL CSharp_CSLLVM_AddLoopVectorizePass(void * jarg1) {
  LLVMPassManagerRef arg1 ;
  
  arg1 = (LLVMPassManagerRef)jarg1; 
  LLVMAddLoopVectorizePass(arg1);
}


SWIGEXPORT void SWIGSTDCALL CSharp_CSLLVM_AddSLPVectorizePass(void * jarg1) {
  LLVMPassManagerRef arg1 ;
  
  arg1 = (LLVMPassManagerRef)jarg1; 
  LLVMAddSLPVectorizePass(arg1);
}


SWIGEXPORT void SWIGSTDCALL CSharp_CSLLVM_InitializeAllTargetInfos() {
  LLVMInitializeAllTargetInfos();
}


SWIGEXPORT void SWIGSTDCALL CSharp_CSLLVM_InitializeAllTargets() {
  LLVMInitializeAllTargets();
}


SWIGEXPORT void SWIGSTDCALL CSharp_CSLLVM_InitializeAllTargetMCs() {
  LLVMInitializeAllTargetMCs();
}


SWIGEXPORT void SWIGSTDCALL CSharp_CSLLVM_InitializeAllAsmPrinters() {
  LLVMInitializeAllAsmPrinters();
}


SWIGEXPORT void SWIGSTDCALL CSharp_CSLLVM_InitializeAllAsmParsers() {
  LLVMInitializeAllAsmParsers();
}


SWIGEXPORT void SWIGSTDCALL CSharp_CSLLVM_InitializeAllDisassemblers() {
  LLVMInitializeAllDisassemblers();
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_CSLLVM_InitializeNativeTarget() {
  unsigned int jresult ;
  LLVMBool result;
  
  result = (LLVMBool)LLVMInitializeNativeTarget();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_CSLLVM_InitializeNativeAsmParser() {
  unsigned int jresult ;
  LLVMBool result;
  
  result = (LLVMBool)LLVMInitializeNativeAsmParser();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_CSLLVM_InitializeNativeAsmPrinter() {
  unsigned int jresult ;
  LLVMBool result;
  
  result = (LLVMBool)LLVMInitializeNativeAsmPrinter();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_CSLLVM_InitializeNativeDisassembler() {
  unsigned int jresult ;
  LLVMBool result;
  
  result = (LLVMBool)LLVMInitializeNativeDisassembler();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CSLLVM_GetModuleDataLayout(void * jarg1) {
  void * jresult ;
  LLVMModuleRef arg1 ;
  LLVMTargetDataRef result;
  
  arg1 = (LLVMModuleRef)jarg1; 
  result = LLVMGetModuleDataLayout(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CSLLVM_SetModuleDataLayout(void * jarg1, void * jarg2) {
  LLVMModuleRef arg1 ;
  LLVMTargetDataRef arg2 ;
  
  arg1 = (LLVMModuleRef)jarg1; 
  arg2 = (LLVMTargetDataRef)jarg2; 
  LLVMSetModuleDataLayout(arg1,arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CSLLVM_CreateTargetData(char * jarg1) {
  void * jresult ;
  char *arg1 = (char *) 0 ;
  LLVMTargetDataRef result;
  
  arg1 = (char *)jarg1; 
  result = LLVMCreateTargetData((char const *)arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CSLLVM_DisposeTargetData(void * jarg1) {
  LLVMTargetDataRef arg1 ;
  
  arg1 = (LLVMTargetDataRef)jarg1; 
  LLVMDisposeTargetData(arg1);
}


SWIGEXPORT void SWIGSTDCALL CSharp_CSLLVM_AddTargetLibraryInfo(void * jarg1, void * jarg2) {
  LLVMTargetLibraryInfoRef arg1 ;
  LLVMPassManagerRef arg2 ;
  
  arg1 = (LLVMTargetLibraryInfoRef)jarg1; 
  arg2 = (LLVMPassManagerRef)jarg2; 
  LLVMAddTargetLibraryInfo(arg1,arg2);
}


SWIGEXPORT char * SWIGSTDCALL CSharp_CSLLVM_CopyStringRepOfTargetData(void * jarg1) {
  char * jresult ;
  LLVMTargetDataRef arg1 ;
  char *result = 0 ;
  
  arg1 = (LLVMTargetDataRef)jarg1; 
  result = (char *)LLVMCopyStringRepOfTargetData(arg1);
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_CSLLVM_ByteOrder(void * jarg1) {
  int jresult ;
  LLVMTargetDataRef arg1 ;
  enum LLVMByteOrdering result;
  
  arg1 = (LLVMTargetDataRef)jarg1; 
  result = (enum LLVMByteOrdering)LLVMByteOrder(arg1);
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_CSLLVM_PointerSize(void * jarg1) {
  unsigned int jresult ;
  LLVMTargetDataRef arg1 ;
  unsigned int result;
  
  arg1 = (LLVMTargetDataRef)jarg1; 
  result = (unsigned int)LLVMPointerSize(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_CSLLVM_PointerSizeForAS(void * jarg1, unsigned int jarg2) {
  unsigned int jresult ;
  LLVMTargetDataRef arg1 ;
  unsigned int arg2 ;
  unsigned int result;
  
  arg1 = (LLVMTargetDataRef)jarg1; 
  arg2 = (unsigned int)jarg2; 
  result = (unsigned int)LLVMPointerSizeForAS(arg1,arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CSLLVM_IntPtrType(void * jarg1) {
  void * jresult ;
  LLVMTargetDataRef arg1 ;
  LLVMTypeRef result;
  
  arg1 = (LLVMTargetDataRef)jarg1; 
  result = LLVMIntPtrType(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CSLLVM_IntPtrTypeForAS(void * jarg1, unsigned int jarg2) {
  void * jresult ;
  LLVMTargetDataRef arg1 ;
  unsigned int arg2 ;
  LLVMTypeRef result;
  
  arg1 = (LLVMTargetDataRef)jarg1; 
  arg2 = (unsigned int)jarg2; 
  result = LLVMIntPtrTypeForAS(arg1,arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CSLLVM_IntPtrTypeInContext(void * jarg1, void * jarg2) {
  void * jresult ;
  LLVMContextRef arg1 ;
  LLVMTargetDataRef arg2 ;
  LLVMTypeRef result;
  
  arg1 = (LLVMContextRef)jarg1; 
  arg2 = (LLVMTargetDataRef)jarg2; 
  result = LLVMIntPtrTypeInContext(arg1,arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CSLLVM_IntPtrTypeForASInContext(void * jarg1, void * jarg2, unsigned int jarg3) {
  void * jresult ;
  LLVMContextRef arg1 ;
  LLVMTargetDataRef arg2 ;
  unsigned int arg3 ;
  LLVMTypeRef result;
  
  arg1 = (LLVMContextRef)jarg1; 
  arg2 = (LLVMTargetDataRef)jarg2; 
  arg3 = (unsigned int)jarg3; 
  result = LLVMIntPtrTypeForASInContext(arg1,arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned long long SWIGSTDCALL CSharp_CSLLVM_SizeOfTypeInBits(void * jarg1, void * jarg2) {
  unsigned long long jresult ;
  LLVMTargetDataRef arg1 ;
  LLVMTypeRef arg2 ;
  unsigned long long result;
  
  arg1 = (LLVMTargetDataRef)jarg1; 
  arg2 = (LLVMTypeRef)jarg2; 
  result = (unsigned long long)LLVMSizeOfTypeInBits(arg1,arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned long long SWIGSTDCALL CSharp_CSLLVM_StoreSizeOfType(void * jarg1, void * jarg2) {
  unsigned long long jresult ;
  LLVMTargetDataRef arg1 ;
  LLVMTypeRef arg2 ;
  unsigned long long result;
  
  arg1 = (LLVMTargetDataRef)jarg1; 
  arg2 = (LLVMTypeRef)jarg2; 
  result = (unsigned long long)LLVMStoreSizeOfType(arg1,arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned long long SWIGSTDCALL CSharp_CSLLVM_ABISizeOfType(void * jarg1, void * jarg2) {
  unsigned long long jresult ;
  LLVMTargetDataRef arg1 ;
  LLVMTypeRef arg2 ;
  unsigned long long result;
  
  arg1 = (LLVMTargetDataRef)jarg1; 
  arg2 = (LLVMTypeRef)jarg2; 
  result = (unsigned long long)LLVMABISizeOfType(arg1,arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_CSLLVM_ABIAlignmentOfType(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  LLVMTargetDataRef arg1 ;
  LLVMTypeRef arg2 ;
  unsigned int result;
  
  arg1 = (LLVMTargetDataRef)jarg1; 
  arg2 = (LLVMTypeRef)jarg2; 
  result = (unsigned int)LLVMABIAlignmentOfType(arg1,arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_CSLLVM_CallFrameAlignmentOfType(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  LLVMTargetDataRef arg1 ;
  LLVMTypeRef arg2 ;
  unsigned int result;
  
  arg1 = (LLVMTargetDataRef)jarg1; 
  arg2 = (LLVMTypeRef)jarg2; 
  result = (unsigned int)LLVMCallFrameAlignmentOfType(arg1,arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_CSLLVM_PreferredAlignmentOfType(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  LLVMTargetDataRef arg1 ;
  LLVMTypeRef arg2 ;
  unsigned int result;
  
  arg1 = (LLVMTargetDataRef)jarg1; 
  arg2 = (LLVMTypeRef)jarg2; 
  result = (unsigned int)LLVMPreferredAlignmentOfType(arg1,arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_CSLLVM_PreferredAlignmentOfGlobal(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  LLVMTargetDataRef arg1 ;
  LLVMValueRef arg2 ;
  unsigned int result;
  
  arg1 = (LLVMTargetDataRef)jarg1; 
  arg2 = (LLVMValueRef)jarg2; 
  result = (unsigned int)LLVMPreferredAlignmentOfGlobal(arg1,arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_CSLLVM_ElementAtOffset(void * jarg1, void * jarg2, unsigned long long jarg3) {
  unsigned int jresult ;
  LLVMTargetDataRef arg1 ;
  LLVMTypeRef arg2 ;
  unsigned long long arg3 ;
  unsigned int result;
  
  arg1 = (LLVMTargetDataRef)jarg1; 
  arg2 = (LLVMTypeRef)jarg2; 
  arg3 = (unsigned long long)jarg3; 
  result = (unsigned int)LLVMElementAtOffset(arg1,arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned long long SWIGSTDCALL CSharp_CSLLVM_OffsetOfElement(void * jarg1, void * jarg2, unsigned int jarg3) {
  unsigned long long jresult ;
  LLVMTargetDataRef arg1 ;
  LLVMTypeRef arg2 ;
  unsigned int arg3 ;
  unsigned long long result;
  
  arg1 = (LLVMTargetDataRef)jarg1; 
  arg2 = (LLVMTypeRef)jarg2; 
  arg3 = (unsigned int)jarg3; 
  result = (unsigned long long)LLVMOffsetOfElement(arg1,arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CSLLVM_GetFirstTarget() {
  void * jresult ;
  LLVMTargetRef result;
  
  result = LLVMGetFirstTarget();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CSLLVM_GetNextTarget(void * jarg1) {
  void * jresult ;
  LLVMTargetRef arg1 ;
  LLVMTargetRef result;
  
  arg1 = (LLVMTargetRef)jarg1; 
  result = LLVMGetNextTarget(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CSLLVM_GetTargetFromName(char * jarg1) {
  void * jresult ;
  char *arg1 = (char *) 0 ;
  LLVMTargetRef result;
  
  arg1 = (char *)jarg1; 
  result = LLVMGetTargetFromName((char const *)arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_CSLLVM_GetTargetFromTriple(char * jarg1, void * jarg2, void * jarg3) {
  unsigned int jresult ;
  char *arg1 = (char *) 0 ;
  LLVMTargetRef *arg2 = (LLVMTargetRef *) 0 ;
  char **arg3 = (char **) 0 ;
  LLVMBool result;
  
  arg1 = (char *)jarg1; 
  arg2 = (LLVMTargetRef *)jarg2; 
  {
    // Used in generating wrap.cpp:
    // Converts input parameter of target type to C.
    arg3 = (char**)jarg3;
  }
  result = (LLVMBool)LLVMGetTargetFromTriple((char const *)arg1,arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_CSLLVM_GetTargetName(void * jarg1) {
  char * jresult ;
  LLVMTargetRef arg1 ;
  char *result = 0 ;
  
  arg1 = (LLVMTargetRef)jarg1; 
  result = (char *)LLVMGetTargetName(arg1);
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_CSLLVM_GetTargetDescription(void * jarg1) {
  char * jresult ;
  LLVMTargetRef arg1 ;
  char *result = 0 ;
  
  arg1 = (LLVMTargetRef)jarg1; 
  result = (char *)LLVMGetTargetDescription(arg1);
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_CSLLVM_TargetHasJIT(void * jarg1) {
  unsigned int jresult ;
  LLVMTargetRef arg1 ;
  LLVMBool result;
  
  arg1 = (LLVMTargetRef)jarg1; 
  result = (LLVMBool)LLVMTargetHasJIT(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_CSLLVM_TargetHasTargetMachine(void * jarg1) {
  unsigned int jresult ;
  LLVMTargetRef arg1 ;
  LLVMBool result;
  
  arg1 = (LLVMTargetRef)jarg1; 
  result = (LLVMBool)LLVMTargetHasTargetMachine(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_CSLLVM_TargetHasAsmBackend(void * jarg1) {
  unsigned int jresult ;
  LLVMTargetRef arg1 ;
  LLVMBool result;
  
  arg1 = (LLVMTargetRef)jarg1; 
  result = (LLVMBool)LLVMTargetHasAsmBackend(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CSLLVM_CreateTargetMachine(void * jarg1, char * jarg2, char * jarg3, char * jarg4, int jarg5, int jarg6, int jarg7) {
  void * jresult ;
  LLVMTargetRef arg1 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  char *arg4 = (char *) 0 ;
  LLVMCodeGenOptLevel arg5 ;
  LLVMRelocMode arg6 ;
  LLVMCodeModel arg7 ;
  LLVMTargetMachineRef result;
  
  arg1 = (LLVMTargetRef)jarg1; 
  arg2 = (char *)jarg2; 
  arg3 = (char *)jarg3; 
  arg4 = (char *)jarg4; 
  arg5 = (LLVMCodeGenOptLevel)jarg5; 
  arg6 = (LLVMRelocMode)jarg6; 
  arg7 = (LLVMCodeModel)jarg7; 
  result = LLVMCreateTargetMachine(arg1,(char const *)arg2,(char const *)arg3,(char const *)arg4,arg5,arg6,arg7);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CSLLVM_DisposeTargetMachine(void * jarg1) {
  LLVMTargetMachineRef arg1 ;
  
  arg1 = (LLVMTargetMachineRef)jarg1; 
  LLVMDisposeTargetMachine(arg1);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CSLLVM_GetTargetMachineTarget(void * jarg1) {
  void * jresult ;
  LLVMTargetMachineRef arg1 ;
  LLVMTargetRef result;
  
  arg1 = (LLVMTargetMachineRef)jarg1; 
  result = LLVMGetTargetMachineTarget(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_CSLLVM_GetTargetMachineTriple(void * jarg1) {
  char * jresult ;
  LLVMTargetMachineRef arg1 ;
  char *result = 0 ;
  
  arg1 = (LLVMTargetMachineRef)jarg1; 
  result = (char *)LLVMGetTargetMachineTriple(arg1);
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_CSLLVM_GetTargetMachineCPU(void * jarg1) {
  char * jresult ;
  LLVMTargetMachineRef arg1 ;
  char *result = 0 ;
  
  arg1 = (LLVMTargetMachineRef)jarg1; 
  result = (char *)LLVMGetTargetMachineCPU(arg1);
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_CSLLVM_GetTargetMachineFeatureString(void * jarg1) {
  char * jresult ;
  LLVMTargetMachineRef arg1 ;
  char *result = 0 ;
  
  arg1 = (LLVMTargetMachineRef)jarg1; 
  result = (char *)LLVMGetTargetMachineFeatureString(arg1);
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CSLLVM_CreateTargetDataLayout(void * jarg1) {
  void * jresult ;
  LLVMTargetMachineRef arg1 ;
  LLVMTargetDataRef result;
  
  arg1 = (LLVMTargetMachineRef)jarg1; 
  result = LLVMCreateTargetDataLayout(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CSLLVM_SetTargetMachineAsmVerbosity(void * jarg1, unsigned int jarg2) {
  LLVMTargetMachineRef arg1 ;
  LLVMBool arg2 ;
  
  arg1 = (LLVMTargetMachineRef)jarg1; 
  arg2 = jarg2 ? true : false; 
  LLVMSetTargetMachineAsmVerbosity(arg1,arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_CSLLVM_TargetMachineEmitToFile(void * jarg1, void * jarg2, char * jarg3, int jarg4, void * jarg5) {
  unsigned int jresult ;
  LLVMTargetMachineRef arg1 ;
  LLVMModuleRef arg2 ;
  char *arg3 = (char *) 0 ;
  LLVMCodeGenFileType arg4 ;
  char **arg5 = (char **) 0 ;
  LLVMBool result;
  
  arg1 = (LLVMTargetMachineRef)jarg1; 
  arg2 = (LLVMModuleRef)jarg2; 
  arg3 = (char *)jarg3; 
  arg4 = (LLVMCodeGenFileType)jarg4; 
  {
    // Used in generating wrap.cpp:
    // Converts input parameter of target type to C.
    arg5 = (char**)jarg5;
  }
  result = (LLVMBool)LLVMTargetMachineEmitToFile(arg1,arg2,arg3,arg4,arg5);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_CSLLVM_TargetMachineEmitToMemoryBuffer(void * jarg1, void * jarg2, int jarg3, void * jarg4, void * jarg5) {
  unsigned int jresult ;
  LLVMTargetMachineRef arg1 ;
  LLVMModuleRef arg2 ;
  LLVMCodeGenFileType arg3 ;
  char **arg4 = (char **) 0 ;
  LLVMMemoryBufferRef *arg5 = (LLVMMemoryBufferRef *) 0 ;
  LLVMBool result;
  
  arg1 = (LLVMTargetMachineRef)jarg1; 
  arg2 = (LLVMModuleRef)jarg2; 
  arg3 = (LLVMCodeGenFileType)jarg3; 
  {
    // Used in generating wrap.cpp:
    // Converts input parameter of target type to C.
    arg4 = (char**)jarg4;
  }
  arg5 = (LLVMMemoryBufferRef *)jarg5; 
  result = (LLVMBool)LLVMTargetMachineEmitToMemoryBuffer(arg1,arg2,arg3,arg4,arg5);
  jresult = result; 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_CSLLVM_GetDefaultTargetTriple() {
  char * jresult ;
  char *result = 0 ;
  
  result = (char *)LLVMGetDefaultTargetTriple();
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CSLLVM_AddAnalysisPasses(void * jarg1, void * jarg2) {
  LLVMTargetMachineRef arg1 ;
  LLVMPassManagerRef arg2 ;
  
  arg1 = (LLVMTargetMachineRef)jarg1; 
  arg2 = (LLVMPassManagerRef)jarg2; 
  LLVMAddAnalysisPasses(arg1,arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_CSLLVM_VerifyModule(void * jarg1, int jarg2, void * jarg3) {
  unsigned int jresult ;
  LLVMModuleRef arg1 ;
  LLVMVerifierFailureAction arg2 ;
  char **arg3 = (char **) 0 ;
  LLVMBool result;
  
  arg1 = (LLVMModuleRef)jarg1; 
  arg2 = (LLVMVerifierFailureAction)jarg2; 
  {
    // Used in generating wrap.cpp:
    // Converts input parameter of target type to C.
    arg3 = (char**)jarg3;
  }
  result = (LLVMBool)LLVMVerifyModule(arg1,arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_CSLLVM_VerifyFunction(void * jarg1, int jarg2) {
  unsigned int jresult ;
  LLVMValueRef arg1 ;
  LLVMVerifierFailureAction arg2 ;
  LLVMBool result;
  
  arg1 = (LLVMValueRef)jarg1; 
  arg2 = (LLVMVerifierFailureAction)jarg2; 
  result = (LLVMBool)LLVMVerifyFunction(arg1,arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CSLLVM_ViewFunctionCFG(void * jarg1) {
  LLVMValueRef arg1 ;
  
  arg1 = (LLVMValueRef)jarg1; 
  LLVMViewFunctionCFG(arg1);
}


SWIGEXPORT void SWIGSTDCALL CSharp_CSLLVM_ViewFunctionCFGOnly(void * jarg1) {
  LLVMValueRef arg1 ;
  
  arg1 = (LLVMValueRef)jarg1; 
  LLVMViewFunctionCFGOnly(arg1);
}


#ifdef __cplusplus
}
#endif

