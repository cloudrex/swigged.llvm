/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 3.0.12
 *
 * This file is not intended to be easily readable and contains a number of
 * coding conventions designed to improve portability and efficiency. Do not make
 * changes to this file unless you know what you are doing--modify the SWIG
 * interface file instead.
 * ----------------------------------------------------------------------------- */


#ifndef SWIGCSHARP
#define SWIGCSHARP
#endif



#ifdef __cplusplus
/* SwigValueWrapper is described in swig.swg */
template<typename T> class SwigValueWrapper {
  struct SwigMovePointer {
    T *ptr;
    SwigMovePointer(T *p) : ptr(p) { }
    ~SwigMovePointer() { delete ptr; }
    SwigMovePointer& operator=(SwigMovePointer& rhs) { T* oldptr = ptr; ptr = 0; delete oldptr; ptr = rhs.ptr; rhs.ptr = 0; return *this; }
  } pointer;
  SwigValueWrapper& operator=(const SwigValueWrapper<T>& rhs);
  SwigValueWrapper(const SwigValueWrapper<T>& rhs);
public:
  SwigValueWrapper() : pointer(0) { }
  SwigValueWrapper& operator=(const T& t) { SwigMovePointer tmp(new T(t)); pointer = tmp; return *this; }
  operator T&() const { return *pointer.ptr; }
  T *operator&() { return pointer.ptr; }
};

template <typename T> T SwigValueInit() {
  return T();
}
#endif

/* -----------------------------------------------------------------------------
 *  This section contains generic SWIG labels for method/variable
 *  declarations/attributes, and other compiler dependent labels.
 * ----------------------------------------------------------------------------- */

/* template workaround for compilers that cannot correctly implement the C++ standard */
#ifndef SWIGTEMPLATEDISAMBIGUATOR
# if defined(__SUNPRO_CC) && (__SUNPRO_CC <= 0x560)
#  define SWIGTEMPLATEDISAMBIGUATOR template
# elif defined(__HP_aCC)
/* Needed even with `aCC -AA' when `aCC -V' reports HP ANSI C++ B3910B A.03.55 */
/* If we find a maximum version that requires this, the test would be __HP_aCC <= 35500 for A.03.55 */
#  define SWIGTEMPLATEDISAMBIGUATOR template
# else
#  define SWIGTEMPLATEDISAMBIGUATOR
# endif
#endif

/* inline attribute */
#ifndef SWIGINLINE
# if defined(__cplusplus) || (defined(__GNUC__) && !defined(__STRICT_ANSI__))
#   define SWIGINLINE inline
# else
#   define SWIGINLINE
# endif
#endif

/* attribute recognised by some compilers to avoid 'unused' warnings */
#ifndef SWIGUNUSED
# if defined(__GNUC__)
#   if !(defined(__cplusplus)) || (__GNUC__ > 3 || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4))
#     define SWIGUNUSED __attribute__ ((__unused__))
#   else
#     define SWIGUNUSED
#   endif
# elif defined(__ICC)
#   define SWIGUNUSED __attribute__ ((__unused__))
# else
#   define SWIGUNUSED
# endif
#endif

#ifndef SWIG_MSC_UNSUPPRESS_4505
# if defined(_MSC_VER)
#   pragma warning(disable : 4505) /* unreferenced local function has been removed */
# endif
#endif

#ifndef SWIGUNUSEDPARM
# ifdef __cplusplus
#   define SWIGUNUSEDPARM(p)
# else
#   define SWIGUNUSEDPARM(p) p SWIGUNUSED
# endif
#endif

/* internal SWIG method */
#ifndef SWIGINTERN
# define SWIGINTERN static SWIGUNUSED
#endif

/* internal inline SWIG method */
#ifndef SWIGINTERNINLINE
# define SWIGINTERNINLINE SWIGINTERN SWIGINLINE
#endif

/* exporting methods */
#if defined(__GNUC__)
#  if (__GNUC__ >= 4) || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4)
#    ifndef GCC_HASCLASSVISIBILITY
#      define GCC_HASCLASSVISIBILITY
#    endif
#  endif
#endif

#ifndef SWIGEXPORT
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   if defined(STATIC_LINKED)
#     define SWIGEXPORT
#   else
#     define SWIGEXPORT __declspec(dllexport)
#   endif
# else
#   if defined(__GNUC__) && defined(GCC_HASCLASSVISIBILITY)
#     define SWIGEXPORT __attribute__ ((visibility("default")))
#   else
#     define SWIGEXPORT
#   endif
# endif
#endif

/* calling conventions for Windows */
#ifndef SWIGSTDCALL
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   define SWIGSTDCALL __stdcall
# else
#   define SWIGSTDCALL
# endif
#endif

/* Deal with Microsoft's attempt at deprecating C standard runtime functions */
#if !defined(SWIG_NO_CRT_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_CRT_SECURE_NO_DEPRECATE)
# define _CRT_SECURE_NO_DEPRECATE
#endif

/* Deal with Microsoft's attempt at deprecating methods in the standard C++ library */
#if !defined(SWIG_NO_SCL_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_SCL_SECURE_NO_DEPRECATE)
# define _SCL_SECURE_NO_DEPRECATE
#endif

/* Deal with Apple's deprecated 'AssertMacros.h' from Carbon-framework */
#if defined(__APPLE__) && !defined(__ASSERT_MACROS_DEFINE_VERSIONS_WITHOUT_UNDERSCORES)
# define __ASSERT_MACROS_DEFINE_VERSIONS_WITHOUT_UNDERSCORES 0
#endif

/* Intel's compiler complains if a variable which was never initialised is
 * cast to void, which is a common idiom which we use to indicate that we
 * are aware a variable isn't used.  So we just silence that warning.
 * See: https://github.com/swig/swig/issues/192 for more discussion.
 */
#ifdef __INTEL_COMPILER
# pragma warning disable 592
#endif


#include <stdlib.h>
#include <string.h>
#include <stdio.h>


/* Support for throwing C# exceptions from C/C++. There are two types: 
 * Exceptions that take a message and ArgumentExceptions that take a message and a parameter name. */
typedef enum {
  SWIG_CSharpApplicationException,
  SWIG_CSharpArithmeticException,
  SWIG_CSharpDivideByZeroException,
  SWIG_CSharpIndexOutOfRangeException,
  SWIG_CSharpInvalidCastException,
  SWIG_CSharpInvalidOperationException,
  SWIG_CSharpIOException,
  SWIG_CSharpNullReferenceException,
  SWIG_CSharpOutOfMemoryException,
  SWIG_CSharpOverflowException,
  SWIG_CSharpSystemException
} SWIG_CSharpExceptionCodes;

typedef enum {
  SWIG_CSharpArgumentException,
  SWIG_CSharpArgumentNullException,
  SWIG_CSharpArgumentOutOfRangeException
} SWIG_CSharpExceptionArgumentCodes;

typedef void (SWIGSTDCALL* SWIG_CSharpExceptionCallback_t)(const char *);
typedef void (SWIGSTDCALL* SWIG_CSharpExceptionArgumentCallback_t)(const char *, const char *);

typedef struct {
  SWIG_CSharpExceptionCodes code;
  SWIG_CSharpExceptionCallback_t callback;
} SWIG_CSharpException_t;

typedef struct {
  SWIG_CSharpExceptionArgumentCodes code;
  SWIG_CSharpExceptionArgumentCallback_t callback;
} SWIG_CSharpExceptionArgument_t;

static SWIG_CSharpException_t SWIG_csharp_exceptions[] = {
  { SWIG_CSharpApplicationException, NULL },
  { SWIG_CSharpArithmeticException, NULL },
  { SWIG_CSharpDivideByZeroException, NULL },
  { SWIG_CSharpIndexOutOfRangeException, NULL },
  { SWIG_CSharpInvalidCastException, NULL },
  { SWIG_CSharpInvalidOperationException, NULL },
  { SWIG_CSharpIOException, NULL },
  { SWIG_CSharpNullReferenceException, NULL },
  { SWIG_CSharpOutOfMemoryException, NULL },
  { SWIG_CSharpOverflowException, NULL },
  { SWIG_CSharpSystemException, NULL }
};

static SWIG_CSharpExceptionArgument_t SWIG_csharp_exceptions_argument[] = {
  { SWIG_CSharpArgumentException, NULL },
  { SWIG_CSharpArgumentNullException, NULL },
  { SWIG_CSharpArgumentOutOfRangeException, NULL }
};

static void SWIGUNUSED SWIG_CSharpSetPendingException(SWIG_CSharpExceptionCodes code, const char *msg) {
  SWIG_CSharpExceptionCallback_t callback = SWIG_csharp_exceptions[SWIG_CSharpApplicationException].callback;
  if ((size_t)code < sizeof(SWIG_csharp_exceptions)/sizeof(SWIG_CSharpException_t)) {
    callback = SWIG_csharp_exceptions[code].callback;
  }
  callback(msg);
}

static void SWIGUNUSED SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpExceptionArgumentCodes code, const char *msg, const char *param_name) {
  SWIG_CSharpExceptionArgumentCallback_t callback = SWIG_csharp_exceptions_argument[SWIG_CSharpArgumentException].callback;
  if ((size_t)code < sizeof(SWIG_csharp_exceptions_argument)/sizeof(SWIG_CSharpExceptionArgument_t)) {
    callback = SWIG_csharp_exceptions_argument[code].callback;
  }
  callback(msg, param_name);
}


#ifdef __cplusplus
extern "C" 
#endif
SWIGEXPORT void SWIGSTDCALL SWIGRegisterExceptionCallbacks_LLVM(
                                                SWIG_CSharpExceptionCallback_t applicationCallback,
                                                SWIG_CSharpExceptionCallback_t arithmeticCallback,
                                                SWIG_CSharpExceptionCallback_t divideByZeroCallback, 
                                                SWIG_CSharpExceptionCallback_t indexOutOfRangeCallback, 
                                                SWIG_CSharpExceptionCallback_t invalidCastCallback,
                                                SWIG_CSharpExceptionCallback_t invalidOperationCallback,
                                                SWIG_CSharpExceptionCallback_t ioCallback,
                                                SWIG_CSharpExceptionCallback_t nullReferenceCallback,
                                                SWIG_CSharpExceptionCallback_t outOfMemoryCallback, 
                                                SWIG_CSharpExceptionCallback_t overflowCallback, 
                                                SWIG_CSharpExceptionCallback_t systemCallback) {
  SWIG_csharp_exceptions[SWIG_CSharpApplicationException].callback = applicationCallback;
  SWIG_csharp_exceptions[SWIG_CSharpArithmeticException].callback = arithmeticCallback;
  SWIG_csharp_exceptions[SWIG_CSharpDivideByZeroException].callback = divideByZeroCallback;
  SWIG_csharp_exceptions[SWIG_CSharpIndexOutOfRangeException].callback = indexOutOfRangeCallback;
  SWIG_csharp_exceptions[SWIG_CSharpInvalidCastException].callback = invalidCastCallback;
  SWIG_csharp_exceptions[SWIG_CSharpInvalidOperationException].callback = invalidOperationCallback;
  SWIG_csharp_exceptions[SWIG_CSharpIOException].callback = ioCallback;
  SWIG_csharp_exceptions[SWIG_CSharpNullReferenceException].callback = nullReferenceCallback;
  SWIG_csharp_exceptions[SWIG_CSharpOutOfMemoryException].callback = outOfMemoryCallback;
  SWIG_csharp_exceptions[SWIG_CSharpOverflowException].callback = overflowCallback;
  SWIG_csharp_exceptions[SWIG_CSharpSystemException].callback = systemCallback;
}

#ifdef __cplusplus
extern "C" 
#endif
SWIGEXPORT void SWIGSTDCALL SWIGRegisterExceptionArgumentCallbacks_LLVM(
                                                SWIG_CSharpExceptionArgumentCallback_t argumentCallback,
                                                SWIG_CSharpExceptionArgumentCallback_t argumentNullCallback,
                                                SWIG_CSharpExceptionArgumentCallback_t argumentOutOfRangeCallback) {
  SWIG_csharp_exceptions_argument[SWIG_CSharpArgumentException].callback = argumentCallback;
  SWIG_csharp_exceptions_argument[SWIG_CSharpArgumentNullException].callback = argumentNullCallback;
  SWIG_csharp_exceptions_argument[SWIG_CSharpArgumentOutOfRangeException].callback = argumentOutOfRangeCallback;
}


/* Callback for returning strings to C# without leaking memory */
typedef char * (SWIGSTDCALL* SWIG_CSharpStringHelperCallback)(const char *);
static SWIG_CSharpStringHelperCallback SWIG_csharp_string_callback = NULL;


#ifdef __cplusplus
extern "C" 
#endif
SWIGEXPORT void SWIGSTDCALL SWIGRegisterStringCallback_LLVM(SWIG_CSharpStringHelperCallback callback) {
  SWIG_csharp_string_callback = callback;
}


/* Contract support */

#define SWIG_contract_assert(nullreturn, expr, msg) if (!(expr)) {SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, msg, ""); return nullreturn; } else


#include <llvm-c/Core.h>
#include <llvm-c/Analysis.h>
#include <llvm-c/BitReader.h>
#include <llvm-c/BitWriter.h>
#include <llvm-c/Disassembler.h>
#include <llvm-c/ErrorHandling.h>
#include <llvm-c/ExecutionEngine.h>
#include <llvm-c/Initialization.h>
#include <llvm-c/IRReader.h>
#include <llvm-c/Linker.h>
//#include <llvm-c/LinkTimeOptimizer.h>
#include <llvm-c/OrcBindings.h>
#include <llvm-c/Support.h>
#include <llvm-c/Target.h>
#include <llvm-c/TargetMachine.h>
#include <llvm-c/Transforms/IPO.h>
#include <llvm-c/Transforms/PassManagerBuilder.h>
#include <llvm-c/Transforms/Scalar.h>
#include <llvm-c/Transforms/Vectorize.h>
//#include "Additional.h"
//#include "DebugInfo.h"


#include <stdint.h>		// Use the C99 official header


#ifdef __cplusplus
extern "C" {
#endif

SWIGEXPORT int SWIGSTDCALL CSharp_SwiggedfLLVM_AttributeReturnIndex_get___() {
  int jresult ;
  int result;
  
  result = (int)LLVMAttributeReturnIndex;
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_SwiggedfLLVM_AttributeFunctionIndex_get___() {
  int jresult ;
  int result;
  
  result = (int)LLVMAttributeFunctionIndex;
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_SwiggedfLLVM_InitializeCore___(void * jarg1) {
  LLVMPassRegistryRef arg1 ;
  
  arg1 = (LLVMPassRegistryRef)jarg1; 
  LLVMInitializeCore(arg1);
}


SWIGEXPORT void SWIGSTDCALL CSharp_SwiggedfLLVM_Shutdown___() {
  LLVMShutdown();
}


SWIGEXPORT char * SWIGSTDCALL CSharp_SwiggedfLLVM_CreateMessage___(char * jarg1) {
  char * jresult ;
  char *arg1 = (char *) 0 ;
  char *result = 0 ;
  
  arg1 = (char *)jarg1; 
  result = (char *)LLVMCreateMessage((char const *)arg1);
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_SwiggedfLLVM_DisposeMessage___(char * jarg1) {
  char *arg1 = (char *) 0 ;
  
  arg1 = (char *)jarg1; 
  LLVMDisposeMessage(arg1);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SwiggedfLLVM_ContextCreate___() {
  void * jresult ;
  LLVMContextRef result;
  
  result = LLVMContextCreate();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SwiggedfLLVM_GetGlobalContext___() {
  void * jresult ;
  LLVMContextRef result;
  
  result = LLVMGetGlobalContext();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SwiggedfLLVM_ContextGetDiagnosticContext___(void * jarg1) {
  void * jresult ;
  LLVMContextRef arg1 ;
  void *result = 0 ;
  
  arg1 = (LLVMContextRef)jarg1; 
  result = (void *)LLVMContextGetDiagnosticContext(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_SwiggedfLLVM_ContextDispose___(void * jarg1) {
  LLVMContextRef arg1 ;
  
  arg1 = (LLVMContextRef)jarg1; 
  LLVMContextDispose(arg1);
}


SWIGEXPORT char * SWIGSTDCALL CSharp_SwiggedfLLVM_GetDiagInfoDescription___(void * jarg1) {
  char * jresult ;
  LLVMDiagnosticInfoRef arg1 ;
  char *result = 0 ;
  
  arg1 = (LLVMDiagnosticInfoRef)jarg1; 
  result = (char *)LLVMGetDiagInfoDescription(arg1);
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_SwiggedfLLVM_GetDiagInfoSeverity___(void * jarg1) {
  int jresult ;
  LLVMDiagnosticInfoRef arg1 ;
  LLVMDiagnosticSeverity result;
  
  arg1 = (LLVMDiagnosticInfoRef)jarg1; 
  result = (LLVMDiagnosticSeverity)LLVMGetDiagInfoSeverity(arg1);
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_SwiggedfLLVM_GetMDKindIDInContext___(void * jarg1, char * jarg2, unsigned int jarg3) {
  unsigned int jresult ;
  LLVMContextRef arg1 ;
  char *arg2 = (char *) 0 ;
  unsigned int arg3 ;
  unsigned int result;
  
  arg1 = (LLVMContextRef)jarg1; 
  arg2 = (char *)jarg2; 
  arg3 = (unsigned int)jarg3; 
  result = (unsigned int)LLVMGetMDKindIDInContext(arg1,(char const *)arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_SwiggedfLLVM_GetMDKindID___(char * jarg1, unsigned int jarg2) {
  unsigned int jresult ;
  char *arg1 = (char *) 0 ;
  unsigned int arg2 ;
  unsigned int result;
  
  arg1 = (char *)jarg1; 
  arg2 = (unsigned int)jarg2; 
  result = (unsigned int)LLVMGetMDKindID((char const *)arg1,arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_SwiggedfLLVM_GetEnumAttributeKindForName___(char * jarg1, unsigned long jarg2) {
  unsigned int jresult ;
  char *arg1 = (char *) 0 ;
  size_t arg2 ;
  unsigned int result;
  
  arg1 = (char *)jarg1; 
  arg2 = (size_t)jarg2; 
  result = (unsigned int)LLVMGetEnumAttributeKindForName((char const *)arg1,arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_SwiggedfLLVM_GetLastEnumAttributeKind___() {
  unsigned int jresult ;
  unsigned int result;
  
  result = (unsigned int)LLVMGetLastEnumAttributeKind();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SwiggedfLLVM_CreateEnumAttribute___(void * jarg1, unsigned int jarg2, unsigned long long jarg3) {
  void * jresult ;
  LLVMContextRef arg1 ;
  unsigned int arg2 ;
  uint64_t arg3 ;
  LLVMAttributeRef result;
  
  arg1 = (LLVMContextRef)jarg1; 
  arg2 = (unsigned int)jarg2; 
  arg3 = (uint64_t)jarg3; 
  result = LLVMCreateEnumAttribute(arg1,arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_SwiggedfLLVM_GetEnumAttributeKind___(void * jarg1) {
  unsigned int jresult ;
  LLVMAttributeRef arg1 ;
  unsigned int result;
  
  arg1 = (LLVMAttributeRef)jarg1; 
  result = (unsigned int)LLVMGetEnumAttributeKind(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned long long SWIGSTDCALL CSharp_SwiggedfLLVM_GetEnumAttributeValue___(void * jarg1) {
  unsigned long long jresult ;
  LLVMAttributeRef arg1 ;
  uint64_t result;
  
  arg1 = (LLVMAttributeRef)jarg1; 
  result = (uint64_t)LLVMGetEnumAttributeValue(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SwiggedfLLVM_CreateStringAttribute___(void * jarg1, char * jarg2, unsigned int jarg3, char * jarg4, unsigned int jarg5) {
  void * jresult ;
  LLVMContextRef arg1 ;
  char *arg2 = (char *) 0 ;
  unsigned int arg3 ;
  char *arg4 = (char *) 0 ;
  unsigned int arg5 ;
  LLVMAttributeRef result;
  
  arg1 = (LLVMContextRef)jarg1; 
  arg2 = (char *)jarg2; 
  arg3 = (unsigned int)jarg3; 
  arg4 = (char *)jarg4; 
  arg5 = (unsigned int)jarg5; 
  result = LLVMCreateStringAttribute(arg1,(char const *)arg2,arg3,(char const *)arg4,arg5);
  jresult = result; 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_SwiggedfLLVM_GetStringAttributeKind___(void * jarg1, void * jarg2) {
  char * jresult ;
  LLVMAttributeRef arg1 ;
  unsigned int *arg2 = (unsigned int *) 0 ;
  char *result = 0 ;
  
  arg1 = (LLVMAttributeRef)jarg1; 
  arg2 = (unsigned int *)jarg2; 
  result = (char *)LLVMGetStringAttributeKind(arg1,arg2);
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_SwiggedfLLVM_GetStringAttributeValue___(void * jarg1, void * jarg2) {
  char * jresult ;
  LLVMAttributeRef arg1 ;
  unsigned int *arg2 = (unsigned int *) 0 ;
  char *result = 0 ;
  
  arg1 = (LLVMAttributeRef)jarg1; 
  arg2 = (unsigned int *)jarg2; 
  result = (char *)LLVMGetStringAttributeValue(arg1,arg2);
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_SwiggedfLLVM_IsEnumAttribute___(void * jarg1) {
  unsigned int jresult ;
  LLVMAttributeRef arg1 ;
  LLVMBool result;
  
  arg1 = (LLVMAttributeRef)jarg1; 
  result = (LLVMBool)LLVMIsEnumAttribute(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_SwiggedfLLVM_IsStringAttribute___(void * jarg1) {
  unsigned int jresult ;
  LLVMAttributeRef arg1 ;
  LLVMBool result;
  
  arg1 = (LLVMAttributeRef)jarg1; 
  result = (LLVMBool)LLVMIsStringAttribute(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SwiggedfLLVM_ModuleCreateWithName___(char * jarg1) {
  void * jresult ;
  char *arg1 = (char *) 0 ;
  LLVMModuleRef result;
  
  arg1 = (char *)jarg1; 
  result = LLVMModuleCreateWithName((char const *)arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SwiggedfLLVM_ModuleCreateWithNameInContext___(char * jarg1, void * jarg2) {
  void * jresult ;
  char *arg1 = (char *) 0 ;
  LLVMContextRef arg2 ;
  LLVMModuleRef result;
  
  arg1 = (char *)jarg1; 
  arg2 = (LLVMContextRef)jarg2; 
  result = LLVMModuleCreateWithNameInContext((char const *)arg1,arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SwiggedfLLVM_CloneModule___(void * jarg1) {
  void * jresult ;
  LLVMModuleRef arg1 ;
  LLVMModuleRef result;
  
  arg1 = (LLVMModuleRef)jarg1; 
  result = LLVMCloneModule(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_SwiggedfLLVM_DisposeModule___(void * jarg1) {
  LLVMModuleRef arg1 ;
  
  arg1 = (LLVMModuleRef)jarg1; 
  LLVMDisposeModule(arg1);
}


SWIGEXPORT char * SWIGSTDCALL CSharp_SwiggedfLLVM_GetModuleIdentifier___(void * jarg1, void * jarg2) {
  char * jresult ;
  LLVMModuleRef arg1 ;
  size_t *arg2 = (size_t *) 0 ;
  char *result = 0 ;
  
  arg1 = (LLVMModuleRef)jarg1; 
  arg2 = (size_t *)jarg2; 
  result = (char *)LLVMGetModuleIdentifier(arg1,arg2);
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_SwiggedfLLVM_SetModuleIdentifier___(void * jarg1, char * jarg2, unsigned long jarg3) {
  LLVMModuleRef arg1 ;
  char *arg2 = (char *) 0 ;
  size_t arg3 ;
  
  arg1 = (LLVMModuleRef)jarg1; 
  arg2 = (char *)jarg2; 
  arg3 = (size_t)jarg3; 
  LLVMSetModuleIdentifier(arg1,(char const *)arg2,arg3);
}


SWIGEXPORT char * SWIGSTDCALL CSharp_SwiggedfLLVM_GetDataLayoutStr___(void * jarg1) {
  char * jresult ;
  LLVMModuleRef arg1 ;
  char *result = 0 ;
  
  arg1 = (LLVMModuleRef)jarg1; 
  result = (char *)LLVMGetDataLayoutStr(arg1);
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_SwiggedfLLVM_GetDataLayout___(void * jarg1) {
  char * jresult ;
  LLVMModuleRef arg1 ;
  char *result = 0 ;
  
  arg1 = (LLVMModuleRef)jarg1; 
  result = (char *)LLVMGetDataLayout(arg1);
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_SwiggedfLLVM_SetDataLayout___(void * jarg1, char * jarg2) {
  LLVMModuleRef arg1 ;
  char *arg2 = (char *) 0 ;
  
  arg1 = (LLVMModuleRef)jarg1; 
  arg2 = (char *)jarg2; 
  LLVMSetDataLayout(arg1,(char const *)arg2);
}


SWIGEXPORT char * SWIGSTDCALL CSharp_SwiggedfLLVM_GetTarget___(void * jarg1) {
  char * jresult ;
  LLVMModuleRef arg1 ;
  char *result = 0 ;
  
  arg1 = (LLVMModuleRef)jarg1; 
  result = (char *)LLVMGetTarget(arg1);
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_SwiggedfLLVM_SetTarget___(void * jarg1, char * jarg2) {
  LLVMModuleRef arg1 ;
  char *arg2 = (char *) 0 ;
  
  arg1 = (LLVMModuleRef)jarg1; 
  arg2 = (char *)jarg2; 
  LLVMSetTarget(arg1,(char const *)arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_SwiggedfLLVM_DumpModule___(void * jarg1) {
  LLVMModuleRef arg1 ;
  
  arg1 = (LLVMModuleRef)jarg1; 
  LLVMDumpModule(arg1);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_SwiggedfLLVM_PrintModuleToFile___(void * jarg1, char * jarg2, void * jarg3) {
  unsigned int jresult ;
  LLVMModuleRef arg1 ;
  char *arg2 = (char *) 0 ;
  char **arg3 = (char **) 0 ;
  LLVMBool result;
  
  arg1 = (LLVMModuleRef)jarg1; 
  arg2 = (char *)jarg2; 
  {
    // Used in generating wrap.cpp:
    // Converts input parameter of target type to C.
    arg3 = (char**)jarg3;
  }
  result = (LLVMBool)LLVMPrintModuleToFile(arg1,(char const *)arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_SwiggedfLLVM_PrintModuleToString___(void * jarg1) {
  char * jresult ;
  LLVMModuleRef arg1 ;
  char *result = 0 ;
  
  arg1 = (LLVMModuleRef)jarg1; 
  result = (char *)LLVMPrintModuleToString(arg1);
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_SwiggedfLLVM_SetModuleInlineAsm___(void * jarg1, char * jarg2) {
  LLVMModuleRef arg1 ;
  char *arg2 = (char *) 0 ;
  
  arg1 = (LLVMModuleRef)jarg1; 
  arg2 = (char *)jarg2; 
  LLVMSetModuleInlineAsm(arg1,(char const *)arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SwiggedfLLVM_GetModuleContext___(void * jarg1) {
  void * jresult ;
  LLVMModuleRef arg1 ;
  LLVMContextRef result;
  
  arg1 = (LLVMModuleRef)jarg1; 
  result = LLVMGetModuleContext(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SwiggedfLLVM_GetTypeByName___(void * jarg1, char * jarg2) {
  void * jresult ;
  LLVMModuleRef arg1 ;
  char *arg2 = (char *) 0 ;
  LLVMTypeRef result;
  
  arg1 = (LLVMModuleRef)jarg1; 
  arg2 = (char *)jarg2; 
  result = LLVMGetTypeByName(arg1,(char const *)arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_SwiggedfLLVM_GetNamedMetadataNumOperands___(void * jarg1, char * jarg2) {
  unsigned int jresult ;
  LLVMModuleRef arg1 ;
  char *arg2 = (char *) 0 ;
  unsigned int result;
  
  arg1 = (LLVMModuleRef)jarg1; 
  arg2 = (char *)jarg2; 
  result = (unsigned int)LLVMGetNamedMetadataNumOperands(arg1,(char const *)arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_SwiggedfLLVM_GetNamedMetadataOperands___(void * jarg1, char * jarg2, void * jarg3) {
  LLVMModuleRef arg1 ;
  char *arg2 = (char *) 0 ;
  LLVMValueRef *arg3 = (LLVMValueRef *) 0 ;
  
  arg1 = (LLVMModuleRef)jarg1; 
  arg2 = (char *)jarg2; 
  arg3 = (LLVMValueRef *)jarg3; 
  LLVMGetNamedMetadataOperands(arg1,(char const *)arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_SwiggedfLLVM_AddNamedMetadataOperand___(void * jarg1, char * jarg2, void * jarg3) {
  LLVMModuleRef arg1 ;
  char *arg2 = (char *) 0 ;
  LLVMValueRef arg3 ;
  
  arg1 = (LLVMModuleRef)jarg1; 
  arg2 = (char *)jarg2; 
  arg3 = (LLVMValueRef)jarg3; 
  LLVMAddNamedMetadataOperand(arg1,(char const *)arg2,arg3);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SwiggedfLLVM_AddFunction___(void * jarg1, char * jarg2, void * jarg3) {
  void * jresult ;
  LLVMModuleRef arg1 ;
  char *arg2 = (char *) 0 ;
  LLVMTypeRef arg3 ;
  LLVMValueRef result;
  
  arg1 = (LLVMModuleRef)jarg1; 
  arg2 = (char *)jarg2; 
  arg3 = (LLVMTypeRef)jarg3; 
  result = LLVMAddFunction(arg1,(char const *)arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SwiggedfLLVM_GetNamedFunction___(void * jarg1, char * jarg2) {
  void * jresult ;
  LLVMModuleRef arg1 ;
  char *arg2 = (char *) 0 ;
  LLVMValueRef result;
  
  arg1 = (LLVMModuleRef)jarg1; 
  arg2 = (char *)jarg2; 
  result = LLVMGetNamedFunction(arg1,(char const *)arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SwiggedfLLVM_GetFirstFunction___(void * jarg1) {
  void * jresult ;
  LLVMModuleRef arg1 ;
  LLVMValueRef result;
  
  arg1 = (LLVMModuleRef)jarg1; 
  result = LLVMGetFirstFunction(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SwiggedfLLVM_GetLastFunction___(void * jarg1) {
  void * jresult ;
  LLVMModuleRef arg1 ;
  LLVMValueRef result;
  
  arg1 = (LLVMModuleRef)jarg1; 
  result = LLVMGetLastFunction(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SwiggedfLLVM_GetNextFunction___(void * jarg1) {
  void * jresult ;
  LLVMValueRef arg1 ;
  LLVMValueRef result;
  
  arg1 = (LLVMValueRef)jarg1; 
  result = LLVMGetNextFunction(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SwiggedfLLVM_GetPreviousFunction___(void * jarg1) {
  void * jresult ;
  LLVMValueRef arg1 ;
  LLVMValueRef result;
  
  arg1 = (LLVMValueRef)jarg1; 
  result = LLVMGetPreviousFunction(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_SwiggedfLLVM_GetTypeKind___(void * jarg1) {
  int jresult ;
  LLVMTypeRef arg1 ;
  LLVMTypeKind result;
  
  arg1 = (LLVMTypeRef)jarg1; 
  result = (LLVMTypeKind)LLVMGetTypeKind(arg1);
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_SwiggedfLLVM_TypeIsSized___(void * jarg1) {
  unsigned int jresult ;
  LLVMTypeRef arg1 ;
  LLVMBool result;
  
  arg1 = (LLVMTypeRef)jarg1; 
  result = (LLVMBool)LLVMTypeIsSized(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SwiggedfLLVM_GetTypeContext___(void * jarg1) {
  void * jresult ;
  LLVMTypeRef arg1 ;
  LLVMContextRef result;
  
  arg1 = (LLVMTypeRef)jarg1; 
  result = LLVMGetTypeContext(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_SwiggedfLLVM_DumpType___(void * jarg1) {
  LLVMTypeRef arg1 ;
  
  arg1 = (LLVMTypeRef)jarg1; 
  LLVMDumpType(arg1);
}


SWIGEXPORT char * SWIGSTDCALL CSharp_SwiggedfLLVM_PrintTypeToString___(void * jarg1) {
  char * jresult ;
  LLVMTypeRef arg1 ;
  char *result = 0 ;
  
  arg1 = (LLVMTypeRef)jarg1; 
  result = (char *)LLVMPrintTypeToString(arg1);
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SwiggedfLLVM_Int1TypeInContext___(void * jarg1) {
  void * jresult ;
  LLVMContextRef arg1 ;
  LLVMTypeRef result;
  
  arg1 = (LLVMContextRef)jarg1; 
  result = LLVMInt1TypeInContext(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SwiggedfLLVM_Int8TypeInContext___(void * jarg1) {
  void * jresult ;
  LLVMContextRef arg1 ;
  LLVMTypeRef result;
  
  arg1 = (LLVMContextRef)jarg1; 
  result = LLVMInt8TypeInContext(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SwiggedfLLVM_Int16TypeInContext___(void * jarg1) {
  void * jresult ;
  LLVMContextRef arg1 ;
  LLVMTypeRef result;
  
  arg1 = (LLVMContextRef)jarg1; 
  result = LLVMInt16TypeInContext(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SwiggedfLLVM_Int32TypeInContext___(void * jarg1) {
  void * jresult ;
  LLVMContextRef arg1 ;
  LLVMTypeRef result;
  
  arg1 = (LLVMContextRef)jarg1; 
  result = LLVMInt32TypeInContext(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SwiggedfLLVM_Int64TypeInContext___(void * jarg1) {
  void * jresult ;
  LLVMContextRef arg1 ;
  LLVMTypeRef result;
  
  arg1 = (LLVMContextRef)jarg1; 
  result = LLVMInt64TypeInContext(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SwiggedfLLVM_Int128TypeInContext___(void * jarg1) {
  void * jresult ;
  LLVMContextRef arg1 ;
  LLVMTypeRef result;
  
  arg1 = (LLVMContextRef)jarg1; 
  result = LLVMInt128TypeInContext(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SwiggedfLLVM_IntTypeInContext___(void * jarg1, unsigned int jarg2) {
  void * jresult ;
  LLVMContextRef arg1 ;
  unsigned int arg2 ;
  LLVMTypeRef result;
  
  arg1 = (LLVMContextRef)jarg1; 
  arg2 = (unsigned int)jarg2; 
  result = LLVMIntTypeInContext(arg1,arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SwiggedfLLVM_Int1Type___() {
  void * jresult ;
  LLVMTypeRef result;
  
  result = LLVMInt1Type();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SwiggedfLLVM_Int8Type___() {
  void * jresult ;
  LLVMTypeRef result;
  
  result = LLVMInt8Type();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SwiggedfLLVM_Int16Type___() {
  void * jresult ;
  LLVMTypeRef result;
  
  result = LLVMInt16Type();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SwiggedfLLVM_Int32Type___() {
  void * jresult ;
  LLVMTypeRef result;
  
  result = LLVMInt32Type();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SwiggedfLLVM_Int64Type___() {
  void * jresult ;
  LLVMTypeRef result;
  
  result = LLVMInt64Type();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SwiggedfLLVM_Int128Type___() {
  void * jresult ;
  LLVMTypeRef result;
  
  result = LLVMInt128Type();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SwiggedfLLVM_IntType___(unsigned int jarg1) {
  void * jresult ;
  unsigned int arg1 ;
  LLVMTypeRef result;
  
  arg1 = (unsigned int)jarg1; 
  result = LLVMIntType(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_SwiggedfLLVM_GetIntTypeWidth___(void * jarg1) {
  unsigned int jresult ;
  LLVMTypeRef arg1 ;
  unsigned int result;
  
  arg1 = (LLVMTypeRef)jarg1; 
  result = (unsigned int)LLVMGetIntTypeWidth(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SwiggedfLLVM_HalfTypeInContext___(void * jarg1) {
  void * jresult ;
  LLVMContextRef arg1 ;
  LLVMTypeRef result;
  
  arg1 = (LLVMContextRef)jarg1; 
  result = LLVMHalfTypeInContext(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SwiggedfLLVM_FloatTypeInContext___(void * jarg1) {
  void * jresult ;
  LLVMContextRef arg1 ;
  LLVMTypeRef result;
  
  arg1 = (LLVMContextRef)jarg1; 
  result = LLVMFloatTypeInContext(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SwiggedfLLVM_DoubleTypeInContext___(void * jarg1) {
  void * jresult ;
  LLVMContextRef arg1 ;
  LLVMTypeRef result;
  
  arg1 = (LLVMContextRef)jarg1; 
  result = LLVMDoubleTypeInContext(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SwiggedfLLVM_X86FP80TypeInContext___(void * jarg1) {
  void * jresult ;
  LLVMContextRef arg1 ;
  LLVMTypeRef result;
  
  arg1 = (LLVMContextRef)jarg1; 
  result = LLVMX86FP80TypeInContext(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SwiggedfLLVM_FP128TypeInContext___(void * jarg1) {
  void * jresult ;
  LLVMContextRef arg1 ;
  LLVMTypeRef result;
  
  arg1 = (LLVMContextRef)jarg1; 
  result = LLVMFP128TypeInContext(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SwiggedfLLVM_PPCFP128TypeInContext___(void * jarg1) {
  void * jresult ;
  LLVMContextRef arg1 ;
  LLVMTypeRef result;
  
  arg1 = (LLVMContextRef)jarg1; 
  result = LLVMPPCFP128TypeInContext(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SwiggedfLLVM_HalfType___() {
  void * jresult ;
  LLVMTypeRef result;
  
  result = LLVMHalfType();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SwiggedfLLVM_FloatType___() {
  void * jresult ;
  LLVMTypeRef result;
  
  result = LLVMFloatType();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SwiggedfLLVM_DoubleType___() {
  void * jresult ;
  LLVMTypeRef result;
  
  result = LLVMDoubleType();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SwiggedfLLVM_X86FP80Type___() {
  void * jresult ;
  LLVMTypeRef result;
  
  result = LLVMX86FP80Type();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SwiggedfLLVM_FP128Type___() {
  void * jresult ;
  LLVMTypeRef result;
  
  result = LLVMFP128Type();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SwiggedfLLVM_PPCFP128Type___() {
  void * jresult ;
  LLVMTypeRef result;
  
  result = LLVMPPCFP128Type();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SwiggedfLLVM_FunctionType___(void * jarg1, void* arg2_data, unsigned int jarg2, unsigned int jarg4) {
  void * jresult ;
  LLVMTypeRef arg1 ;
  LLVMTypeRef *arg2 = (LLVMTypeRef *) 0 ;
  unsigned int arg3 ;
  LLVMBool arg4 ;
  LLVMTypeRef result;
  
  arg1 = (LLVMTypeRef)jarg1; 
  arg2 = (LLVMTypeRef*)arg2_data; arg3 = jarg2;
  arg4 = jarg4 ? true : false; 
  result = LLVMFunctionType(arg1,arg2,arg3,arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_SwiggedfLLVM_IsFunctionVarArg___(void * jarg1) {
  unsigned int jresult ;
  LLVMTypeRef arg1 ;
  LLVMBool result;
  
  arg1 = (LLVMTypeRef)jarg1; 
  result = (LLVMBool)LLVMIsFunctionVarArg(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SwiggedfLLVM_GetReturnType___(void * jarg1) {
  void * jresult ;
  LLVMTypeRef arg1 ;
  LLVMTypeRef result;
  
  arg1 = (LLVMTypeRef)jarg1; 
  result = LLVMGetReturnType(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_SwiggedfLLVM_CountParamTypes___(void * jarg1) {
  unsigned int jresult ;
  LLVMTypeRef arg1 ;
  unsigned int result;
  
  arg1 = (LLVMTypeRef)jarg1; 
  result = (unsigned int)LLVMCountParamTypes(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_SwiggedfLLVM_GetParamTypes___(void * jarg1, void * jarg2) {
  LLVMTypeRef arg1 ;
  LLVMTypeRef *arg2 = (LLVMTypeRef *) 0 ;
  
  arg1 = (LLVMTypeRef)jarg1; 
  arg2 = (LLVMTypeRef *)jarg2; 
  LLVMGetParamTypes(arg1,arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SwiggedfLLVM_StructTypeInContext___(void * jarg1, void* arg2_data, unsigned int jarg2, unsigned int jarg4) {
  void * jresult ;
  LLVMContextRef arg1 ;
  LLVMTypeRef *arg2 = (LLVMTypeRef *) 0 ;
  unsigned int arg3 ;
  LLVMBool arg4 ;
  LLVMTypeRef result;
  
  arg1 = (LLVMContextRef)jarg1; 
  arg2 = (LLVMTypeRef*)arg2_data; arg3 = jarg2;
  arg4 = jarg4 ? true : false; 
  result = LLVMStructTypeInContext(arg1,arg2,arg3,arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SwiggedfLLVM_StructType___(void* arg1_data, unsigned int jarg1, unsigned int jarg3) {
  void * jresult ;
  LLVMTypeRef *arg1 = (LLVMTypeRef *) 0 ;
  unsigned int arg2 ;
  LLVMBool arg3 ;
  LLVMTypeRef result;
  
  arg1 = (LLVMTypeRef*)arg1_data; arg2 = jarg1;
  arg3 = jarg3 ? true : false; 
  result = LLVMStructType(arg1,arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SwiggedfLLVM_StructCreateNamed___(void * jarg1, char * jarg2) {
  void * jresult ;
  LLVMContextRef arg1 ;
  char *arg2 = (char *) 0 ;
  LLVMTypeRef result;
  
  arg1 = (LLVMContextRef)jarg1; 
  arg2 = (char *)jarg2; 
  result = LLVMStructCreateNamed(arg1,(char const *)arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_SwiggedfLLVM_GetStructName___(void * jarg1) {
  char * jresult ;
  LLVMTypeRef arg1 ;
  char *result = 0 ;
  
  arg1 = (LLVMTypeRef)jarg1; 
  result = (char *)LLVMGetStructName(arg1);
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_SwiggedfLLVM_StructSetBody___(void * jarg1, void* arg2_data, unsigned int jarg2, unsigned int jarg4) {
  LLVMTypeRef arg1 ;
  LLVMTypeRef *arg2 = (LLVMTypeRef *) 0 ;
  unsigned int arg3 ;
  LLVMBool arg4 ;
  
  arg1 = (LLVMTypeRef)jarg1; 
  arg2 = (LLVMTypeRef*)arg2_data; arg3 = jarg2;
  arg4 = jarg4 ? true : false; 
  LLVMStructSetBody(arg1,arg2,arg3,arg4);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_SwiggedfLLVM_CountStructElementTypes___(void * jarg1) {
  unsigned int jresult ;
  LLVMTypeRef arg1 ;
  unsigned int result;
  
  arg1 = (LLVMTypeRef)jarg1; 
  result = (unsigned int)LLVMCountStructElementTypes(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_SwiggedfLLVM_GetStructElementTypes___(void * jarg1, void * jarg2) {
  LLVMTypeRef arg1 ;
  LLVMTypeRef *arg2 = (LLVMTypeRef *) 0 ;
  
  arg1 = (LLVMTypeRef)jarg1; 
  arg2 = (LLVMTypeRef *)jarg2; 
  LLVMGetStructElementTypes(arg1,arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SwiggedfLLVM_StructGetTypeAtIndex___(void * jarg1, unsigned int jarg2) {
  void * jresult ;
  LLVMTypeRef arg1 ;
  unsigned int arg2 ;
  LLVMTypeRef result;
  
  arg1 = (LLVMTypeRef)jarg1; 
  arg2 = (unsigned int)jarg2; 
  result = LLVMStructGetTypeAtIndex(arg1,arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_SwiggedfLLVM_IsPackedStruct___(void * jarg1) {
  unsigned int jresult ;
  LLVMTypeRef arg1 ;
  LLVMBool result;
  
  arg1 = (LLVMTypeRef)jarg1; 
  result = (LLVMBool)LLVMIsPackedStruct(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_SwiggedfLLVM_IsOpaqueStruct___(void * jarg1) {
  unsigned int jresult ;
  LLVMTypeRef arg1 ;
  LLVMBool result;
  
  arg1 = (LLVMTypeRef)jarg1; 
  result = (LLVMBool)LLVMIsOpaqueStruct(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SwiggedfLLVM_GetElementType___(void * jarg1) {
  void * jresult ;
  LLVMTypeRef arg1 ;
  LLVMTypeRef result;
  
  arg1 = (LLVMTypeRef)jarg1; 
  result = LLVMGetElementType(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SwiggedfLLVM_ArrayType___(void * jarg1, unsigned int jarg2) {
  void * jresult ;
  LLVMTypeRef arg1 ;
  unsigned int arg2 ;
  LLVMTypeRef result;
  
  arg1 = (LLVMTypeRef)jarg1; 
  arg2 = (unsigned int)jarg2; 
  result = LLVMArrayType(arg1,arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_SwiggedfLLVM_GetArrayLength___(void * jarg1) {
  unsigned int jresult ;
  LLVMTypeRef arg1 ;
  unsigned int result;
  
  arg1 = (LLVMTypeRef)jarg1; 
  result = (unsigned int)LLVMGetArrayLength(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SwiggedfLLVM_PointerType___(void * jarg1, unsigned int jarg2) {
  void * jresult ;
  LLVMTypeRef arg1 ;
  unsigned int arg2 ;
  LLVMTypeRef result;
  
  arg1 = (LLVMTypeRef)jarg1; 
  arg2 = (unsigned int)jarg2; 
  result = LLVMPointerType(arg1,arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_SwiggedfLLVM_GetPointerAddressSpace___(void * jarg1) {
  unsigned int jresult ;
  LLVMTypeRef arg1 ;
  unsigned int result;
  
  arg1 = (LLVMTypeRef)jarg1; 
  result = (unsigned int)LLVMGetPointerAddressSpace(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SwiggedfLLVM_VectorType___(void * jarg1, unsigned int jarg2) {
  void * jresult ;
  LLVMTypeRef arg1 ;
  unsigned int arg2 ;
  LLVMTypeRef result;
  
  arg1 = (LLVMTypeRef)jarg1; 
  arg2 = (unsigned int)jarg2; 
  result = LLVMVectorType(arg1,arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_SwiggedfLLVM_GetVectorSize___(void * jarg1) {
  unsigned int jresult ;
  LLVMTypeRef arg1 ;
  unsigned int result;
  
  arg1 = (LLVMTypeRef)jarg1; 
  result = (unsigned int)LLVMGetVectorSize(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SwiggedfLLVM_VoidTypeInContext___(void * jarg1) {
  void * jresult ;
  LLVMContextRef arg1 ;
  LLVMTypeRef result;
  
  arg1 = (LLVMContextRef)jarg1; 
  result = LLVMVoidTypeInContext(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SwiggedfLLVM_LabelTypeInContext___(void * jarg1) {
  void * jresult ;
  LLVMContextRef arg1 ;
  LLVMTypeRef result;
  
  arg1 = (LLVMContextRef)jarg1; 
  result = LLVMLabelTypeInContext(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SwiggedfLLVM_X86MMXTypeInContext___(void * jarg1) {
  void * jresult ;
  LLVMContextRef arg1 ;
  LLVMTypeRef result;
  
  arg1 = (LLVMContextRef)jarg1; 
  result = LLVMX86MMXTypeInContext(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SwiggedfLLVM_VoidType___() {
  void * jresult ;
  LLVMTypeRef result;
  
  result = LLVMVoidType();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SwiggedfLLVM_LabelType___() {
  void * jresult ;
  LLVMTypeRef result;
  
  result = LLVMLabelType();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SwiggedfLLVM_X86MMXType___() {
  void * jresult ;
  LLVMTypeRef result;
  
  result = LLVMX86MMXType();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SwiggedfLLVM_TypeOf___(void * jarg1) {
  void * jresult ;
  LLVMValueRef arg1 ;
  LLVMTypeRef result;
  
  arg1 = (LLVMValueRef)jarg1; 
  result = LLVMTypeOf(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_SwiggedfLLVM_GetValueKind___(void * jarg1) {
  int jresult ;
  LLVMValueRef arg1 ;
  LLVMValueKind result;
  
  arg1 = (LLVMValueRef)jarg1; 
  result = (LLVMValueKind)LLVMGetValueKind(arg1);
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_SwiggedfLLVM_GetValueName___(void * jarg1) {
  char * jresult ;
  LLVMValueRef arg1 ;
  char *result = 0 ;
  
  arg1 = (LLVMValueRef)jarg1; 
  result = (char *)LLVMGetValueName(arg1);
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_SwiggedfLLVM_SetValueName___(void * jarg1, char * jarg2) {
  LLVMValueRef arg1 ;
  char *arg2 = (char *) 0 ;
  
  arg1 = (LLVMValueRef)jarg1; 
  arg2 = (char *)jarg2; 
  LLVMSetValueName(arg1,(char const *)arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_SwiggedfLLVM_DumpValue___(void * jarg1) {
  LLVMValueRef arg1 ;
  
  arg1 = (LLVMValueRef)jarg1; 
  LLVMDumpValue(arg1);
}


SWIGEXPORT char * SWIGSTDCALL CSharp_SwiggedfLLVM_PrintValueToString___(void * jarg1) {
  char * jresult ;
  LLVMValueRef arg1 ;
  char *result = 0 ;
  
  arg1 = (LLVMValueRef)jarg1; 
  result = (char *)LLVMPrintValueToString(arg1);
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_SwiggedfLLVM_ReplaceAllUsesWith___(void * jarg1, void * jarg2) {
  LLVMValueRef arg1 ;
  LLVMValueRef arg2 ;
  
  arg1 = (LLVMValueRef)jarg1; 
  arg2 = (LLVMValueRef)jarg2; 
  LLVMReplaceAllUsesWith(arg1,arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_SwiggedfLLVM_IsConstant___(void * jarg1) {
  unsigned int jresult ;
  LLVMValueRef arg1 ;
  LLVMBool result;
  
  arg1 = (LLVMValueRef)jarg1; 
  result = (LLVMBool)LLVMIsConstant(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_SwiggedfLLVM_IsUndef___(void * jarg1) {
  unsigned int jresult ;
  LLVMValueRef arg1 ;
  LLVMBool result;
  
  arg1 = (LLVMValueRef)jarg1; 
  result = (LLVMBool)LLVMIsUndef(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SwiggedfLLVM_IsAArgument___(void * jarg1) {
  void * jresult ;
  LLVMValueRef arg1 ;
  LLVMValueRef result;
  
  arg1 = (LLVMValueRef)jarg1; 
  result = LLVMIsAArgument(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SwiggedfLLVM_IsABasicBlock___(void * jarg1) {
  void * jresult ;
  LLVMValueRef arg1 ;
  LLVMValueRef result;
  
  arg1 = (LLVMValueRef)jarg1; 
  result = LLVMIsABasicBlock(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SwiggedfLLVM_IsAInlineAsm___(void * jarg1) {
  void * jresult ;
  LLVMValueRef arg1 ;
  LLVMValueRef result;
  
  arg1 = (LLVMValueRef)jarg1; 
  result = LLVMIsAInlineAsm(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SwiggedfLLVM_IsAUser___(void * jarg1) {
  void * jresult ;
  LLVMValueRef arg1 ;
  LLVMValueRef result;
  
  arg1 = (LLVMValueRef)jarg1; 
  result = LLVMIsAUser(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SwiggedfLLVM_IsAConstant___(void * jarg1) {
  void * jresult ;
  LLVMValueRef arg1 ;
  LLVMValueRef result;
  
  arg1 = (LLVMValueRef)jarg1; 
  result = LLVMIsAConstant(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SwiggedfLLVM_IsABlockAddress___(void * jarg1) {
  void * jresult ;
  LLVMValueRef arg1 ;
  LLVMValueRef result;
  
  arg1 = (LLVMValueRef)jarg1; 
  result = LLVMIsABlockAddress(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SwiggedfLLVM_IsAConstantAggregateZero___(void * jarg1) {
  void * jresult ;
  LLVMValueRef arg1 ;
  LLVMValueRef result;
  
  arg1 = (LLVMValueRef)jarg1; 
  result = LLVMIsAConstantAggregateZero(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SwiggedfLLVM_IsAConstantArray___(void * jarg1) {
  void * jresult ;
  LLVMValueRef arg1 ;
  LLVMValueRef result;
  
  arg1 = (LLVMValueRef)jarg1; 
  result = LLVMIsAConstantArray(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SwiggedfLLVM_IsAConstantDataSequential___(void * jarg1) {
  void * jresult ;
  LLVMValueRef arg1 ;
  LLVMValueRef result;
  
  arg1 = (LLVMValueRef)jarg1; 
  result = LLVMIsAConstantDataSequential(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SwiggedfLLVM_IsAConstantDataArray___(void * jarg1) {
  void * jresult ;
  LLVMValueRef arg1 ;
  LLVMValueRef result;
  
  arg1 = (LLVMValueRef)jarg1; 
  result = LLVMIsAConstantDataArray(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SwiggedfLLVM_IsAConstantDataVector___(void * jarg1) {
  void * jresult ;
  LLVMValueRef arg1 ;
  LLVMValueRef result;
  
  arg1 = (LLVMValueRef)jarg1; 
  result = LLVMIsAConstantDataVector(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SwiggedfLLVM_IsAConstantExpr___(void * jarg1) {
  void * jresult ;
  LLVMValueRef arg1 ;
  LLVMValueRef result;
  
  arg1 = (LLVMValueRef)jarg1; 
  result = LLVMIsAConstantExpr(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SwiggedfLLVM_IsAConstantFP___(void * jarg1) {
  void * jresult ;
  LLVMValueRef arg1 ;
  LLVMValueRef result;
  
  arg1 = (LLVMValueRef)jarg1; 
  result = LLVMIsAConstantFP(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SwiggedfLLVM_IsAConstantInt___(void * jarg1) {
  void * jresult ;
  LLVMValueRef arg1 ;
  LLVMValueRef result;
  
  arg1 = (LLVMValueRef)jarg1; 
  result = LLVMIsAConstantInt(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SwiggedfLLVM_IsAConstantPointerNull___(void * jarg1) {
  void * jresult ;
  LLVMValueRef arg1 ;
  LLVMValueRef result;
  
  arg1 = (LLVMValueRef)jarg1; 
  result = LLVMIsAConstantPointerNull(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SwiggedfLLVM_IsAConstantStruct___(void * jarg1) {
  void * jresult ;
  LLVMValueRef arg1 ;
  LLVMValueRef result;
  
  arg1 = (LLVMValueRef)jarg1; 
  result = LLVMIsAConstantStruct(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SwiggedfLLVM_IsAConstantTokenNone___(void * jarg1) {
  void * jresult ;
  LLVMValueRef arg1 ;
  LLVMValueRef result;
  
  arg1 = (LLVMValueRef)jarg1; 
  result = LLVMIsAConstantTokenNone(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SwiggedfLLVM_IsAConstantVector___(void * jarg1) {
  void * jresult ;
  LLVMValueRef arg1 ;
  LLVMValueRef result;
  
  arg1 = (LLVMValueRef)jarg1; 
  result = LLVMIsAConstantVector(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SwiggedfLLVM_IsAGlobalValue___(void * jarg1) {
  void * jresult ;
  LLVMValueRef arg1 ;
  LLVMValueRef result;
  
  arg1 = (LLVMValueRef)jarg1; 
  result = LLVMIsAGlobalValue(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SwiggedfLLVM_IsAGlobalAlias___(void * jarg1) {
  void * jresult ;
  LLVMValueRef arg1 ;
  LLVMValueRef result;
  
  arg1 = (LLVMValueRef)jarg1; 
  result = LLVMIsAGlobalAlias(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SwiggedfLLVM_IsAGlobalObject___(void * jarg1) {
  void * jresult ;
  LLVMValueRef arg1 ;
  LLVMValueRef result;
  
  arg1 = (LLVMValueRef)jarg1; 
  result = LLVMIsAGlobalObject(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SwiggedfLLVM_IsAFunction___(void * jarg1) {
  void * jresult ;
  LLVMValueRef arg1 ;
  LLVMValueRef result;
  
  arg1 = (LLVMValueRef)jarg1; 
  result = LLVMIsAFunction(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SwiggedfLLVM_IsAGlobalVariable___(void * jarg1) {
  void * jresult ;
  LLVMValueRef arg1 ;
  LLVMValueRef result;
  
  arg1 = (LLVMValueRef)jarg1; 
  result = LLVMIsAGlobalVariable(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SwiggedfLLVM_IsAUndefValue___(void * jarg1) {
  void * jresult ;
  LLVMValueRef arg1 ;
  LLVMValueRef result;
  
  arg1 = (LLVMValueRef)jarg1; 
  result = LLVMIsAUndefValue(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SwiggedfLLVM_IsAInstruction___(void * jarg1) {
  void * jresult ;
  LLVMValueRef arg1 ;
  LLVMValueRef result;
  
  arg1 = (LLVMValueRef)jarg1; 
  result = LLVMIsAInstruction(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SwiggedfLLVM_IsABinaryOperator___(void * jarg1) {
  void * jresult ;
  LLVMValueRef arg1 ;
  LLVMValueRef result;
  
  arg1 = (LLVMValueRef)jarg1; 
  result = LLVMIsABinaryOperator(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SwiggedfLLVM_IsACallInst___(void * jarg1) {
  void * jresult ;
  LLVMValueRef arg1 ;
  LLVMValueRef result;
  
  arg1 = (LLVMValueRef)jarg1; 
  result = LLVMIsACallInst(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SwiggedfLLVM_IsAIntrinsicInst___(void * jarg1) {
  void * jresult ;
  LLVMValueRef arg1 ;
  LLVMValueRef result;
  
  arg1 = (LLVMValueRef)jarg1; 
  result = LLVMIsAIntrinsicInst(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SwiggedfLLVM_IsADbgInfoIntrinsic___(void * jarg1) {
  void * jresult ;
  LLVMValueRef arg1 ;
  LLVMValueRef result;
  
  arg1 = (LLVMValueRef)jarg1; 
  result = LLVMIsADbgInfoIntrinsic(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SwiggedfLLVM_IsADbgDeclareInst___(void * jarg1) {
  void * jresult ;
  LLVMValueRef arg1 ;
  LLVMValueRef result;
  
  arg1 = (LLVMValueRef)jarg1; 
  result = LLVMIsADbgDeclareInst(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SwiggedfLLVM_IsAMemIntrinsic___(void * jarg1) {
  void * jresult ;
  LLVMValueRef arg1 ;
  LLVMValueRef result;
  
  arg1 = (LLVMValueRef)jarg1; 
  result = LLVMIsAMemIntrinsic(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SwiggedfLLVM_IsAMemCpyInst___(void * jarg1) {
  void * jresult ;
  LLVMValueRef arg1 ;
  LLVMValueRef result;
  
  arg1 = (LLVMValueRef)jarg1; 
  result = LLVMIsAMemCpyInst(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SwiggedfLLVM_IsAMemMoveInst___(void * jarg1) {
  void * jresult ;
  LLVMValueRef arg1 ;
  LLVMValueRef result;
  
  arg1 = (LLVMValueRef)jarg1; 
  result = LLVMIsAMemMoveInst(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SwiggedfLLVM_IsAMemSetInst___(void * jarg1) {
  void * jresult ;
  LLVMValueRef arg1 ;
  LLVMValueRef result;
  
  arg1 = (LLVMValueRef)jarg1; 
  result = LLVMIsAMemSetInst(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SwiggedfLLVM_IsACmpInst___(void * jarg1) {
  void * jresult ;
  LLVMValueRef arg1 ;
  LLVMValueRef result;
  
  arg1 = (LLVMValueRef)jarg1; 
  result = LLVMIsACmpInst(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SwiggedfLLVM_IsAFCmpInst___(void * jarg1) {
  void * jresult ;
  LLVMValueRef arg1 ;
  LLVMValueRef result;
  
  arg1 = (LLVMValueRef)jarg1; 
  result = LLVMIsAFCmpInst(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SwiggedfLLVM_IsAICmpInst___(void * jarg1) {
  void * jresult ;
  LLVMValueRef arg1 ;
  LLVMValueRef result;
  
  arg1 = (LLVMValueRef)jarg1; 
  result = LLVMIsAICmpInst(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SwiggedfLLVM_IsAExtractElementInst___(void * jarg1) {
  void * jresult ;
  LLVMValueRef arg1 ;
  LLVMValueRef result;
  
  arg1 = (LLVMValueRef)jarg1; 
  result = LLVMIsAExtractElementInst(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SwiggedfLLVM_IsAGetElementPtrInst___(void * jarg1) {
  void * jresult ;
  LLVMValueRef arg1 ;
  LLVMValueRef result;
  
  arg1 = (LLVMValueRef)jarg1; 
  result = LLVMIsAGetElementPtrInst(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SwiggedfLLVM_IsAInsertElementInst___(void * jarg1) {
  void * jresult ;
  LLVMValueRef arg1 ;
  LLVMValueRef result;
  
  arg1 = (LLVMValueRef)jarg1; 
  result = LLVMIsAInsertElementInst(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SwiggedfLLVM_IsAInsertValueInst___(void * jarg1) {
  void * jresult ;
  LLVMValueRef arg1 ;
  LLVMValueRef result;
  
  arg1 = (LLVMValueRef)jarg1; 
  result = LLVMIsAInsertValueInst(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SwiggedfLLVM_IsALandingPadInst___(void * jarg1) {
  void * jresult ;
  LLVMValueRef arg1 ;
  LLVMValueRef result;
  
  arg1 = (LLVMValueRef)jarg1; 
  result = LLVMIsALandingPadInst(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SwiggedfLLVM_IsAPHINode___(void * jarg1) {
  void * jresult ;
  LLVMValueRef arg1 ;
  LLVMValueRef result;
  
  arg1 = (LLVMValueRef)jarg1; 
  result = LLVMIsAPHINode(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SwiggedfLLVM_IsASelectInst___(void * jarg1) {
  void * jresult ;
  LLVMValueRef arg1 ;
  LLVMValueRef result;
  
  arg1 = (LLVMValueRef)jarg1; 
  result = LLVMIsASelectInst(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SwiggedfLLVM_IsAShuffleVectorInst___(void * jarg1) {
  void * jresult ;
  LLVMValueRef arg1 ;
  LLVMValueRef result;
  
  arg1 = (LLVMValueRef)jarg1; 
  result = LLVMIsAShuffleVectorInst(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SwiggedfLLVM_IsAStoreInst___(void * jarg1) {
  void * jresult ;
  LLVMValueRef arg1 ;
  LLVMValueRef result;
  
  arg1 = (LLVMValueRef)jarg1; 
  result = LLVMIsAStoreInst(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SwiggedfLLVM_IsATerminatorInst___(void * jarg1) {
  void * jresult ;
  LLVMValueRef arg1 ;
  LLVMValueRef result;
  
  arg1 = (LLVMValueRef)jarg1; 
  result = LLVMIsATerminatorInst(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SwiggedfLLVM_IsABranchInst___(void * jarg1) {
  void * jresult ;
  LLVMValueRef arg1 ;
  LLVMValueRef result;
  
  arg1 = (LLVMValueRef)jarg1; 
  result = LLVMIsABranchInst(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SwiggedfLLVM_IsAIndirectBrInst___(void * jarg1) {
  void * jresult ;
  LLVMValueRef arg1 ;
  LLVMValueRef result;
  
  arg1 = (LLVMValueRef)jarg1; 
  result = LLVMIsAIndirectBrInst(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SwiggedfLLVM_IsAInvokeInst___(void * jarg1) {
  void * jresult ;
  LLVMValueRef arg1 ;
  LLVMValueRef result;
  
  arg1 = (LLVMValueRef)jarg1; 
  result = LLVMIsAInvokeInst(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SwiggedfLLVM_IsAReturnInst___(void * jarg1) {
  void * jresult ;
  LLVMValueRef arg1 ;
  LLVMValueRef result;
  
  arg1 = (LLVMValueRef)jarg1; 
  result = LLVMIsAReturnInst(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SwiggedfLLVM_IsASwitchInst___(void * jarg1) {
  void * jresult ;
  LLVMValueRef arg1 ;
  LLVMValueRef result;
  
  arg1 = (LLVMValueRef)jarg1; 
  result = LLVMIsASwitchInst(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SwiggedfLLVM_IsAUnreachableInst___(void * jarg1) {
  void * jresult ;
  LLVMValueRef arg1 ;
  LLVMValueRef result;
  
  arg1 = (LLVMValueRef)jarg1; 
  result = LLVMIsAUnreachableInst(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SwiggedfLLVM_IsAResumeInst___(void * jarg1) {
  void * jresult ;
  LLVMValueRef arg1 ;
  LLVMValueRef result;
  
  arg1 = (LLVMValueRef)jarg1; 
  result = LLVMIsAResumeInst(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SwiggedfLLVM_IsACleanupReturnInst___(void * jarg1) {
  void * jresult ;
  LLVMValueRef arg1 ;
  LLVMValueRef result;
  
  arg1 = (LLVMValueRef)jarg1; 
  result = LLVMIsACleanupReturnInst(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SwiggedfLLVM_IsACatchReturnInst___(void * jarg1) {
  void * jresult ;
  LLVMValueRef arg1 ;
  LLVMValueRef result;
  
  arg1 = (LLVMValueRef)jarg1; 
  result = LLVMIsACatchReturnInst(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SwiggedfLLVM_IsAFuncletPadInst___(void * jarg1) {
  void * jresult ;
  LLVMValueRef arg1 ;
  LLVMValueRef result;
  
  arg1 = (LLVMValueRef)jarg1; 
  result = LLVMIsAFuncletPadInst(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SwiggedfLLVM_IsACatchPadInst___(void * jarg1) {
  void * jresult ;
  LLVMValueRef arg1 ;
  LLVMValueRef result;
  
  arg1 = (LLVMValueRef)jarg1; 
  result = LLVMIsACatchPadInst(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SwiggedfLLVM_IsACleanupPadInst___(void * jarg1) {
  void * jresult ;
  LLVMValueRef arg1 ;
  LLVMValueRef result;
  
  arg1 = (LLVMValueRef)jarg1; 
  result = LLVMIsACleanupPadInst(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SwiggedfLLVM_IsAUnaryInstruction___(void * jarg1) {
  void * jresult ;
  LLVMValueRef arg1 ;
  LLVMValueRef result;
  
  arg1 = (LLVMValueRef)jarg1; 
  result = LLVMIsAUnaryInstruction(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SwiggedfLLVM_IsAAllocaInst___(void * jarg1) {
  void * jresult ;
  LLVMValueRef arg1 ;
  LLVMValueRef result;
  
  arg1 = (LLVMValueRef)jarg1; 
  result = LLVMIsAAllocaInst(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SwiggedfLLVM_IsACastInst___(void * jarg1) {
  void * jresult ;
  LLVMValueRef arg1 ;
  LLVMValueRef result;
  
  arg1 = (LLVMValueRef)jarg1; 
  result = LLVMIsACastInst(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SwiggedfLLVM_IsAAddrSpaceCastInst___(void * jarg1) {
  void * jresult ;
  LLVMValueRef arg1 ;
  LLVMValueRef result;
  
  arg1 = (LLVMValueRef)jarg1; 
  result = LLVMIsAAddrSpaceCastInst(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SwiggedfLLVM_IsABitCastInst___(void * jarg1) {
  void * jresult ;
  LLVMValueRef arg1 ;
  LLVMValueRef result;
  
  arg1 = (LLVMValueRef)jarg1; 
  result = LLVMIsABitCastInst(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SwiggedfLLVM_IsAFPExtInst___(void * jarg1) {
  void * jresult ;
  LLVMValueRef arg1 ;
  LLVMValueRef result;
  
  arg1 = (LLVMValueRef)jarg1; 
  result = LLVMIsAFPExtInst(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SwiggedfLLVM_IsAFPToSIInst___(void * jarg1) {
  void * jresult ;
  LLVMValueRef arg1 ;
  LLVMValueRef result;
  
  arg1 = (LLVMValueRef)jarg1; 
  result = LLVMIsAFPToSIInst(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SwiggedfLLVM_IsAFPToUIInst___(void * jarg1) {
  void * jresult ;
  LLVMValueRef arg1 ;
  LLVMValueRef result;
  
  arg1 = (LLVMValueRef)jarg1; 
  result = LLVMIsAFPToUIInst(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SwiggedfLLVM_IsAFPTruncInst___(void * jarg1) {
  void * jresult ;
  LLVMValueRef arg1 ;
  LLVMValueRef result;
  
  arg1 = (LLVMValueRef)jarg1; 
  result = LLVMIsAFPTruncInst(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SwiggedfLLVM_IsAIntToPtrInst___(void * jarg1) {
  void * jresult ;
  LLVMValueRef arg1 ;
  LLVMValueRef result;
  
  arg1 = (LLVMValueRef)jarg1; 
  result = LLVMIsAIntToPtrInst(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SwiggedfLLVM_IsAPtrToIntInst___(void * jarg1) {
  void * jresult ;
  LLVMValueRef arg1 ;
  LLVMValueRef result;
  
  arg1 = (LLVMValueRef)jarg1; 
  result = LLVMIsAPtrToIntInst(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SwiggedfLLVM_IsASExtInst___(void * jarg1) {
  void * jresult ;
  LLVMValueRef arg1 ;
  LLVMValueRef result;
  
  arg1 = (LLVMValueRef)jarg1; 
  result = LLVMIsASExtInst(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SwiggedfLLVM_IsASIToFPInst___(void * jarg1) {
  void * jresult ;
  LLVMValueRef arg1 ;
  LLVMValueRef result;
  
  arg1 = (LLVMValueRef)jarg1; 
  result = LLVMIsASIToFPInst(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SwiggedfLLVM_IsATruncInst___(void * jarg1) {
  void * jresult ;
  LLVMValueRef arg1 ;
  LLVMValueRef result;
  
  arg1 = (LLVMValueRef)jarg1; 
  result = LLVMIsATruncInst(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SwiggedfLLVM_IsAUIToFPInst___(void * jarg1) {
  void * jresult ;
  LLVMValueRef arg1 ;
  LLVMValueRef result;
  
  arg1 = (LLVMValueRef)jarg1; 
  result = LLVMIsAUIToFPInst(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SwiggedfLLVM_IsAZExtInst___(void * jarg1) {
  void * jresult ;
  LLVMValueRef arg1 ;
  LLVMValueRef result;
  
  arg1 = (LLVMValueRef)jarg1; 
  result = LLVMIsAZExtInst(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SwiggedfLLVM_IsAExtractValueInst___(void * jarg1) {
  void * jresult ;
  LLVMValueRef arg1 ;
  LLVMValueRef result;
  
  arg1 = (LLVMValueRef)jarg1; 
  result = LLVMIsAExtractValueInst(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SwiggedfLLVM_IsALoadInst___(void * jarg1) {
  void * jresult ;
  LLVMValueRef arg1 ;
  LLVMValueRef result;
  
  arg1 = (LLVMValueRef)jarg1; 
  result = LLVMIsALoadInst(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SwiggedfLLVM_IsAVAArgInst___(void * jarg1) {
  void * jresult ;
  LLVMValueRef arg1 ;
  LLVMValueRef result;
  
  arg1 = (LLVMValueRef)jarg1; 
  result = LLVMIsAVAArgInst(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SwiggedfLLVM_IsAMDNode___(void * jarg1) {
  void * jresult ;
  LLVMValueRef arg1 ;
  LLVMValueRef result;
  
  arg1 = (LLVMValueRef)jarg1; 
  result = LLVMIsAMDNode(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SwiggedfLLVM_IsAMDString___(void * jarg1) {
  void * jresult ;
  LLVMValueRef arg1 ;
  LLVMValueRef result;
  
  arg1 = (LLVMValueRef)jarg1; 
  result = LLVMIsAMDString(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SwiggedfLLVM_GetFirstUse___(void * jarg1) {
  void * jresult ;
  LLVMValueRef arg1 ;
  LLVMUseRef result;
  
  arg1 = (LLVMValueRef)jarg1; 
  result = LLVMGetFirstUse(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SwiggedfLLVM_GetNextUse___(void * jarg1) {
  void * jresult ;
  LLVMUseRef arg1 ;
  LLVMUseRef result;
  
  arg1 = (LLVMUseRef)jarg1; 
  result = LLVMGetNextUse(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SwiggedfLLVM_GetUser___(void * jarg1) {
  void * jresult ;
  LLVMUseRef arg1 ;
  LLVMValueRef result;
  
  arg1 = (LLVMUseRef)jarg1; 
  result = LLVMGetUser(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SwiggedfLLVM_GetUsedValue___(void * jarg1) {
  void * jresult ;
  LLVMUseRef arg1 ;
  LLVMValueRef result;
  
  arg1 = (LLVMUseRef)jarg1; 
  result = LLVMGetUsedValue(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SwiggedfLLVM_GetOperand___(void * jarg1, unsigned int jarg2) {
  void * jresult ;
  LLVMValueRef arg1 ;
  unsigned int arg2 ;
  LLVMValueRef result;
  
  arg1 = (LLVMValueRef)jarg1; 
  arg2 = (unsigned int)jarg2; 
  result = LLVMGetOperand(arg1,arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SwiggedfLLVM_GetOperandUse___(void * jarg1, unsigned int jarg2) {
  void * jresult ;
  LLVMValueRef arg1 ;
  unsigned int arg2 ;
  LLVMUseRef result;
  
  arg1 = (LLVMValueRef)jarg1; 
  arg2 = (unsigned int)jarg2; 
  result = LLVMGetOperandUse(arg1,arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_SwiggedfLLVM_SetOperand___(void * jarg1, unsigned int jarg2, void * jarg3) {
  LLVMValueRef arg1 ;
  unsigned int arg2 ;
  LLVMValueRef arg3 ;
  
  arg1 = (LLVMValueRef)jarg1; 
  arg2 = (unsigned int)jarg2; 
  arg3 = (LLVMValueRef)jarg3; 
  LLVMSetOperand(arg1,arg2,arg3);
}


SWIGEXPORT int SWIGSTDCALL CSharp_SwiggedfLLVM_GetNumOperands___(void * jarg1) {
  int jresult ;
  LLVMValueRef arg1 ;
  int result;
  
  arg1 = (LLVMValueRef)jarg1; 
  result = (int)LLVMGetNumOperands(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SwiggedfLLVM_ConstNull___(void * jarg1) {
  void * jresult ;
  LLVMTypeRef arg1 ;
  LLVMValueRef result;
  
  arg1 = (LLVMTypeRef)jarg1; 
  result = LLVMConstNull(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SwiggedfLLVM_ConstAllOnes___(void * jarg1) {
  void * jresult ;
  LLVMTypeRef arg1 ;
  LLVMValueRef result;
  
  arg1 = (LLVMTypeRef)jarg1; 
  result = LLVMConstAllOnes(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SwiggedfLLVM_GetUndef___(void * jarg1) {
  void * jresult ;
  LLVMTypeRef arg1 ;
  LLVMValueRef result;
  
  arg1 = (LLVMTypeRef)jarg1; 
  result = LLVMGetUndef(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_SwiggedfLLVM_IsNull___(void * jarg1) {
  unsigned int jresult ;
  LLVMValueRef arg1 ;
  LLVMBool result;
  
  arg1 = (LLVMValueRef)jarg1; 
  result = (LLVMBool)LLVMIsNull(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SwiggedfLLVM_ConstPointerNull___(void * jarg1) {
  void * jresult ;
  LLVMTypeRef arg1 ;
  LLVMValueRef result;
  
  arg1 = (LLVMTypeRef)jarg1; 
  result = LLVMConstPointerNull(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SwiggedfLLVM_ConstInt___(void * jarg1, unsigned long long jarg2, unsigned int jarg3) {
  void * jresult ;
  LLVMTypeRef arg1 ;
  unsigned long long arg2 ;
  LLVMBool arg3 ;
  LLVMValueRef result;
  
  arg1 = (LLVMTypeRef)jarg1; 
  arg2 = (unsigned long long)jarg2; 
  arg3 = jarg3 ? true : false; 
  result = LLVMConstInt(arg1,arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SwiggedfLLVM_ConstIntOfString___(void * jarg1, char * jarg2, unsigned char jarg3) {
  void * jresult ;
  LLVMTypeRef arg1 ;
  char *arg2 = (char *) 0 ;
  uint8_t arg3 ;
  LLVMValueRef result;
  
  arg1 = (LLVMTypeRef)jarg1; 
  arg2 = (char *)jarg2; 
  arg3 = (uint8_t)jarg3; 
  result = LLVMConstIntOfString(arg1,(char const *)arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SwiggedfLLVM_ConstIntOfStringAndSize___(void * jarg1, char * jarg2, unsigned int jarg3, unsigned char jarg4) {
  void * jresult ;
  LLVMTypeRef arg1 ;
  char *arg2 = (char *) 0 ;
  unsigned int arg3 ;
  uint8_t arg4 ;
  LLVMValueRef result;
  
  arg1 = (LLVMTypeRef)jarg1; 
  arg2 = (char *)jarg2; 
  arg3 = (unsigned int)jarg3; 
  arg4 = (uint8_t)jarg4; 
  result = LLVMConstIntOfStringAndSize(arg1,(char const *)arg2,arg3,arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SwiggedfLLVM_ConstReal___(void * jarg1, double jarg2) {
  void * jresult ;
  LLVMTypeRef arg1 ;
  double arg2 ;
  LLVMValueRef result;
  
  arg1 = (LLVMTypeRef)jarg1; 
  arg2 = (double)jarg2; 
  result = LLVMConstReal(arg1,arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SwiggedfLLVM_ConstRealOfString___(void * jarg1, char * jarg2) {
  void * jresult ;
  LLVMTypeRef arg1 ;
  char *arg2 = (char *) 0 ;
  LLVMValueRef result;
  
  arg1 = (LLVMTypeRef)jarg1; 
  arg2 = (char *)jarg2; 
  result = LLVMConstRealOfString(arg1,(char const *)arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SwiggedfLLVM_ConstRealOfStringAndSize___(void * jarg1, char * jarg2, unsigned int jarg3) {
  void * jresult ;
  LLVMTypeRef arg1 ;
  char *arg2 = (char *) 0 ;
  unsigned int arg3 ;
  LLVMValueRef result;
  
  arg1 = (LLVMTypeRef)jarg1; 
  arg2 = (char *)jarg2; 
  arg3 = (unsigned int)jarg3; 
  result = LLVMConstRealOfStringAndSize(arg1,(char const *)arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned long long SWIGSTDCALL CSharp_SwiggedfLLVM_ConstIntGetZExtValue___(void * jarg1) {
  unsigned long long jresult ;
  LLVMValueRef arg1 ;
  unsigned long long result;
  
  arg1 = (LLVMValueRef)jarg1; 
  result = (unsigned long long)LLVMConstIntGetZExtValue(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT long long SWIGSTDCALL CSharp_SwiggedfLLVM_ConstIntGetSExtValue___(void * jarg1) {
  long long jresult ;
  LLVMValueRef arg1 ;
  long long result;
  
  arg1 = (LLVMValueRef)jarg1; 
  result = (long long)LLVMConstIntGetSExtValue(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_SwiggedfLLVM_ConstRealGetDouble___(void * jarg1, unsigned int * jarg2) {
  double jresult ;
  LLVMValueRef arg1 ;
  LLVMBool *arg2 = (LLVMBool *) 0 ;
  double result;
  
  arg1 = (LLVMValueRef)jarg1; 
  *jarg2 = 0; 
  arg2 = (LLVMBool *)jarg2; 
  result = (double)LLVMConstRealGetDouble(arg1,arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SwiggedfLLVM_ConstStringInContext___(void * jarg1, char * jarg2, unsigned int jarg3, unsigned int jarg4) {
  void * jresult ;
  LLVMContextRef arg1 ;
  char *arg2 = (char *) 0 ;
  unsigned int arg3 ;
  LLVMBool arg4 ;
  LLVMValueRef result;
  
  arg1 = (LLVMContextRef)jarg1; 
  arg2 = (char *)jarg2; 
  arg3 = (unsigned int)jarg3; 
  arg4 = jarg4 ? true : false; 
  result = LLVMConstStringInContext(arg1,(char const *)arg2,arg3,arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SwiggedfLLVM_ConstString___(char * jarg1, unsigned int jarg2, unsigned int jarg3) {
  void * jresult ;
  char *arg1 = (char *) 0 ;
  unsigned int arg2 ;
  LLVMBool arg3 ;
  LLVMValueRef result;
  
  arg1 = (char *)jarg1; 
  arg2 = (unsigned int)jarg2; 
  arg3 = jarg3 ? true : false; 
  result = LLVMConstString((char const *)arg1,arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_SwiggedfLLVM_IsConstantString___(void * jarg1) {
  unsigned int jresult ;
  LLVMValueRef arg1 ;
  LLVMBool result;
  
  arg1 = (LLVMValueRef)jarg1; 
  result = (LLVMBool)LLVMIsConstantString(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_SwiggedfLLVM_GetAsString___(void * jarg1, void * jarg2) {
  char * jresult ;
  LLVMValueRef arg1 ;
  size_t *arg2 = (size_t *) 0 ;
  char *result = 0 ;
  
  arg1 = (LLVMValueRef)jarg1; 
  arg2 = (size_t *)jarg2; 
  result = (char *)LLVMGetAsString(arg1,arg2);
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SwiggedfLLVM_ConstStructInContext___(void * jarg1, void* arg2_data, unsigned int jarg2, unsigned int jarg4) {
  void * jresult ;
  LLVMContextRef arg1 ;
  LLVMValueRef *arg2 = (LLVMValueRef *) 0 ;
  unsigned int arg3 ;
  LLVMBool arg4 ;
  LLVMValueRef result;
  
  arg1 = (LLVMContextRef)jarg1; 
  arg2 = (LLVMValueRef*)arg2_data; arg3 = jarg2;
  arg4 = jarg4 ? true : false; 
  result = LLVMConstStructInContext(arg1,arg2,arg3,arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SwiggedfLLVM_ConstStruct___(void* arg1_data, unsigned int jarg1, unsigned int jarg3) {
  void * jresult ;
  LLVMValueRef *arg1 = (LLVMValueRef *) 0 ;
  unsigned int arg2 ;
  LLVMBool arg3 ;
  LLVMValueRef result;
  
  arg1 = (LLVMValueRef*)arg1_data; arg2 = jarg1;
  arg3 = jarg3 ? true : false; 
  result = LLVMConstStruct(arg1,arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SwiggedfLLVM_ConstArray___(void * jarg1, void* arg2_data, unsigned int jarg2) {
  void * jresult ;
  LLVMTypeRef arg1 ;
  LLVMValueRef *arg2 = (LLVMValueRef *) 0 ;
  unsigned int arg3 ;
  LLVMValueRef result;
  
  arg1 = (LLVMTypeRef)jarg1; 
  arg2 = (LLVMValueRef*)arg2_data; arg3 = jarg2;
  result = LLVMConstArray(arg1,arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SwiggedfLLVM_ConstNamedStruct___(void * jarg1, void* arg2_data, unsigned int jarg2) {
  void * jresult ;
  LLVMTypeRef arg1 ;
  LLVMValueRef *arg2 = (LLVMValueRef *) 0 ;
  unsigned int arg3 ;
  LLVMValueRef result;
  
  arg1 = (LLVMTypeRef)jarg1; 
  arg2 = (LLVMValueRef*)arg2_data; arg3 = jarg2;
  result = LLVMConstNamedStruct(arg1,arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SwiggedfLLVM_GetElementAsConstant___(void * jarg1, unsigned int jarg2) {
  void * jresult ;
  LLVMValueRef arg1 ;
  unsigned int arg2 ;
  LLVMValueRef result;
  
  arg1 = (LLVMValueRef)jarg1; 
  arg2 = (unsigned int)jarg2; 
  result = LLVMGetElementAsConstant(arg1,arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SwiggedfLLVM_ConstVector___(void* arg1_data, unsigned int jarg1) {
  void * jresult ;
  LLVMValueRef *arg1 = (LLVMValueRef *) 0 ;
  unsigned int arg2 ;
  LLVMValueRef result;
  
  arg1 = (LLVMValueRef*)arg1_data; arg2 = jarg1;
  result = LLVMConstVector(arg1,arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_SwiggedfLLVM_GetConstOpcode___(void * jarg1) {
  int jresult ;
  LLVMValueRef arg1 ;
  LLVMOpcode result;
  
  arg1 = (LLVMValueRef)jarg1; 
  result = (LLVMOpcode)LLVMGetConstOpcode(arg1);
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SwiggedfLLVM_AlignOf___(void * jarg1) {
  void * jresult ;
  LLVMTypeRef arg1 ;
  LLVMValueRef result;
  
  arg1 = (LLVMTypeRef)jarg1; 
  result = LLVMAlignOf(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SwiggedfLLVM_SizeOf___(void * jarg1) {
  void * jresult ;
  LLVMTypeRef arg1 ;
  LLVMValueRef result;
  
  arg1 = (LLVMTypeRef)jarg1; 
  result = LLVMSizeOf(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SwiggedfLLVM_ConstNeg___(void * jarg1) {
  void * jresult ;
  LLVMValueRef arg1 ;
  LLVMValueRef result;
  
  arg1 = (LLVMValueRef)jarg1; 
  result = LLVMConstNeg(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SwiggedfLLVM_ConstNSWNeg___(void * jarg1) {
  void * jresult ;
  LLVMValueRef arg1 ;
  LLVMValueRef result;
  
  arg1 = (LLVMValueRef)jarg1; 
  result = LLVMConstNSWNeg(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SwiggedfLLVM_ConstNUWNeg___(void * jarg1) {
  void * jresult ;
  LLVMValueRef arg1 ;
  LLVMValueRef result;
  
  arg1 = (LLVMValueRef)jarg1; 
  result = LLVMConstNUWNeg(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SwiggedfLLVM_ConstFNeg___(void * jarg1) {
  void * jresult ;
  LLVMValueRef arg1 ;
  LLVMValueRef result;
  
  arg1 = (LLVMValueRef)jarg1; 
  result = LLVMConstFNeg(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SwiggedfLLVM_ConstNot___(void * jarg1) {
  void * jresult ;
  LLVMValueRef arg1 ;
  LLVMValueRef result;
  
  arg1 = (LLVMValueRef)jarg1; 
  result = LLVMConstNot(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SwiggedfLLVM_ConstAdd___(void * jarg1, void * jarg2) {
  void * jresult ;
  LLVMValueRef arg1 ;
  LLVMValueRef arg2 ;
  LLVMValueRef result;
  
  arg1 = (LLVMValueRef)jarg1; 
  arg2 = (LLVMValueRef)jarg2; 
  result = LLVMConstAdd(arg1,arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SwiggedfLLVM_ConstNSWAdd___(void * jarg1, void * jarg2) {
  void * jresult ;
  LLVMValueRef arg1 ;
  LLVMValueRef arg2 ;
  LLVMValueRef result;
  
  arg1 = (LLVMValueRef)jarg1; 
  arg2 = (LLVMValueRef)jarg2; 
  result = LLVMConstNSWAdd(arg1,arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SwiggedfLLVM_ConstNUWAdd___(void * jarg1, void * jarg2) {
  void * jresult ;
  LLVMValueRef arg1 ;
  LLVMValueRef arg2 ;
  LLVMValueRef result;
  
  arg1 = (LLVMValueRef)jarg1; 
  arg2 = (LLVMValueRef)jarg2; 
  result = LLVMConstNUWAdd(arg1,arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SwiggedfLLVM_ConstFAdd___(void * jarg1, void * jarg2) {
  void * jresult ;
  LLVMValueRef arg1 ;
  LLVMValueRef arg2 ;
  LLVMValueRef result;
  
  arg1 = (LLVMValueRef)jarg1; 
  arg2 = (LLVMValueRef)jarg2; 
  result = LLVMConstFAdd(arg1,arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SwiggedfLLVM_ConstSub___(void * jarg1, void * jarg2) {
  void * jresult ;
  LLVMValueRef arg1 ;
  LLVMValueRef arg2 ;
  LLVMValueRef result;
  
  arg1 = (LLVMValueRef)jarg1; 
  arg2 = (LLVMValueRef)jarg2; 
  result = LLVMConstSub(arg1,arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SwiggedfLLVM_ConstNSWSub___(void * jarg1, void * jarg2) {
  void * jresult ;
  LLVMValueRef arg1 ;
  LLVMValueRef arg2 ;
  LLVMValueRef result;
  
  arg1 = (LLVMValueRef)jarg1; 
  arg2 = (LLVMValueRef)jarg2; 
  result = LLVMConstNSWSub(arg1,arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SwiggedfLLVM_ConstNUWSub___(void * jarg1, void * jarg2) {
  void * jresult ;
  LLVMValueRef arg1 ;
  LLVMValueRef arg2 ;
  LLVMValueRef result;
  
  arg1 = (LLVMValueRef)jarg1; 
  arg2 = (LLVMValueRef)jarg2; 
  result = LLVMConstNUWSub(arg1,arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SwiggedfLLVM_ConstFSub___(void * jarg1, void * jarg2) {
  void * jresult ;
  LLVMValueRef arg1 ;
  LLVMValueRef arg2 ;
  LLVMValueRef result;
  
  arg1 = (LLVMValueRef)jarg1; 
  arg2 = (LLVMValueRef)jarg2; 
  result = LLVMConstFSub(arg1,arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SwiggedfLLVM_ConstMul___(void * jarg1, void * jarg2) {
  void * jresult ;
  LLVMValueRef arg1 ;
  LLVMValueRef arg2 ;
  LLVMValueRef result;
  
  arg1 = (LLVMValueRef)jarg1; 
  arg2 = (LLVMValueRef)jarg2; 
  result = LLVMConstMul(arg1,arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SwiggedfLLVM_ConstNSWMul___(void * jarg1, void * jarg2) {
  void * jresult ;
  LLVMValueRef arg1 ;
  LLVMValueRef arg2 ;
  LLVMValueRef result;
  
  arg1 = (LLVMValueRef)jarg1; 
  arg2 = (LLVMValueRef)jarg2; 
  result = LLVMConstNSWMul(arg1,arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SwiggedfLLVM_ConstNUWMul___(void * jarg1, void * jarg2) {
  void * jresult ;
  LLVMValueRef arg1 ;
  LLVMValueRef arg2 ;
  LLVMValueRef result;
  
  arg1 = (LLVMValueRef)jarg1; 
  arg2 = (LLVMValueRef)jarg2; 
  result = LLVMConstNUWMul(arg1,arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SwiggedfLLVM_ConstFMul___(void * jarg1, void * jarg2) {
  void * jresult ;
  LLVMValueRef arg1 ;
  LLVMValueRef arg2 ;
  LLVMValueRef result;
  
  arg1 = (LLVMValueRef)jarg1; 
  arg2 = (LLVMValueRef)jarg2; 
  result = LLVMConstFMul(arg1,arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SwiggedfLLVM_ConstUDiv___(void * jarg1, void * jarg2) {
  void * jresult ;
  LLVMValueRef arg1 ;
  LLVMValueRef arg2 ;
  LLVMValueRef result;
  
  arg1 = (LLVMValueRef)jarg1; 
  arg2 = (LLVMValueRef)jarg2; 
  result = LLVMConstUDiv(arg1,arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SwiggedfLLVM_ConstExactUDiv___(void * jarg1, void * jarg2) {
  void * jresult ;
  LLVMValueRef arg1 ;
  LLVMValueRef arg2 ;
  LLVMValueRef result;
  
  arg1 = (LLVMValueRef)jarg1; 
  arg2 = (LLVMValueRef)jarg2; 
  result = LLVMConstExactUDiv(arg1,arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SwiggedfLLVM_ConstSDiv___(void * jarg1, void * jarg2) {
  void * jresult ;
  LLVMValueRef arg1 ;
  LLVMValueRef arg2 ;
  LLVMValueRef result;
  
  arg1 = (LLVMValueRef)jarg1; 
  arg2 = (LLVMValueRef)jarg2; 
  result = LLVMConstSDiv(arg1,arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SwiggedfLLVM_ConstExactSDiv___(void * jarg1, void * jarg2) {
  void * jresult ;
  LLVMValueRef arg1 ;
  LLVMValueRef arg2 ;
  LLVMValueRef result;
  
  arg1 = (LLVMValueRef)jarg1; 
  arg2 = (LLVMValueRef)jarg2; 
  result = LLVMConstExactSDiv(arg1,arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SwiggedfLLVM_ConstFDiv___(void * jarg1, void * jarg2) {
  void * jresult ;
  LLVMValueRef arg1 ;
  LLVMValueRef arg2 ;
  LLVMValueRef result;
  
  arg1 = (LLVMValueRef)jarg1; 
  arg2 = (LLVMValueRef)jarg2; 
  result = LLVMConstFDiv(arg1,arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SwiggedfLLVM_ConstURem___(void * jarg1, void * jarg2) {
  void * jresult ;
  LLVMValueRef arg1 ;
  LLVMValueRef arg2 ;
  LLVMValueRef result;
  
  arg1 = (LLVMValueRef)jarg1; 
  arg2 = (LLVMValueRef)jarg2; 
  result = LLVMConstURem(arg1,arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SwiggedfLLVM_ConstSRem___(void * jarg1, void * jarg2) {
  void * jresult ;
  LLVMValueRef arg1 ;
  LLVMValueRef arg2 ;
  LLVMValueRef result;
  
  arg1 = (LLVMValueRef)jarg1; 
  arg2 = (LLVMValueRef)jarg2; 
  result = LLVMConstSRem(arg1,arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SwiggedfLLVM_ConstFRem___(void * jarg1, void * jarg2) {
  void * jresult ;
  LLVMValueRef arg1 ;
  LLVMValueRef arg2 ;
  LLVMValueRef result;
  
  arg1 = (LLVMValueRef)jarg1; 
  arg2 = (LLVMValueRef)jarg2; 
  result = LLVMConstFRem(arg1,arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SwiggedfLLVM_ConstAnd___(void * jarg1, void * jarg2) {
  void * jresult ;
  LLVMValueRef arg1 ;
  LLVMValueRef arg2 ;
  LLVMValueRef result;
  
  arg1 = (LLVMValueRef)jarg1; 
  arg2 = (LLVMValueRef)jarg2; 
  result = LLVMConstAnd(arg1,arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SwiggedfLLVM_ConstOr___(void * jarg1, void * jarg2) {
  void * jresult ;
  LLVMValueRef arg1 ;
  LLVMValueRef arg2 ;
  LLVMValueRef result;
  
  arg1 = (LLVMValueRef)jarg1; 
  arg2 = (LLVMValueRef)jarg2; 
  result = LLVMConstOr(arg1,arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SwiggedfLLVM_ConstXor___(void * jarg1, void * jarg2) {
  void * jresult ;
  LLVMValueRef arg1 ;
  LLVMValueRef arg2 ;
  LLVMValueRef result;
  
  arg1 = (LLVMValueRef)jarg1; 
  arg2 = (LLVMValueRef)jarg2; 
  result = LLVMConstXor(arg1,arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SwiggedfLLVM_ConstICmp___(int jarg1, void * jarg2, void * jarg3) {
  void * jresult ;
  LLVMIntPredicate arg1 ;
  LLVMValueRef arg2 ;
  LLVMValueRef arg3 ;
  LLVMValueRef result;
  
  arg1 = (LLVMIntPredicate)jarg1; 
  arg2 = (LLVMValueRef)jarg2; 
  arg3 = (LLVMValueRef)jarg3; 
  result = LLVMConstICmp(arg1,arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SwiggedfLLVM_ConstFCmp___(int jarg1, void * jarg2, void * jarg3) {
  void * jresult ;
  LLVMRealPredicate arg1 ;
  LLVMValueRef arg2 ;
  LLVMValueRef arg3 ;
  LLVMValueRef result;
  
  arg1 = (LLVMRealPredicate)jarg1; 
  arg2 = (LLVMValueRef)jarg2; 
  arg3 = (LLVMValueRef)jarg3; 
  result = LLVMConstFCmp(arg1,arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SwiggedfLLVM_ConstShl___(void * jarg1, void * jarg2) {
  void * jresult ;
  LLVMValueRef arg1 ;
  LLVMValueRef arg2 ;
  LLVMValueRef result;
  
  arg1 = (LLVMValueRef)jarg1; 
  arg2 = (LLVMValueRef)jarg2; 
  result = LLVMConstShl(arg1,arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SwiggedfLLVM_ConstLShr___(void * jarg1, void * jarg2) {
  void * jresult ;
  LLVMValueRef arg1 ;
  LLVMValueRef arg2 ;
  LLVMValueRef result;
  
  arg1 = (LLVMValueRef)jarg1; 
  arg2 = (LLVMValueRef)jarg2; 
  result = LLVMConstLShr(arg1,arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SwiggedfLLVM_ConstAShr___(void * jarg1, void * jarg2) {
  void * jresult ;
  LLVMValueRef arg1 ;
  LLVMValueRef arg2 ;
  LLVMValueRef result;
  
  arg1 = (LLVMValueRef)jarg1; 
  arg2 = (LLVMValueRef)jarg2; 
  result = LLVMConstAShr(arg1,arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SwiggedfLLVM_ConstGEP___(void * jarg1, void* arg2_data, unsigned int jarg2) {
  void * jresult ;
  LLVMValueRef arg1 ;
  LLVMValueRef *arg2 = (LLVMValueRef *) 0 ;
  unsigned int arg3 ;
  LLVMValueRef result;
  
  arg1 = (LLVMValueRef)jarg1; 
  arg2 = (LLVMValueRef*)arg2_data; arg3 = jarg2;
  result = LLVMConstGEP(arg1,arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SwiggedfLLVM_ConstInBoundsGEP___(void * jarg1, void* arg2_data, unsigned int jarg2) {
  void * jresult ;
  LLVMValueRef arg1 ;
  LLVMValueRef *arg2 = (LLVMValueRef *) 0 ;
  unsigned int arg3 ;
  LLVMValueRef result;
  
  arg1 = (LLVMValueRef)jarg1; 
  arg2 = (LLVMValueRef*)arg2_data; arg3 = jarg2;
  result = LLVMConstInBoundsGEP(arg1,arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SwiggedfLLVM_ConstTrunc___(void * jarg1, void * jarg2) {
  void * jresult ;
  LLVMValueRef arg1 ;
  LLVMTypeRef arg2 ;
  LLVMValueRef result;
  
  arg1 = (LLVMValueRef)jarg1; 
  arg2 = (LLVMTypeRef)jarg2; 
  result = LLVMConstTrunc(arg1,arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SwiggedfLLVM_ConstSExt___(void * jarg1, void * jarg2) {
  void * jresult ;
  LLVMValueRef arg1 ;
  LLVMTypeRef arg2 ;
  LLVMValueRef result;
  
  arg1 = (LLVMValueRef)jarg1; 
  arg2 = (LLVMTypeRef)jarg2; 
  result = LLVMConstSExt(arg1,arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SwiggedfLLVM_ConstZExt___(void * jarg1, void * jarg2) {
  void * jresult ;
  LLVMValueRef arg1 ;
  LLVMTypeRef arg2 ;
  LLVMValueRef result;
  
  arg1 = (LLVMValueRef)jarg1; 
  arg2 = (LLVMTypeRef)jarg2; 
  result = LLVMConstZExt(arg1,arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SwiggedfLLVM_ConstFPTrunc___(void * jarg1, void * jarg2) {
  void * jresult ;
  LLVMValueRef arg1 ;
  LLVMTypeRef arg2 ;
  LLVMValueRef result;
  
  arg1 = (LLVMValueRef)jarg1; 
  arg2 = (LLVMTypeRef)jarg2; 
  result = LLVMConstFPTrunc(arg1,arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SwiggedfLLVM_ConstFPExt___(void * jarg1, void * jarg2) {
  void * jresult ;
  LLVMValueRef arg1 ;
  LLVMTypeRef arg2 ;
  LLVMValueRef result;
  
  arg1 = (LLVMValueRef)jarg1; 
  arg2 = (LLVMTypeRef)jarg2; 
  result = LLVMConstFPExt(arg1,arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SwiggedfLLVM_ConstUIToFP___(void * jarg1, void * jarg2) {
  void * jresult ;
  LLVMValueRef arg1 ;
  LLVMTypeRef arg2 ;
  LLVMValueRef result;
  
  arg1 = (LLVMValueRef)jarg1; 
  arg2 = (LLVMTypeRef)jarg2; 
  result = LLVMConstUIToFP(arg1,arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SwiggedfLLVM_ConstSIToFP___(void * jarg1, void * jarg2) {
  void * jresult ;
  LLVMValueRef arg1 ;
  LLVMTypeRef arg2 ;
  LLVMValueRef result;
  
  arg1 = (LLVMValueRef)jarg1; 
  arg2 = (LLVMTypeRef)jarg2; 
  result = LLVMConstSIToFP(arg1,arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SwiggedfLLVM_ConstFPToUI___(void * jarg1, void * jarg2) {
  void * jresult ;
  LLVMValueRef arg1 ;
  LLVMTypeRef arg2 ;
  LLVMValueRef result;
  
  arg1 = (LLVMValueRef)jarg1; 
  arg2 = (LLVMTypeRef)jarg2; 
  result = LLVMConstFPToUI(arg1,arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SwiggedfLLVM_ConstFPToSI___(void * jarg1, void * jarg2) {
  void * jresult ;
  LLVMValueRef arg1 ;
  LLVMTypeRef arg2 ;
  LLVMValueRef result;
  
  arg1 = (LLVMValueRef)jarg1; 
  arg2 = (LLVMTypeRef)jarg2; 
  result = LLVMConstFPToSI(arg1,arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SwiggedfLLVM_ConstPtrToInt___(void * jarg1, void * jarg2) {
  void * jresult ;
  LLVMValueRef arg1 ;
  LLVMTypeRef arg2 ;
  LLVMValueRef result;
  
  arg1 = (LLVMValueRef)jarg1; 
  arg2 = (LLVMTypeRef)jarg2; 
  result = LLVMConstPtrToInt(arg1,arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SwiggedfLLVM_ConstIntToPtr___(void * jarg1, void * jarg2) {
  void * jresult ;
  LLVMValueRef arg1 ;
  LLVMTypeRef arg2 ;
  LLVMValueRef result;
  
  arg1 = (LLVMValueRef)jarg1; 
  arg2 = (LLVMTypeRef)jarg2; 
  result = LLVMConstIntToPtr(arg1,arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SwiggedfLLVM_ConstBitCast___(void * jarg1, void * jarg2) {
  void * jresult ;
  LLVMValueRef arg1 ;
  LLVMTypeRef arg2 ;
  LLVMValueRef result;
  
  arg1 = (LLVMValueRef)jarg1; 
  arg2 = (LLVMTypeRef)jarg2; 
  result = LLVMConstBitCast(arg1,arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SwiggedfLLVM_ConstAddrSpaceCast___(void * jarg1, void * jarg2) {
  void * jresult ;
  LLVMValueRef arg1 ;
  LLVMTypeRef arg2 ;
  LLVMValueRef result;
  
  arg1 = (LLVMValueRef)jarg1; 
  arg2 = (LLVMTypeRef)jarg2; 
  result = LLVMConstAddrSpaceCast(arg1,arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SwiggedfLLVM_ConstZExtOrBitCast___(void * jarg1, void * jarg2) {
  void * jresult ;
  LLVMValueRef arg1 ;
  LLVMTypeRef arg2 ;
  LLVMValueRef result;
  
  arg1 = (LLVMValueRef)jarg1; 
  arg2 = (LLVMTypeRef)jarg2; 
  result = LLVMConstZExtOrBitCast(arg1,arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SwiggedfLLVM_ConstSExtOrBitCast___(void * jarg1, void * jarg2) {
  void * jresult ;
  LLVMValueRef arg1 ;
  LLVMTypeRef arg2 ;
  LLVMValueRef result;
  
  arg1 = (LLVMValueRef)jarg1; 
  arg2 = (LLVMTypeRef)jarg2; 
  result = LLVMConstSExtOrBitCast(arg1,arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SwiggedfLLVM_ConstTruncOrBitCast___(void * jarg1, void * jarg2) {
  void * jresult ;
  LLVMValueRef arg1 ;
  LLVMTypeRef arg2 ;
  LLVMValueRef result;
  
  arg1 = (LLVMValueRef)jarg1; 
  arg2 = (LLVMTypeRef)jarg2; 
  result = LLVMConstTruncOrBitCast(arg1,arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SwiggedfLLVM_ConstPointerCast___(void * jarg1, void * jarg2) {
  void * jresult ;
  LLVMValueRef arg1 ;
  LLVMTypeRef arg2 ;
  LLVMValueRef result;
  
  arg1 = (LLVMValueRef)jarg1; 
  arg2 = (LLVMTypeRef)jarg2; 
  result = LLVMConstPointerCast(arg1,arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SwiggedfLLVM_ConstIntCast___(void * jarg1, void * jarg2, unsigned int jarg3) {
  void * jresult ;
  LLVMValueRef arg1 ;
  LLVMTypeRef arg2 ;
  LLVMBool arg3 ;
  LLVMValueRef result;
  
  arg1 = (LLVMValueRef)jarg1; 
  arg2 = (LLVMTypeRef)jarg2; 
  arg3 = jarg3 ? true : false; 
  result = LLVMConstIntCast(arg1,arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SwiggedfLLVM_ConstFPCast___(void * jarg1, void * jarg2) {
  void * jresult ;
  LLVMValueRef arg1 ;
  LLVMTypeRef arg2 ;
  LLVMValueRef result;
  
  arg1 = (LLVMValueRef)jarg1; 
  arg2 = (LLVMTypeRef)jarg2; 
  result = LLVMConstFPCast(arg1,arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SwiggedfLLVM_ConstSelect___(void * jarg1, void * jarg2, void * jarg3) {
  void * jresult ;
  LLVMValueRef arg1 ;
  LLVMValueRef arg2 ;
  LLVMValueRef arg3 ;
  LLVMValueRef result;
  
  arg1 = (LLVMValueRef)jarg1; 
  arg2 = (LLVMValueRef)jarg2; 
  arg3 = (LLVMValueRef)jarg3; 
  result = LLVMConstSelect(arg1,arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SwiggedfLLVM_ConstExtractElement___(void * jarg1, void * jarg2) {
  void * jresult ;
  LLVMValueRef arg1 ;
  LLVMValueRef arg2 ;
  LLVMValueRef result;
  
  arg1 = (LLVMValueRef)jarg1; 
  arg2 = (LLVMValueRef)jarg2; 
  result = LLVMConstExtractElement(arg1,arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SwiggedfLLVM_ConstInsertElement___(void * jarg1, void * jarg2, void * jarg3) {
  void * jresult ;
  LLVMValueRef arg1 ;
  LLVMValueRef arg2 ;
  LLVMValueRef arg3 ;
  LLVMValueRef result;
  
  arg1 = (LLVMValueRef)jarg1; 
  arg2 = (LLVMValueRef)jarg2; 
  arg3 = (LLVMValueRef)jarg3; 
  result = LLVMConstInsertElement(arg1,arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SwiggedfLLVM_ConstShuffleVector___(void * jarg1, void * jarg2, void * jarg3) {
  void * jresult ;
  LLVMValueRef arg1 ;
  LLVMValueRef arg2 ;
  LLVMValueRef arg3 ;
  LLVMValueRef result;
  
  arg1 = (LLVMValueRef)jarg1; 
  arg2 = (LLVMValueRef)jarg2; 
  arg3 = (LLVMValueRef)jarg3; 
  result = LLVMConstShuffleVector(arg1,arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SwiggedfLLVM_ConstExtractValue___(void * jarg1, void* arg2_data, unsigned int jarg2) {
  void * jresult ;
  LLVMValueRef arg1 ;
  unsigned int *arg2 = (unsigned int *) 0 ;
  unsigned int arg3 ;
  LLVMValueRef result;
  
  arg1 = (LLVMValueRef)jarg1; 
  arg2 = (unsigned*)arg2_data; arg3 = jarg2;
  result = LLVMConstExtractValue(arg1,arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SwiggedfLLVM_ConstInsertValue___(void * jarg1, void * jarg2, void* arg3_data, unsigned int jarg3) {
  void * jresult ;
  LLVMValueRef arg1 ;
  LLVMValueRef arg2 ;
  unsigned int *arg3 = (unsigned int *) 0 ;
  unsigned int arg4 ;
  LLVMValueRef result;
  
  arg1 = (LLVMValueRef)jarg1; 
  arg2 = (LLVMValueRef)jarg2; 
  arg3 = (unsigned*)arg3_data; arg4 = jarg3;
  result = LLVMConstInsertValue(arg1,arg2,arg3,arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SwiggedfLLVM_ConstInlineAsm___(void * jarg1, char * jarg2, char * jarg3, unsigned int jarg4, unsigned int jarg5) {
  void * jresult ;
  LLVMTypeRef arg1 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  LLVMBool arg4 ;
  LLVMBool arg5 ;
  LLVMValueRef result;
  
  arg1 = (LLVMTypeRef)jarg1; 
  arg2 = (char *)jarg2; 
  arg3 = (char *)jarg3; 
  arg4 = jarg4 ? true : false; 
  arg5 = jarg5 ? true : false; 
  result = LLVMConstInlineAsm(arg1,(char const *)arg2,(char const *)arg3,arg4,arg5);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SwiggedfLLVM_BlockAddress___(void * jarg1, void * jarg2) {
  void * jresult ;
  LLVMValueRef arg1 ;
  LLVMBasicBlockRef arg2 ;
  LLVMValueRef result;
  
  arg1 = (LLVMValueRef)jarg1; 
  arg2 = (LLVMBasicBlockRef)jarg2; 
  result = LLVMBlockAddress(arg1,arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SwiggedfLLVM_GetGlobalParent___(void * jarg1) {
  void * jresult ;
  LLVMValueRef arg1 ;
  LLVMModuleRef result;
  
  arg1 = (LLVMValueRef)jarg1; 
  result = LLVMGetGlobalParent(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_SwiggedfLLVM_IsDeclaration___(void * jarg1) {
  unsigned int jresult ;
  LLVMValueRef arg1 ;
  LLVMBool result;
  
  arg1 = (LLVMValueRef)jarg1; 
  result = (LLVMBool)LLVMIsDeclaration(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_SwiggedfLLVM_GetLinkage___(void * jarg1) {
  int jresult ;
  LLVMValueRef arg1 ;
  LLVMLinkage result;
  
  arg1 = (LLVMValueRef)jarg1; 
  result = (LLVMLinkage)LLVMGetLinkage(arg1);
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_SwiggedfLLVM_SetLinkage___(void * jarg1, int jarg2) {
  LLVMValueRef arg1 ;
  LLVMLinkage arg2 ;
  
  arg1 = (LLVMValueRef)jarg1; 
  arg2 = (LLVMLinkage)jarg2; 
  LLVMSetLinkage(arg1,arg2);
}


SWIGEXPORT char * SWIGSTDCALL CSharp_SwiggedfLLVM_GetSection___(void * jarg1) {
  char * jresult ;
  LLVMValueRef arg1 ;
  char *result = 0 ;
  
  arg1 = (LLVMValueRef)jarg1; 
  result = (char *)LLVMGetSection(arg1);
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_SwiggedfLLVM_SetSection___(void * jarg1, char * jarg2) {
  LLVMValueRef arg1 ;
  char *arg2 = (char *) 0 ;
  
  arg1 = (LLVMValueRef)jarg1; 
  arg2 = (char *)jarg2; 
  LLVMSetSection(arg1,(char const *)arg2);
}


SWIGEXPORT int SWIGSTDCALL CSharp_SwiggedfLLVM_GetVisibility___(void * jarg1) {
  int jresult ;
  LLVMValueRef arg1 ;
  LLVMVisibility result;
  
  arg1 = (LLVMValueRef)jarg1; 
  result = (LLVMVisibility)LLVMGetVisibility(arg1);
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_SwiggedfLLVM_SetVisibility___(void * jarg1, int jarg2) {
  LLVMValueRef arg1 ;
  LLVMVisibility arg2 ;
  
  arg1 = (LLVMValueRef)jarg1; 
  arg2 = (LLVMVisibility)jarg2; 
  LLVMSetVisibility(arg1,arg2);
}


SWIGEXPORT int SWIGSTDCALL CSharp_SwiggedfLLVM_GetDLLStorageClass___(void * jarg1) {
  int jresult ;
  LLVMValueRef arg1 ;
  LLVMDLLStorageClass result;
  
  arg1 = (LLVMValueRef)jarg1; 
  result = (LLVMDLLStorageClass)LLVMGetDLLStorageClass(arg1);
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_SwiggedfLLVM_SetDLLStorageClass___(void * jarg1, int jarg2) {
  LLVMValueRef arg1 ;
  LLVMDLLStorageClass arg2 ;
  
  arg1 = (LLVMValueRef)jarg1; 
  arg2 = (LLVMDLLStorageClass)jarg2; 
  LLVMSetDLLStorageClass(arg1,arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_SwiggedfLLVM_HasUnnamedAddr___(void * jarg1) {
  unsigned int jresult ;
  LLVMValueRef arg1 ;
  LLVMBool result;
  
  arg1 = (LLVMValueRef)jarg1; 
  result = (LLVMBool)LLVMHasUnnamedAddr(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_SwiggedfLLVM_SetUnnamedAddr___(void * jarg1, unsigned int jarg2) {
  LLVMValueRef arg1 ;
  LLVMBool arg2 ;
  
  arg1 = (LLVMValueRef)jarg1; 
  arg2 = jarg2 ? true : false; 
  LLVMSetUnnamedAddr(arg1,arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_SwiggedfLLVM_GetAlignment___(void * jarg1) {
  unsigned int jresult ;
  LLVMValueRef arg1 ;
  unsigned int result;
  
  arg1 = (LLVMValueRef)jarg1; 
  result = (unsigned int)LLVMGetAlignment(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_SwiggedfLLVM_SetAlignment___(void * jarg1, unsigned int jarg2) {
  LLVMValueRef arg1 ;
  unsigned int arg2 ;
  
  arg1 = (LLVMValueRef)jarg1; 
  arg2 = (unsigned int)jarg2; 
  LLVMSetAlignment(arg1,arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SwiggedfLLVM_AddGlobal___(void * jarg1, void * jarg2, char * jarg3) {
  void * jresult ;
  LLVMModuleRef arg1 ;
  LLVMTypeRef arg2 ;
  char *arg3 = (char *) 0 ;
  LLVMValueRef result;
  
  arg1 = (LLVMModuleRef)jarg1; 
  arg2 = (LLVMTypeRef)jarg2; 
  arg3 = (char *)jarg3; 
  result = LLVMAddGlobal(arg1,arg2,(char const *)arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SwiggedfLLVM_AddGlobalInAddressSpace___(void * jarg1, void * jarg2, char * jarg3, unsigned int jarg4) {
  void * jresult ;
  LLVMModuleRef arg1 ;
  LLVMTypeRef arg2 ;
  char *arg3 = (char *) 0 ;
  unsigned int arg4 ;
  LLVMValueRef result;
  
  arg1 = (LLVMModuleRef)jarg1; 
  arg2 = (LLVMTypeRef)jarg2; 
  arg3 = (char *)jarg3; 
  arg4 = (unsigned int)jarg4; 
  result = LLVMAddGlobalInAddressSpace(arg1,arg2,(char const *)arg3,arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SwiggedfLLVM_GetNamedGlobal___(void * jarg1, char * jarg2) {
  void * jresult ;
  LLVMModuleRef arg1 ;
  char *arg2 = (char *) 0 ;
  LLVMValueRef result;
  
  arg1 = (LLVMModuleRef)jarg1; 
  arg2 = (char *)jarg2; 
  result = LLVMGetNamedGlobal(arg1,(char const *)arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SwiggedfLLVM_GetFirstGlobal___(void * jarg1) {
  void * jresult ;
  LLVMModuleRef arg1 ;
  LLVMValueRef result;
  
  arg1 = (LLVMModuleRef)jarg1; 
  result = LLVMGetFirstGlobal(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SwiggedfLLVM_GetLastGlobal___(void * jarg1) {
  void * jresult ;
  LLVMModuleRef arg1 ;
  LLVMValueRef result;
  
  arg1 = (LLVMModuleRef)jarg1; 
  result = LLVMGetLastGlobal(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SwiggedfLLVM_GetNextGlobal___(void * jarg1) {
  void * jresult ;
  LLVMValueRef arg1 ;
  LLVMValueRef result;
  
  arg1 = (LLVMValueRef)jarg1; 
  result = LLVMGetNextGlobal(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SwiggedfLLVM_GetPreviousGlobal___(void * jarg1) {
  void * jresult ;
  LLVMValueRef arg1 ;
  LLVMValueRef result;
  
  arg1 = (LLVMValueRef)jarg1; 
  result = LLVMGetPreviousGlobal(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_SwiggedfLLVM_DeleteGlobal___(void * jarg1) {
  LLVMValueRef arg1 ;
  
  arg1 = (LLVMValueRef)jarg1; 
  LLVMDeleteGlobal(arg1);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SwiggedfLLVM_GetInitializer___(void * jarg1) {
  void * jresult ;
  LLVMValueRef arg1 ;
  LLVMValueRef result;
  
  arg1 = (LLVMValueRef)jarg1; 
  result = LLVMGetInitializer(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_SwiggedfLLVM_SetInitializer___(void * jarg1, void * jarg2) {
  LLVMValueRef arg1 ;
  LLVMValueRef arg2 ;
  
  arg1 = (LLVMValueRef)jarg1; 
  arg2 = (LLVMValueRef)jarg2; 
  LLVMSetInitializer(arg1,arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_SwiggedfLLVM_IsThreadLocal___(void * jarg1) {
  unsigned int jresult ;
  LLVMValueRef arg1 ;
  LLVMBool result;
  
  arg1 = (LLVMValueRef)jarg1; 
  result = (LLVMBool)LLVMIsThreadLocal(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_SwiggedfLLVM_SetThreadLocal___(void * jarg1, unsigned int jarg2) {
  LLVMValueRef arg1 ;
  LLVMBool arg2 ;
  
  arg1 = (LLVMValueRef)jarg1; 
  arg2 = jarg2 ? true : false; 
  LLVMSetThreadLocal(arg1,arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_SwiggedfLLVM_IsGlobalConstant___(void * jarg1) {
  unsigned int jresult ;
  LLVMValueRef arg1 ;
  LLVMBool result;
  
  arg1 = (LLVMValueRef)jarg1; 
  result = (LLVMBool)LLVMIsGlobalConstant(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_SwiggedfLLVM_SetGlobalConstant___(void * jarg1, unsigned int jarg2) {
  LLVMValueRef arg1 ;
  LLVMBool arg2 ;
  
  arg1 = (LLVMValueRef)jarg1; 
  arg2 = jarg2 ? true : false; 
  LLVMSetGlobalConstant(arg1,arg2);
}


SWIGEXPORT int SWIGSTDCALL CSharp_SwiggedfLLVM_GetThreadLocalMode___(void * jarg1) {
  int jresult ;
  LLVMValueRef arg1 ;
  LLVMThreadLocalMode result;
  
  arg1 = (LLVMValueRef)jarg1; 
  result = (LLVMThreadLocalMode)LLVMGetThreadLocalMode(arg1);
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_SwiggedfLLVM_SetThreadLocalMode___(void * jarg1, int jarg2) {
  LLVMValueRef arg1 ;
  LLVMThreadLocalMode arg2 ;
  
  arg1 = (LLVMValueRef)jarg1; 
  arg2 = (LLVMThreadLocalMode)jarg2; 
  LLVMSetThreadLocalMode(arg1,arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_SwiggedfLLVM_IsExternallyInitialized___(void * jarg1) {
  unsigned int jresult ;
  LLVMValueRef arg1 ;
  LLVMBool result;
  
  arg1 = (LLVMValueRef)jarg1; 
  result = (LLVMBool)LLVMIsExternallyInitialized(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_SwiggedfLLVM_SetExternallyInitialized___(void * jarg1, unsigned int jarg2) {
  LLVMValueRef arg1 ;
  LLVMBool arg2 ;
  
  arg1 = (LLVMValueRef)jarg1; 
  arg2 = jarg2 ? true : false; 
  LLVMSetExternallyInitialized(arg1,arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SwiggedfLLVM_AddAlias___(void * jarg1, void * jarg2, void * jarg3, char * jarg4) {
  void * jresult ;
  LLVMModuleRef arg1 ;
  LLVMTypeRef arg2 ;
  LLVMValueRef arg3 ;
  char *arg4 = (char *) 0 ;
  LLVMValueRef result;
  
  arg1 = (LLVMModuleRef)jarg1; 
  arg2 = (LLVMTypeRef)jarg2; 
  arg3 = (LLVMValueRef)jarg3; 
  arg4 = (char *)jarg4; 
  result = LLVMAddAlias(arg1,arg2,arg3,(char const *)arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_SwiggedfLLVM_DeleteFunction___(void * jarg1) {
  LLVMValueRef arg1 ;
  
  arg1 = (LLVMValueRef)jarg1; 
  LLVMDeleteFunction(arg1);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_SwiggedfLLVM_HasPersonalityFn___(void * jarg1) {
  unsigned int jresult ;
  LLVMValueRef arg1 ;
  LLVMBool result;
  
  arg1 = (LLVMValueRef)jarg1; 
  result = (LLVMBool)LLVMHasPersonalityFn(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SwiggedfLLVM_GetPersonalityFn___(void * jarg1) {
  void * jresult ;
  LLVMValueRef arg1 ;
  LLVMValueRef result;
  
  arg1 = (LLVMValueRef)jarg1; 
  result = LLVMGetPersonalityFn(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_SwiggedfLLVM_SetPersonalityFn___(void * jarg1, void * jarg2) {
  LLVMValueRef arg1 ;
  LLVMValueRef arg2 ;
  
  arg1 = (LLVMValueRef)jarg1; 
  arg2 = (LLVMValueRef)jarg2; 
  LLVMSetPersonalityFn(arg1,arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_SwiggedfLLVM_GetIntrinsicID___(void * jarg1) {
  unsigned int jresult ;
  LLVMValueRef arg1 ;
  unsigned int result;
  
  arg1 = (LLVMValueRef)jarg1; 
  result = (unsigned int)LLVMGetIntrinsicID(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_SwiggedfLLVM_GetFunctionCallConv___(void * jarg1) {
  unsigned int jresult ;
  LLVMValueRef arg1 ;
  unsigned int result;
  
  arg1 = (LLVMValueRef)jarg1; 
  result = (unsigned int)LLVMGetFunctionCallConv(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_SwiggedfLLVM_SetFunctionCallConv___(void * jarg1, unsigned int jarg2) {
  LLVMValueRef arg1 ;
  unsigned int arg2 ;
  
  arg1 = (LLVMValueRef)jarg1; 
  arg2 = (unsigned int)jarg2; 
  LLVMSetFunctionCallConv(arg1,arg2);
}


SWIGEXPORT char * SWIGSTDCALL CSharp_SwiggedfLLVM_GetGC___(void * jarg1) {
  char * jresult ;
  LLVMValueRef arg1 ;
  char *result = 0 ;
  
  arg1 = (LLVMValueRef)jarg1; 
  result = (char *)LLVMGetGC(arg1);
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_SwiggedfLLVM_SetGC___(void * jarg1, char * jarg2) {
  LLVMValueRef arg1 ;
  char *arg2 = (char *) 0 ;
  
  arg1 = (LLVMValueRef)jarg1; 
  arg2 = (char *)jarg2; 
  LLVMSetGC(arg1,(char const *)arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_SwiggedfLLVM_AddAttributeAtIndex___(void * jarg1, unsigned int jarg2, void * jarg3) {
  LLVMValueRef arg1 ;
  LLVMAttributeIndex arg2 ;
  LLVMAttributeRef arg3 ;
  
  arg1 = (LLVMValueRef)jarg1; 
  arg2 = (LLVMAttributeIndex)jarg2; 
  arg3 = (LLVMAttributeRef)jarg3; 
  LLVMAddAttributeAtIndex(arg1,arg2,arg3);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_SwiggedfLLVM_GetAttributeCountAtIndex___(void * jarg1, unsigned int jarg2) {
  unsigned int jresult ;
  LLVMValueRef arg1 ;
  LLVMAttributeIndex arg2 ;
  unsigned int result;
  
  arg1 = (LLVMValueRef)jarg1; 
  arg2 = (LLVMAttributeIndex)jarg2; 
  result = (unsigned int)LLVMGetAttributeCountAtIndex(arg1,arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_SwiggedfLLVM_GetAttributesAtIndex___(void * jarg1, unsigned int jarg2, void * jarg3) {
  LLVMValueRef arg1 ;
  LLVMAttributeIndex arg2 ;
  LLVMAttributeRef *arg3 = (LLVMAttributeRef *) 0 ;
  
  arg1 = (LLVMValueRef)jarg1; 
  arg2 = (LLVMAttributeIndex)jarg2; 
  arg3 = (LLVMAttributeRef *)jarg3; 
  LLVMGetAttributesAtIndex(arg1,arg2,arg3);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SwiggedfLLVM_GetEnumAttributeAtIndex___(void * jarg1, unsigned int jarg2, unsigned int jarg3) {
  void * jresult ;
  LLVMValueRef arg1 ;
  LLVMAttributeIndex arg2 ;
  unsigned int arg3 ;
  LLVMAttributeRef result;
  
  arg1 = (LLVMValueRef)jarg1; 
  arg2 = (LLVMAttributeIndex)jarg2; 
  arg3 = (unsigned int)jarg3; 
  result = LLVMGetEnumAttributeAtIndex(arg1,arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SwiggedfLLVM_GetStringAttributeAtIndex___(void * jarg1, unsigned int jarg2, char * jarg3, unsigned int jarg4) {
  void * jresult ;
  LLVMValueRef arg1 ;
  LLVMAttributeIndex arg2 ;
  char *arg3 = (char *) 0 ;
  unsigned int arg4 ;
  LLVMAttributeRef result;
  
  arg1 = (LLVMValueRef)jarg1; 
  arg2 = (LLVMAttributeIndex)jarg2; 
  arg3 = (char *)jarg3; 
  arg4 = (unsigned int)jarg4; 
  result = LLVMGetStringAttributeAtIndex(arg1,arg2,(char const *)arg3,arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_SwiggedfLLVM_RemoveEnumAttributeAtIndex___(void * jarg1, unsigned int jarg2, unsigned int jarg3) {
  LLVMValueRef arg1 ;
  LLVMAttributeIndex arg2 ;
  unsigned int arg3 ;
  
  arg1 = (LLVMValueRef)jarg1; 
  arg2 = (LLVMAttributeIndex)jarg2; 
  arg3 = (unsigned int)jarg3; 
  LLVMRemoveEnumAttributeAtIndex(arg1,arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_SwiggedfLLVM_RemoveStringAttributeAtIndex___(void * jarg1, unsigned int jarg2, char * jarg3, unsigned int jarg4) {
  LLVMValueRef arg1 ;
  LLVMAttributeIndex arg2 ;
  char *arg3 = (char *) 0 ;
  unsigned int arg4 ;
  
  arg1 = (LLVMValueRef)jarg1; 
  arg2 = (LLVMAttributeIndex)jarg2; 
  arg3 = (char *)jarg3; 
  arg4 = (unsigned int)jarg4; 
  LLVMRemoveStringAttributeAtIndex(arg1,arg2,(char const *)arg3,arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_SwiggedfLLVM_AddTargetDependentFunctionAttr___(void * jarg1, char * jarg2, char * jarg3) {
  LLVMValueRef arg1 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  
  arg1 = (LLVMValueRef)jarg1; 
  arg2 = (char *)jarg2; 
  arg3 = (char *)jarg3; 
  LLVMAddTargetDependentFunctionAttr(arg1,(char const *)arg2,(char const *)arg3);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_SwiggedfLLVM_CountParams___(void * jarg1) {
  unsigned int jresult ;
  LLVMValueRef arg1 ;
  unsigned int result;
  
  arg1 = (LLVMValueRef)jarg1; 
  result = (unsigned int)LLVMCountParams(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_SwiggedfLLVM_GetParams___(void * jarg1, void * jarg2) {
  LLVMValueRef arg1 ;
  LLVMValueRef *arg2 = (LLVMValueRef *) 0 ;
  
  arg1 = (LLVMValueRef)jarg1; 
  arg2 = (LLVMValueRef *)jarg2; 
  LLVMGetParams(arg1,arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SwiggedfLLVM_GetParam___(void * jarg1, unsigned int jarg2) {
  void * jresult ;
  LLVMValueRef arg1 ;
  unsigned int arg2 ;
  LLVMValueRef result;
  
  arg1 = (LLVMValueRef)jarg1; 
  arg2 = (unsigned int)jarg2; 
  result = LLVMGetParam(arg1,arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SwiggedfLLVM_GetParamParent___(void * jarg1) {
  void * jresult ;
  LLVMValueRef arg1 ;
  LLVMValueRef result;
  
  arg1 = (LLVMValueRef)jarg1; 
  result = LLVMGetParamParent(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SwiggedfLLVM_GetFirstParam___(void * jarg1) {
  void * jresult ;
  LLVMValueRef arg1 ;
  LLVMValueRef result;
  
  arg1 = (LLVMValueRef)jarg1; 
  result = LLVMGetFirstParam(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SwiggedfLLVM_GetLastParam___(void * jarg1) {
  void * jresult ;
  LLVMValueRef arg1 ;
  LLVMValueRef result;
  
  arg1 = (LLVMValueRef)jarg1; 
  result = LLVMGetLastParam(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SwiggedfLLVM_GetNextParam___(void * jarg1) {
  void * jresult ;
  LLVMValueRef arg1 ;
  LLVMValueRef result;
  
  arg1 = (LLVMValueRef)jarg1; 
  result = LLVMGetNextParam(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SwiggedfLLVM_GetPreviousParam___(void * jarg1) {
  void * jresult ;
  LLVMValueRef arg1 ;
  LLVMValueRef result;
  
  arg1 = (LLVMValueRef)jarg1; 
  result = LLVMGetPreviousParam(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_SwiggedfLLVM_SetParamAlignment___(void * jarg1, unsigned int jarg2) {
  LLVMValueRef arg1 ;
  unsigned int arg2 ;
  
  arg1 = (LLVMValueRef)jarg1; 
  arg2 = (unsigned int)jarg2; 
  LLVMSetParamAlignment(arg1,arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SwiggedfLLVM_MDStringInContext___(void * jarg1, char * jarg2, unsigned int jarg3) {
  void * jresult ;
  LLVMContextRef arg1 ;
  char *arg2 = (char *) 0 ;
  unsigned int arg3 ;
  LLVMValueRef result;
  
  arg1 = (LLVMContextRef)jarg1; 
  arg2 = (char *)jarg2; 
  arg3 = (unsigned int)jarg3; 
  result = LLVMMDStringInContext(arg1,(char const *)arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SwiggedfLLVM_MDString___(char * jarg1, unsigned int jarg2) {
  void * jresult ;
  char *arg1 = (char *) 0 ;
  unsigned int arg2 ;
  LLVMValueRef result;
  
  arg1 = (char *)jarg1; 
  arg2 = (unsigned int)jarg2; 
  result = LLVMMDString((char const *)arg1,arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SwiggedfLLVM_MDNodeInContext___(void * jarg1, void* arg2_data, unsigned int jarg2) {
  void * jresult ;
  LLVMContextRef arg1 ;
  LLVMValueRef *arg2 = (LLVMValueRef *) 0 ;
  unsigned int arg3 ;
  LLVMValueRef result;
  
  arg1 = (LLVMContextRef)jarg1; 
  arg2 = (LLVMValueRef*)arg2_data; arg3 = jarg2;
  result = LLVMMDNodeInContext(arg1,arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SwiggedfLLVM_MDNode___(void* arg1_data, unsigned int jarg1) {
  void * jresult ;
  LLVMValueRef *arg1 = (LLVMValueRef *) 0 ;
  unsigned int arg2 ;
  LLVMValueRef result;
  
  arg1 = (LLVMValueRef*)arg1_data; arg2 = jarg1;
  result = LLVMMDNode(arg1,arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_SwiggedfLLVM_GetMDString___(void * jarg1, void * jarg2) {
  char * jresult ;
  LLVMValueRef arg1 ;
  unsigned int *arg2 = (unsigned int *) 0 ;
  char *result = 0 ;
  
  arg1 = (LLVMValueRef)jarg1; 
  arg2 = (unsigned int *)jarg2; 
  result = (char *)LLVMGetMDString(arg1,arg2);
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_SwiggedfLLVM_GetMDNodeNumOperands___(void * jarg1) {
  unsigned int jresult ;
  LLVMValueRef arg1 ;
  unsigned int result;
  
  arg1 = (LLVMValueRef)jarg1; 
  result = (unsigned int)LLVMGetMDNodeNumOperands(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_SwiggedfLLVM_GetMDNodeOperands___(void * jarg1, void * jarg2) {
  LLVMValueRef arg1 ;
  LLVMValueRef *arg2 = (LLVMValueRef *) 0 ;
  
  arg1 = (LLVMValueRef)jarg1; 
  arg2 = (LLVMValueRef *)jarg2; 
  LLVMGetMDNodeOperands(arg1,arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SwiggedfLLVM_BasicBlockAsValue___(void * jarg1) {
  void * jresult ;
  LLVMBasicBlockRef arg1 ;
  LLVMValueRef result;
  
  arg1 = (LLVMBasicBlockRef)jarg1; 
  result = LLVMBasicBlockAsValue(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_SwiggedfLLVM_ValueIsBasicBlock___(void * jarg1) {
  unsigned int jresult ;
  LLVMValueRef arg1 ;
  LLVMBool result;
  
  arg1 = (LLVMValueRef)jarg1; 
  result = (LLVMBool)LLVMValueIsBasicBlock(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SwiggedfLLVM_ValueAsBasicBlock___(void * jarg1) {
  void * jresult ;
  LLVMValueRef arg1 ;
  LLVMBasicBlockRef result;
  
  arg1 = (LLVMValueRef)jarg1; 
  result = LLVMValueAsBasicBlock(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_SwiggedfLLVM_GetBasicBlockName___(void * jarg1) {
  char * jresult ;
  LLVMBasicBlockRef arg1 ;
  char *result = 0 ;
  
  arg1 = (LLVMBasicBlockRef)jarg1; 
  result = (char *)LLVMGetBasicBlockName(arg1);
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SwiggedfLLVM_GetBasicBlockParent___(void * jarg1) {
  void * jresult ;
  LLVMBasicBlockRef arg1 ;
  LLVMValueRef result;
  
  arg1 = (LLVMBasicBlockRef)jarg1; 
  result = LLVMGetBasicBlockParent(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SwiggedfLLVM_GetBasicBlockTerminator___(void * jarg1) {
  void * jresult ;
  LLVMBasicBlockRef arg1 ;
  LLVMValueRef result;
  
  arg1 = (LLVMBasicBlockRef)jarg1; 
  result = LLVMGetBasicBlockTerminator(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_SwiggedfLLVM_CountBasicBlocks___(void * jarg1) {
  unsigned int jresult ;
  LLVMValueRef arg1 ;
  unsigned int result;
  
  arg1 = (LLVMValueRef)jarg1; 
  result = (unsigned int)LLVMCountBasicBlocks(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_SwiggedfLLVM_GetBasicBlocks___(void * jarg1, void * jarg2) {
  LLVMValueRef arg1 ;
  LLVMBasicBlockRef *arg2 = (LLVMBasicBlockRef *) 0 ;
  
  arg1 = (LLVMValueRef)jarg1; 
  arg2 = (LLVMBasicBlockRef *)jarg2; 
  LLVMGetBasicBlocks(arg1,arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SwiggedfLLVM_GetFirstBasicBlock___(void * jarg1) {
  void * jresult ;
  LLVMValueRef arg1 ;
  LLVMBasicBlockRef result;
  
  arg1 = (LLVMValueRef)jarg1; 
  result = LLVMGetFirstBasicBlock(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SwiggedfLLVM_GetLastBasicBlock___(void * jarg1) {
  void * jresult ;
  LLVMValueRef arg1 ;
  LLVMBasicBlockRef result;
  
  arg1 = (LLVMValueRef)jarg1; 
  result = LLVMGetLastBasicBlock(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SwiggedfLLVM_GetNextBasicBlock___(void * jarg1) {
  void * jresult ;
  LLVMBasicBlockRef arg1 ;
  LLVMBasicBlockRef result;
  
  arg1 = (LLVMBasicBlockRef)jarg1; 
  result = LLVMGetNextBasicBlock(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SwiggedfLLVM_GetPreviousBasicBlock___(void * jarg1) {
  void * jresult ;
  LLVMBasicBlockRef arg1 ;
  LLVMBasicBlockRef result;
  
  arg1 = (LLVMBasicBlockRef)jarg1; 
  result = LLVMGetPreviousBasicBlock(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SwiggedfLLVM_GetEntryBasicBlock___(void * jarg1) {
  void * jresult ;
  LLVMValueRef arg1 ;
  LLVMBasicBlockRef result;
  
  arg1 = (LLVMValueRef)jarg1; 
  result = LLVMGetEntryBasicBlock(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SwiggedfLLVM_AppendBasicBlockInContext___(void * jarg1, void * jarg2, char * jarg3) {
  void * jresult ;
  LLVMContextRef arg1 ;
  LLVMValueRef arg2 ;
  char *arg3 = (char *) 0 ;
  LLVMBasicBlockRef result;
  
  arg1 = (LLVMContextRef)jarg1; 
  arg2 = (LLVMValueRef)jarg2; 
  arg3 = (char *)jarg3; 
  result = LLVMAppendBasicBlockInContext(arg1,arg2,(char const *)arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SwiggedfLLVM_AppendBasicBlock___(void * jarg1, char * jarg2) {
  void * jresult ;
  LLVMValueRef arg1 ;
  char *arg2 = (char *) 0 ;
  LLVMBasicBlockRef result;
  
  arg1 = (LLVMValueRef)jarg1; 
  arg2 = (char *)jarg2; 
  result = LLVMAppendBasicBlock(arg1,(char const *)arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SwiggedfLLVM_InsertBasicBlockInContext___(void * jarg1, void * jarg2, char * jarg3) {
  void * jresult ;
  LLVMContextRef arg1 ;
  LLVMBasicBlockRef arg2 ;
  char *arg3 = (char *) 0 ;
  LLVMBasicBlockRef result;
  
  arg1 = (LLVMContextRef)jarg1; 
  arg2 = (LLVMBasicBlockRef)jarg2; 
  arg3 = (char *)jarg3; 
  result = LLVMInsertBasicBlockInContext(arg1,arg2,(char const *)arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SwiggedfLLVM_InsertBasicBlock___(void * jarg1, char * jarg2) {
  void * jresult ;
  LLVMBasicBlockRef arg1 ;
  char *arg2 = (char *) 0 ;
  LLVMBasicBlockRef result;
  
  arg1 = (LLVMBasicBlockRef)jarg1; 
  arg2 = (char *)jarg2; 
  result = LLVMInsertBasicBlock(arg1,(char const *)arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_SwiggedfLLVM_DeleteBasicBlock___(void * jarg1) {
  LLVMBasicBlockRef arg1 ;
  
  arg1 = (LLVMBasicBlockRef)jarg1; 
  LLVMDeleteBasicBlock(arg1);
}


SWIGEXPORT void SWIGSTDCALL CSharp_SwiggedfLLVM_RemoveBasicBlockFromParent___(void * jarg1) {
  LLVMBasicBlockRef arg1 ;
  
  arg1 = (LLVMBasicBlockRef)jarg1; 
  LLVMRemoveBasicBlockFromParent(arg1);
}


SWIGEXPORT void SWIGSTDCALL CSharp_SwiggedfLLVM_MoveBasicBlockBefore___(void * jarg1, void * jarg2) {
  LLVMBasicBlockRef arg1 ;
  LLVMBasicBlockRef arg2 ;
  
  arg1 = (LLVMBasicBlockRef)jarg1; 
  arg2 = (LLVMBasicBlockRef)jarg2; 
  LLVMMoveBasicBlockBefore(arg1,arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_SwiggedfLLVM_MoveBasicBlockAfter___(void * jarg1, void * jarg2) {
  LLVMBasicBlockRef arg1 ;
  LLVMBasicBlockRef arg2 ;
  
  arg1 = (LLVMBasicBlockRef)jarg1; 
  arg2 = (LLVMBasicBlockRef)jarg2; 
  LLVMMoveBasicBlockAfter(arg1,arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SwiggedfLLVM_GetFirstInstruction___(void * jarg1) {
  void * jresult ;
  LLVMBasicBlockRef arg1 ;
  LLVMValueRef result;
  
  arg1 = (LLVMBasicBlockRef)jarg1; 
  result = LLVMGetFirstInstruction(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SwiggedfLLVM_GetLastInstruction___(void * jarg1) {
  void * jresult ;
  LLVMBasicBlockRef arg1 ;
  LLVMValueRef result;
  
  arg1 = (LLVMBasicBlockRef)jarg1; 
  result = LLVMGetLastInstruction(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_SwiggedfLLVM_HasMetadata___(void * jarg1) {
  int jresult ;
  LLVMValueRef arg1 ;
  int result;
  
  arg1 = (LLVMValueRef)jarg1; 
  result = (int)LLVMHasMetadata(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SwiggedfLLVM_GetMetadata___(void * jarg1, unsigned int jarg2) {
  void * jresult ;
  LLVMValueRef arg1 ;
  unsigned int arg2 ;
  LLVMValueRef result;
  
  arg1 = (LLVMValueRef)jarg1; 
  arg2 = (unsigned int)jarg2; 
  result = LLVMGetMetadata(arg1,arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_SwiggedfLLVM_SetMetadata___(void * jarg1, unsigned int jarg2, void * jarg3) {
  LLVMValueRef arg1 ;
  unsigned int arg2 ;
  LLVMValueRef arg3 ;
  
  arg1 = (LLVMValueRef)jarg1; 
  arg2 = (unsigned int)jarg2; 
  arg3 = (LLVMValueRef)jarg3; 
  LLVMSetMetadata(arg1,arg2,arg3);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SwiggedfLLVM_GetInstructionParent___(void * jarg1) {
  void * jresult ;
  LLVMValueRef arg1 ;
  LLVMBasicBlockRef result;
  
  arg1 = (LLVMValueRef)jarg1; 
  result = LLVMGetInstructionParent(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SwiggedfLLVM_GetNextInstruction___(void * jarg1) {
  void * jresult ;
  LLVMValueRef arg1 ;
  LLVMValueRef result;
  
  arg1 = (LLVMValueRef)jarg1; 
  result = LLVMGetNextInstruction(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SwiggedfLLVM_GetPreviousInstruction___(void * jarg1) {
  void * jresult ;
  LLVMValueRef arg1 ;
  LLVMValueRef result;
  
  arg1 = (LLVMValueRef)jarg1; 
  result = LLVMGetPreviousInstruction(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_SwiggedfLLVM_InstructionRemoveFromParent___(void * jarg1) {
  LLVMValueRef arg1 ;
  
  arg1 = (LLVMValueRef)jarg1; 
  LLVMInstructionRemoveFromParent(arg1);
}


SWIGEXPORT void SWIGSTDCALL CSharp_SwiggedfLLVM_InstructionEraseFromParent___(void * jarg1) {
  LLVMValueRef arg1 ;
  
  arg1 = (LLVMValueRef)jarg1; 
  LLVMInstructionEraseFromParent(arg1);
}


SWIGEXPORT int SWIGSTDCALL CSharp_SwiggedfLLVM_GetInstructionOpcode___(void * jarg1) {
  int jresult ;
  LLVMValueRef arg1 ;
  LLVMOpcode result;
  
  arg1 = (LLVMValueRef)jarg1; 
  result = (LLVMOpcode)LLVMGetInstructionOpcode(arg1);
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_SwiggedfLLVM_GetICmpPredicate___(void * jarg1) {
  int jresult ;
  LLVMValueRef arg1 ;
  LLVMIntPredicate result;
  
  arg1 = (LLVMValueRef)jarg1; 
  result = (LLVMIntPredicate)LLVMGetICmpPredicate(arg1);
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_SwiggedfLLVM_GetFCmpPredicate___(void * jarg1) {
  int jresult ;
  LLVMValueRef arg1 ;
  LLVMRealPredicate result;
  
  arg1 = (LLVMValueRef)jarg1; 
  result = (LLVMRealPredicate)LLVMGetFCmpPredicate(arg1);
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SwiggedfLLVM_InstructionClone___(void * jarg1) {
  void * jresult ;
  LLVMValueRef arg1 ;
  LLVMValueRef result;
  
  arg1 = (LLVMValueRef)jarg1; 
  result = LLVMInstructionClone(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_SwiggedfLLVM_GetNumArgOperands___(void * jarg1) {
  unsigned int jresult ;
  LLVMValueRef arg1 ;
  unsigned int result;
  
  arg1 = (LLVMValueRef)jarg1; 
  result = (unsigned int)LLVMGetNumArgOperands(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_SwiggedfLLVM_SetInstructionCallConv___(void * jarg1, unsigned int jarg2) {
  LLVMValueRef arg1 ;
  unsigned int arg2 ;
  
  arg1 = (LLVMValueRef)jarg1; 
  arg2 = (unsigned int)jarg2; 
  LLVMSetInstructionCallConv(arg1,arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_SwiggedfLLVM_GetInstructionCallConv___(void * jarg1) {
  unsigned int jresult ;
  LLVMValueRef arg1 ;
  unsigned int result;
  
  arg1 = (LLVMValueRef)jarg1; 
  result = (unsigned int)LLVMGetInstructionCallConv(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_SwiggedfLLVM_SetInstrParamAlignment___(void * jarg1, unsigned int jarg2, unsigned int jarg3) {
  LLVMValueRef arg1 ;
  unsigned int arg2 ;
  unsigned int arg3 ;
  
  arg1 = (LLVMValueRef)jarg1; 
  arg2 = (unsigned int)jarg2; 
  arg3 = (unsigned int)jarg3; 
  LLVMSetInstrParamAlignment(arg1,arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_SwiggedfLLVM_AddCallSiteAttribute___(void * jarg1, unsigned int jarg2, void * jarg3) {
  LLVMValueRef arg1 ;
  LLVMAttributeIndex arg2 ;
  LLVMAttributeRef arg3 ;
  
  arg1 = (LLVMValueRef)jarg1; 
  arg2 = (LLVMAttributeIndex)jarg2; 
  arg3 = (LLVMAttributeRef)jarg3; 
  LLVMAddCallSiteAttribute(arg1,arg2,arg3);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_SwiggedfLLVM_GetCallSiteAttributeCount___(void * jarg1, unsigned int jarg2) {
  unsigned int jresult ;
  LLVMValueRef arg1 ;
  LLVMAttributeIndex arg2 ;
  unsigned int result;
  
  arg1 = (LLVMValueRef)jarg1; 
  arg2 = (LLVMAttributeIndex)jarg2; 
  result = (unsigned int)LLVMGetCallSiteAttributeCount(arg1,arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_SwiggedfLLVM_GetCallSiteAttributes___(void * jarg1, unsigned int jarg2, void * jarg3) {
  LLVMValueRef arg1 ;
  LLVMAttributeIndex arg2 ;
  LLVMAttributeRef *arg3 = (LLVMAttributeRef *) 0 ;
  
  arg1 = (LLVMValueRef)jarg1; 
  arg2 = (LLVMAttributeIndex)jarg2; 
  arg3 = (LLVMAttributeRef *)jarg3; 
  LLVMGetCallSiteAttributes(arg1,arg2,arg3);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SwiggedfLLVM_GetCallSiteEnumAttribute___(void * jarg1, unsigned int jarg2, unsigned int jarg3) {
  void * jresult ;
  LLVMValueRef arg1 ;
  LLVMAttributeIndex arg2 ;
  unsigned int arg3 ;
  LLVMAttributeRef result;
  
  arg1 = (LLVMValueRef)jarg1; 
  arg2 = (LLVMAttributeIndex)jarg2; 
  arg3 = (unsigned int)jarg3; 
  result = LLVMGetCallSiteEnumAttribute(arg1,arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SwiggedfLLVM_GetCallSiteStringAttribute___(void * jarg1, unsigned int jarg2, char * jarg3, unsigned int jarg4) {
  void * jresult ;
  LLVMValueRef arg1 ;
  LLVMAttributeIndex arg2 ;
  char *arg3 = (char *) 0 ;
  unsigned int arg4 ;
  LLVMAttributeRef result;
  
  arg1 = (LLVMValueRef)jarg1; 
  arg2 = (LLVMAttributeIndex)jarg2; 
  arg3 = (char *)jarg3; 
  arg4 = (unsigned int)jarg4; 
  result = LLVMGetCallSiteStringAttribute(arg1,arg2,(char const *)arg3,arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_SwiggedfLLVM_RemoveCallSiteEnumAttribute___(void * jarg1, unsigned int jarg2, unsigned int jarg3) {
  LLVMValueRef arg1 ;
  LLVMAttributeIndex arg2 ;
  unsigned int arg3 ;
  
  arg1 = (LLVMValueRef)jarg1; 
  arg2 = (LLVMAttributeIndex)jarg2; 
  arg3 = (unsigned int)jarg3; 
  LLVMRemoveCallSiteEnumAttribute(arg1,arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_SwiggedfLLVM_RemoveCallSiteStringAttribute___(void * jarg1, unsigned int jarg2, char * jarg3, unsigned int jarg4) {
  LLVMValueRef arg1 ;
  LLVMAttributeIndex arg2 ;
  char *arg3 = (char *) 0 ;
  unsigned int arg4 ;
  
  arg1 = (LLVMValueRef)jarg1; 
  arg2 = (LLVMAttributeIndex)jarg2; 
  arg3 = (char *)jarg3; 
  arg4 = (unsigned int)jarg4; 
  LLVMRemoveCallSiteStringAttribute(arg1,arg2,(char const *)arg3,arg4);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SwiggedfLLVM_GetCalledValue___(void * jarg1) {
  void * jresult ;
  LLVMValueRef arg1 ;
  LLVMValueRef result;
  
  arg1 = (LLVMValueRef)jarg1; 
  result = LLVMGetCalledValue(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_SwiggedfLLVM_IsTailCall___(void * jarg1) {
  unsigned int jresult ;
  LLVMValueRef arg1 ;
  LLVMBool result;
  
  arg1 = (LLVMValueRef)jarg1; 
  result = (LLVMBool)LLVMIsTailCall(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_SwiggedfLLVM_SetTailCall___(void * jarg1, unsigned int jarg2) {
  LLVMValueRef arg1 ;
  LLVMBool arg2 ;
  
  arg1 = (LLVMValueRef)jarg1; 
  arg2 = jarg2 ? true : false; 
  LLVMSetTailCall(arg1,arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SwiggedfLLVM_GetNormalDest___(void * jarg1) {
  void * jresult ;
  LLVMValueRef arg1 ;
  LLVMBasicBlockRef result;
  
  arg1 = (LLVMValueRef)jarg1; 
  result = LLVMGetNormalDest(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SwiggedfLLVM_GetUnwindDest___(void * jarg1) {
  void * jresult ;
  LLVMValueRef arg1 ;
  LLVMBasicBlockRef result;
  
  arg1 = (LLVMValueRef)jarg1; 
  result = LLVMGetUnwindDest(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_SwiggedfLLVM_SetNormalDest___(void * jarg1, void * jarg2) {
  LLVMValueRef arg1 ;
  LLVMBasicBlockRef arg2 ;
  
  arg1 = (LLVMValueRef)jarg1; 
  arg2 = (LLVMBasicBlockRef)jarg2; 
  LLVMSetNormalDest(arg1,arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_SwiggedfLLVM_SetUnwindDest___(void * jarg1, void * jarg2) {
  LLVMValueRef arg1 ;
  LLVMBasicBlockRef arg2 ;
  
  arg1 = (LLVMValueRef)jarg1; 
  arg2 = (LLVMBasicBlockRef)jarg2; 
  LLVMSetUnwindDest(arg1,arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_SwiggedfLLVM_GetNumSuccessors___(void * jarg1) {
  unsigned int jresult ;
  LLVMValueRef arg1 ;
  unsigned int result;
  
  arg1 = (LLVMValueRef)jarg1; 
  result = (unsigned int)LLVMGetNumSuccessors(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SwiggedfLLVM_GetSuccessor___(void * jarg1, unsigned int jarg2) {
  void * jresult ;
  LLVMValueRef arg1 ;
  unsigned int arg2 ;
  LLVMBasicBlockRef result;
  
  arg1 = (LLVMValueRef)jarg1; 
  arg2 = (unsigned int)jarg2; 
  result = LLVMGetSuccessor(arg1,arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_SwiggedfLLVM_SetSuccessor___(void * jarg1, unsigned int jarg2, void * jarg3) {
  LLVMValueRef arg1 ;
  unsigned int arg2 ;
  LLVMBasicBlockRef arg3 ;
  
  arg1 = (LLVMValueRef)jarg1; 
  arg2 = (unsigned int)jarg2; 
  arg3 = (LLVMBasicBlockRef)jarg3; 
  LLVMSetSuccessor(arg1,arg2,arg3);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_SwiggedfLLVM_IsConditional___(void * jarg1) {
  unsigned int jresult ;
  LLVMValueRef arg1 ;
  LLVMBool result;
  
  arg1 = (LLVMValueRef)jarg1; 
  result = (LLVMBool)LLVMIsConditional(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SwiggedfLLVM_GetCondition___(void * jarg1) {
  void * jresult ;
  LLVMValueRef arg1 ;
  LLVMValueRef result;
  
  arg1 = (LLVMValueRef)jarg1; 
  result = LLVMGetCondition(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_SwiggedfLLVM_SetCondition___(void * jarg1, void * jarg2) {
  LLVMValueRef arg1 ;
  LLVMValueRef arg2 ;
  
  arg1 = (LLVMValueRef)jarg1; 
  arg2 = (LLVMValueRef)jarg2; 
  LLVMSetCondition(arg1,arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SwiggedfLLVM_GetSwitchDefaultDest___(void * jarg1) {
  void * jresult ;
  LLVMValueRef arg1 ;
  LLVMBasicBlockRef result;
  
  arg1 = (LLVMValueRef)jarg1; 
  result = LLVMGetSwitchDefaultDest(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SwiggedfLLVM_GetAllocatedType___(void * jarg1) {
  void * jresult ;
  LLVMValueRef arg1 ;
  LLVMTypeRef result;
  
  arg1 = (LLVMValueRef)jarg1; 
  result = LLVMGetAllocatedType(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_SwiggedfLLVM_IsInBounds___(void * jarg1) {
  unsigned int jresult ;
  LLVMValueRef arg1 ;
  LLVMBool result;
  
  arg1 = (LLVMValueRef)jarg1; 
  result = (LLVMBool)LLVMIsInBounds(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_SwiggedfLLVM_SetIsInBounds___(void * jarg1, unsigned int jarg2) {
  LLVMValueRef arg1 ;
  LLVMBool arg2 ;
  
  arg1 = (LLVMValueRef)jarg1; 
  arg2 = jarg2 ? true : false; 
  LLVMSetIsInBounds(arg1,arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_SwiggedfLLVM_AddIncoming___(void * jarg1, void * jarg2, void* arg3_data, unsigned int jarg3) {
  LLVMValueRef arg1 ;
  LLVMValueRef *arg2 = (LLVMValueRef *) 0 ;
  LLVMBasicBlockRef *arg3 = (LLVMBasicBlockRef *) 0 ;
  unsigned int arg4 ;
  
  arg1 = (LLVMValueRef)jarg1; 
  arg2 = (LLVMValueRef *)jarg2; 
  arg3 = (LLVMBasicBlockRef*)arg3_data; arg4 = jarg3;
  LLVMAddIncoming(arg1,arg2,arg3,arg4);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_SwiggedfLLVM_CountIncoming___(void * jarg1) {
  unsigned int jresult ;
  LLVMValueRef arg1 ;
  unsigned int result;
  
  arg1 = (LLVMValueRef)jarg1; 
  result = (unsigned int)LLVMCountIncoming(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SwiggedfLLVM_GetIncomingValue___(void * jarg1, unsigned int jarg2) {
  void * jresult ;
  LLVMValueRef arg1 ;
  unsigned int arg2 ;
  LLVMValueRef result;
  
  arg1 = (LLVMValueRef)jarg1; 
  arg2 = (unsigned int)jarg2; 
  result = LLVMGetIncomingValue(arg1,arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SwiggedfLLVM_GetIncomingBlock___(void * jarg1, unsigned int jarg2) {
  void * jresult ;
  LLVMValueRef arg1 ;
  unsigned int arg2 ;
  LLVMBasicBlockRef result;
  
  arg1 = (LLVMValueRef)jarg1; 
  arg2 = (unsigned int)jarg2; 
  result = LLVMGetIncomingBlock(arg1,arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_SwiggedfLLVM_GetNumIndices___(void * jarg1) {
  unsigned int jresult ;
  LLVMValueRef arg1 ;
  unsigned int result;
  
  arg1 = (LLVMValueRef)jarg1; 
  result = (unsigned int)LLVMGetNumIndices(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SwiggedfLLVM_CreateBuilderInContext___(void * jarg1) {
  void * jresult ;
  LLVMContextRef arg1 ;
  LLVMBuilderRef result;
  
  arg1 = (LLVMContextRef)jarg1; 
  result = LLVMCreateBuilderInContext(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SwiggedfLLVM_CreateBuilder___() {
  void * jresult ;
  LLVMBuilderRef result;
  
  result = LLVMCreateBuilder();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_SwiggedfLLVM_PositionBuilder___(void * jarg1, void * jarg2, void * jarg3) {
  LLVMBuilderRef arg1 ;
  LLVMBasicBlockRef arg2 ;
  LLVMValueRef arg3 ;
  
  arg1 = (LLVMBuilderRef)jarg1; 
  arg2 = (LLVMBasicBlockRef)jarg2; 
  arg3 = (LLVMValueRef)jarg3; 
  LLVMPositionBuilder(arg1,arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_SwiggedfLLVM_PositionBuilderBefore___(void * jarg1, void * jarg2) {
  LLVMBuilderRef arg1 ;
  LLVMValueRef arg2 ;
  
  arg1 = (LLVMBuilderRef)jarg1; 
  arg2 = (LLVMValueRef)jarg2; 
  LLVMPositionBuilderBefore(arg1,arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_SwiggedfLLVM_PositionBuilderAtEnd___(void * jarg1, void * jarg2) {
  LLVMBuilderRef arg1 ;
  LLVMBasicBlockRef arg2 ;
  
  arg1 = (LLVMBuilderRef)jarg1; 
  arg2 = (LLVMBasicBlockRef)jarg2; 
  LLVMPositionBuilderAtEnd(arg1,arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SwiggedfLLVM_GetInsertBlock___(void * jarg1) {
  void * jresult ;
  LLVMBuilderRef arg1 ;
  LLVMBasicBlockRef result;
  
  arg1 = (LLVMBuilderRef)jarg1; 
  result = LLVMGetInsertBlock(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_SwiggedfLLVM_ClearInsertionPosition___(void * jarg1) {
  LLVMBuilderRef arg1 ;
  
  arg1 = (LLVMBuilderRef)jarg1; 
  LLVMClearInsertionPosition(arg1);
}


SWIGEXPORT void SWIGSTDCALL CSharp_SwiggedfLLVM_InsertIntoBuilder___(void * jarg1, void * jarg2) {
  LLVMBuilderRef arg1 ;
  LLVMValueRef arg2 ;
  
  arg1 = (LLVMBuilderRef)jarg1; 
  arg2 = (LLVMValueRef)jarg2; 
  LLVMInsertIntoBuilder(arg1,arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_SwiggedfLLVM_InsertIntoBuilderWithName___(void * jarg1, void * jarg2, char * jarg3) {
  LLVMBuilderRef arg1 ;
  LLVMValueRef arg2 ;
  char *arg3 = (char *) 0 ;
  
  arg1 = (LLVMBuilderRef)jarg1; 
  arg2 = (LLVMValueRef)jarg2; 
  arg3 = (char *)jarg3; 
  LLVMInsertIntoBuilderWithName(arg1,arg2,(char const *)arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_SwiggedfLLVM_DisposeBuilder___(void * jarg1) {
  LLVMBuilderRef arg1 ;
  
  arg1 = (LLVMBuilderRef)jarg1; 
  LLVMDisposeBuilder(arg1);
}


SWIGEXPORT void SWIGSTDCALL CSharp_SwiggedfLLVM_SetCurrentDebugLocation___(void * jarg1, void * jarg2) {
  LLVMBuilderRef arg1 ;
  LLVMValueRef arg2 ;
  
  arg1 = (LLVMBuilderRef)jarg1; 
  arg2 = (LLVMValueRef)jarg2; 
  LLVMSetCurrentDebugLocation(arg1,arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SwiggedfLLVM_GetCurrentDebugLocation___(void * jarg1) {
  void * jresult ;
  LLVMBuilderRef arg1 ;
  LLVMValueRef result;
  
  arg1 = (LLVMBuilderRef)jarg1; 
  result = LLVMGetCurrentDebugLocation(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_SwiggedfLLVM_SetInstDebugLocation___(void * jarg1, void * jarg2) {
  LLVMBuilderRef arg1 ;
  LLVMValueRef arg2 ;
  
  arg1 = (LLVMBuilderRef)jarg1; 
  arg2 = (LLVMValueRef)jarg2; 
  LLVMSetInstDebugLocation(arg1,arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SwiggedfLLVM_BuildRetVoid___(void * jarg1) {
  void * jresult ;
  LLVMBuilderRef arg1 ;
  LLVMValueRef result;
  
  arg1 = (LLVMBuilderRef)jarg1; 
  result = LLVMBuildRetVoid(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SwiggedfLLVM_BuildRet___(void * jarg1, void * jarg2) {
  void * jresult ;
  LLVMBuilderRef arg1 ;
  LLVMValueRef arg2 ;
  LLVMValueRef result;
  
  arg1 = (LLVMBuilderRef)jarg1; 
  arg2 = (LLVMValueRef)jarg2; 
  result = LLVMBuildRet(arg1,arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SwiggedfLLVM_BuildAggregateRet___(void * jarg1, void* arg2_data, unsigned int jarg2) {
  void * jresult ;
  LLVMBuilderRef arg1 ;
  LLVMValueRef *arg2 = (LLVMValueRef *) 0 ;
  unsigned int arg3 ;
  LLVMValueRef result;
  
  arg1 = (LLVMBuilderRef)jarg1; 
  arg2 = (LLVMValueRef*)arg2_data; arg3 = jarg2;
  result = LLVMBuildAggregateRet(arg1,arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SwiggedfLLVM_BuildBr___(void * jarg1, void * jarg2) {
  void * jresult ;
  LLVMBuilderRef arg1 ;
  LLVMBasicBlockRef arg2 ;
  LLVMValueRef result;
  
  arg1 = (LLVMBuilderRef)jarg1; 
  arg2 = (LLVMBasicBlockRef)jarg2; 
  result = LLVMBuildBr(arg1,arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SwiggedfLLVM_BuildCondBr___(void * jarg1, void * jarg2, void * jarg3, void * jarg4) {
  void * jresult ;
  LLVMBuilderRef arg1 ;
  LLVMValueRef arg2 ;
  LLVMBasicBlockRef arg3 ;
  LLVMBasicBlockRef arg4 ;
  LLVMValueRef result;
  
  arg1 = (LLVMBuilderRef)jarg1; 
  arg2 = (LLVMValueRef)jarg2; 
  arg3 = (LLVMBasicBlockRef)jarg3; 
  arg4 = (LLVMBasicBlockRef)jarg4; 
  result = LLVMBuildCondBr(arg1,arg2,arg3,arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SwiggedfLLVM_BuildSwitch___(void * jarg1, void * jarg2, void * jarg3, unsigned int jarg4) {
  void * jresult ;
  LLVMBuilderRef arg1 ;
  LLVMValueRef arg2 ;
  LLVMBasicBlockRef arg3 ;
  unsigned int arg4 ;
  LLVMValueRef result;
  
  arg1 = (LLVMBuilderRef)jarg1; 
  arg2 = (LLVMValueRef)jarg2; 
  arg3 = (LLVMBasicBlockRef)jarg3; 
  arg4 = (unsigned int)jarg4; 
  result = LLVMBuildSwitch(arg1,arg2,arg3,arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SwiggedfLLVM_BuildIndirectBr___(void * jarg1, void * jarg2, unsigned int jarg3) {
  void * jresult ;
  LLVMBuilderRef arg1 ;
  LLVMValueRef arg2 ;
  unsigned int arg3 ;
  LLVMValueRef result;
  
  arg1 = (LLVMBuilderRef)jarg1; 
  arg2 = (LLVMValueRef)jarg2; 
  arg3 = (unsigned int)jarg3; 
  result = LLVMBuildIndirectBr(arg1,arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SwiggedfLLVM_BuildInvoke___(void * jarg1, void * jarg2, void* arg3_data, unsigned int jarg3, void * jarg5, void * jarg6, char * jarg7) {
  void * jresult ;
  LLVMBuilderRef arg1 ;
  LLVMValueRef arg2 ;
  LLVMValueRef *arg3 = (LLVMValueRef *) 0 ;
  unsigned int arg4 ;
  LLVMBasicBlockRef arg5 ;
  LLVMBasicBlockRef arg6 ;
  char *arg7 = (char *) 0 ;
  LLVMValueRef result;
  
  arg1 = (LLVMBuilderRef)jarg1; 
  arg2 = (LLVMValueRef)jarg2; 
  arg3 = (LLVMValueRef*)arg3_data; arg4 = jarg3;
  arg5 = (LLVMBasicBlockRef)jarg5; 
  arg6 = (LLVMBasicBlockRef)jarg6; 
  arg7 = (char *)jarg7; 
  result = LLVMBuildInvoke(arg1,arg2,arg3,arg4,arg5,arg6,(char const *)arg7);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SwiggedfLLVM_BuildLandingPad___(void * jarg1, void * jarg2, void * jarg3, unsigned int jarg4, char * jarg5) {
  void * jresult ;
  LLVMBuilderRef arg1 ;
  LLVMTypeRef arg2 ;
  LLVMValueRef arg3 ;
  unsigned int arg4 ;
  char *arg5 = (char *) 0 ;
  LLVMValueRef result;
  
  arg1 = (LLVMBuilderRef)jarg1; 
  arg2 = (LLVMTypeRef)jarg2; 
  arg3 = (LLVMValueRef)jarg3; 
  arg4 = (unsigned int)jarg4; 
  arg5 = (char *)jarg5; 
  result = LLVMBuildLandingPad(arg1,arg2,arg3,arg4,(char const *)arg5);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SwiggedfLLVM_BuildResume___(void * jarg1, void * jarg2) {
  void * jresult ;
  LLVMBuilderRef arg1 ;
  LLVMValueRef arg2 ;
  LLVMValueRef result;
  
  arg1 = (LLVMBuilderRef)jarg1; 
  arg2 = (LLVMValueRef)jarg2; 
  result = LLVMBuildResume(arg1,arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SwiggedfLLVM_BuildUnreachable___(void * jarg1) {
  void * jresult ;
  LLVMBuilderRef arg1 ;
  LLVMValueRef result;
  
  arg1 = (LLVMBuilderRef)jarg1; 
  result = LLVMBuildUnreachable(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_SwiggedfLLVM_AddCase___(void * jarg1, void * jarg2, void * jarg3) {
  LLVMValueRef arg1 ;
  LLVMValueRef arg2 ;
  LLVMBasicBlockRef arg3 ;
  
  arg1 = (LLVMValueRef)jarg1; 
  arg2 = (LLVMValueRef)jarg2; 
  arg3 = (LLVMBasicBlockRef)jarg3; 
  LLVMAddCase(arg1,arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_SwiggedfLLVM_AddDestination___(void * jarg1, void * jarg2) {
  LLVMValueRef arg1 ;
  LLVMBasicBlockRef arg2 ;
  
  arg1 = (LLVMValueRef)jarg1; 
  arg2 = (LLVMBasicBlockRef)jarg2; 
  LLVMAddDestination(arg1,arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_SwiggedfLLVM_GetNumClauses___(void * jarg1) {
  unsigned int jresult ;
  LLVMValueRef arg1 ;
  unsigned int result;
  
  arg1 = (LLVMValueRef)jarg1; 
  result = (unsigned int)LLVMGetNumClauses(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SwiggedfLLVM_GetClause___(void * jarg1, unsigned int jarg2) {
  void * jresult ;
  LLVMValueRef arg1 ;
  unsigned int arg2 ;
  LLVMValueRef result;
  
  arg1 = (LLVMValueRef)jarg1; 
  arg2 = (unsigned int)jarg2; 
  result = LLVMGetClause(arg1,arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_SwiggedfLLVM_AddClause___(void * jarg1, void * jarg2) {
  LLVMValueRef arg1 ;
  LLVMValueRef arg2 ;
  
  arg1 = (LLVMValueRef)jarg1; 
  arg2 = (LLVMValueRef)jarg2; 
  LLVMAddClause(arg1,arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_SwiggedfLLVM_IsCleanup___(void * jarg1) {
  unsigned int jresult ;
  LLVMValueRef arg1 ;
  LLVMBool result;
  
  arg1 = (LLVMValueRef)jarg1; 
  result = (LLVMBool)LLVMIsCleanup(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_SwiggedfLLVM_SetCleanup___(void * jarg1, unsigned int jarg2) {
  LLVMValueRef arg1 ;
  LLVMBool arg2 ;
  
  arg1 = (LLVMValueRef)jarg1; 
  arg2 = jarg2 ? true : false; 
  LLVMSetCleanup(arg1,arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SwiggedfLLVM_BuildAdd___(void * jarg1, void * jarg2, void * jarg3, char * jarg4) {
  void * jresult ;
  LLVMBuilderRef arg1 ;
  LLVMValueRef arg2 ;
  LLVMValueRef arg3 ;
  char *arg4 = (char *) 0 ;
  LLVMValueRef result;
  
  arg1 = (LLVMBuilderRef)jarg1; 
  arg2 = (LLVMValueRef)jarg2; 
  arg3 = (LLVMValueRef)jarg3; 
  arg4 = (char *)jarg4; 
  result = LLVMBuildAdd(arg1,arg2,arg3,(char const *)arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SwiggedfLLVM_BuildNSWAdd___(void * jarg1, void * jarg2, void * jarg3, char * jarg4) {
  void * jresult ;
  LLVMBuilderRef arg1 ;
  LLVMValueRef arg2 ;
  LLVMValueRef arg3 ;
  char *arg4 = (char *) 0 ;
  LLVMValueRef result;
  
  arg1 = (LLVMBuilderRef)jarg1; 
  arg2 = (LLVMValueRef)jarg2; 
  arg3 = (LLVMValueRef)jarg3; 
  arg4 = (char *)jarg4; 
  result = LLVMBuildNSWAdd(arg1,arg2,arg3,(char const *)arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SwiggedfLLVM_BuildNUWAdd___(void * jarg1, void * jarg2, void * jarg3, char * jarg4) {
  void * jresult ;
  LLVMBuilderRef arg1 ;
  LLVMValueRef arg2 ;
  LLVMValueRef arg3 ;
  char *arg4 = (char *) 0 ;
  LLVMValueRef result;
  
  arg1 = (LLVMBuilderRef)jarg1; 
  arg2 = (LLVMValueRef)jarg2; 
  arg3 = (LLVMValueRef)jarg3; 
  arg4 = (char *)jarg4; 
  result = LLVMBuildNUWAdd(arg1,arg2,arg3,(char const *)arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SwiggedfLLVM_BuildFAdd___(void * jarg1, void * jarg2, void * jarg3, char * jarg4) {
  void * jresult ;
  LLVMBuilderRef arg1 ;
  LLVMValueRef arg2 ;
  LLVMValueRef arg3 ;
  char *arg4 = (char *) 0 ;
  LLVMValueRef result;
  
  arg1 = (LLVMBuilderRef)jarg1; 
  arg2 = (LLVMValueRef)jarg2; 
  arg3 = (LLVMValueRef)jarg3; 
  arg4 = (char *)jarg4; 
  result = LLVMBuildFAdd(arg1,arg2,arg3,(char const *)arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SwiggedfLLVM_BuildSub___(void * jarg1, void * jarg2, void * jarg3, char * jarg4) {
  void * jresult ;
  LLVMBuilderRef arg1 ;
  LLVMValueRef arg2 ;
  LLVMValueRef arg3 ;
  char *arg4 = (char *) 0 ;
  LLVMValueRef result;
  
  arg1 = (LLVMBuilderRef)jarg1; 
  arg2 = (LLVMValueRef)jarg2; 
  arg3 = (LLVMValueRef)jarg3; 
  arg4 = (char *)jarg4; 
  result = LLVMBuildSub(arg1,arg2,arg3,(char const *)arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SwiggedfLLVM_BuildNSWSub___(void * jarg1, void * jarg2, void * jarg3, char * jarg4) {
  void * jresult ;
  LLVMBuilderRef arg1 ;
  LLVMValueRef arg2 ;
  LLVMValueRef arg3 ;
  char *arg4 = (char *) 0 ;
  LLVMValueRef result;
  
  arg1 = (LLVMBuilderRef)jarg1; 
  arg2 = (LLVMValueRef)jarg2; 
  arg3 = (LLVMValueRef)jarg3; 
  arg4 = (char *)jarg4; 
  result = LLVMBuildNSWSub(arg1,arg2,arg3,(char const *)arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SwiggedfLLVM_BuildNUWSub___(void * jarg1, void * jarg2, void * jarg3, char * jarg4) {
  void * jresult ;
  LLVMBuilderRef arg1 ;
  LLVMValueRef arg2 ;
  LLVMValueRef arg3 ;
  char *arg4 = (char *) 0 ;
  LLVMValueRef result;
  
  arg1 = (LLVMBuilderRef)jarg1; 
  arg2 = (LLVMValueRef)jarg2; 
  arg3 = (LLVMValueRef)jarg3; 
  arg4 = (char *)jarg4; 
  result = LLVMBuildNUWSub(arg1,arg2,arg3,(char const *)arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SwiggedfLLVM_BuildFSub___(void * jarg1, void * jarg2, void * jarg3, char * jarg4) {
  void * jresult ;
  LLVMBuilderRef arg1 ;
  LLVMValueRef arg2 ;
  LLVMValueRef arg3 ;
  char *arg4 = (char *) 0 ;
  LLVMValueRef result;
  
  arg1 = (LLVMBuilderRef)jarg1; 
  arg2 = (LLVMValueRef)jarg2; 
  arg3 = (LLVMValueRef)jarg3; 
  arg4 = (char *)jarg4; 
  result = LLVMBuildFSub(arg1,arg2,arg3,(char const *)arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SwiggedfLLVM_BuildMul___(void * jarg1, void * jarg2, void * jarg3, char * jarg4) {
  void * jresult ;
  LLVMBuilderRef arg1 ;
  LLVMValueRef arg2 ;
  LLVMValueRef arg3 ;
  char *arg4 = (char *) 0 ;
  LLVMValueRef result;
  
  arg1 = (LLVMBuilderRef)jarg1; 
  arg2 = (LLVMValueRef)jarg2; 
  arg3 = (LLVMValueRef)jarg3; 
  arg4 = (char *)jarg4; 
  result = LLVMBuildMul(arg1,arg2,arg3,(char const *)arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SwiggedfLLVM_BuildNSWMul___(void * jarg1, void * jarg2, void * jarg3, char * jarg4) {
  void * jresult ;
  LLVMBuilderRef arg1 ;
  LLVMValueRef arg2 ;
  LLVMValueRef arg3 ;
  char *arg4 = (char *) 0 ;
  LLVMValueRef result;
  
  arg1 = (LLVMBuilderRef)jarg1; 
  arg2 = (LLVMValueRef)jarg2; 
  arg3 = (LLVMValueRef)jarg3; 
  arg4 = (char *)jarg4; 
  result = LLVMBuildNSWMul(arg1,arg2,arg3,(char const *)arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SwiggedfLLVM_BuildNUWMul___(void * jarg1, void * jarg2, void * jarg3, char * jarg4) {
  void * jresult ;
  LLVMBuilderRef arg1 ;
  LLVMValueRef arg2 ;
  LLVMValueRef arg3 ;
  char *arg4 = (char *) 0 ;
  LLVMValueRef result;
  
  arg1 = (LLVMBuilderRef)jarg1; 
  arg2 = (LLVMValueRef)jarg2; 
  arg3 = (LLVMValueRef)jarg3; 
  arg4 = (char *)jarg4; 
  result = LLVMBuildNUWMul(arg1,arg2,arg3,(char const *)arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SwiggedfLLVM_BuildFMul___(void * jarg1, void * jarg2, void * jarg3, char * jarg4) {
  void * jresult ;
  LLVMBuilderRef arg1 ;
  LLVMValueRef arg2 ;
  LLVMValueRef arg3 ;
  char *arg4 = (char *) 0 ;
  LLVMValueRef result;
  
  arg1 = (LLVMBuilderRef)jarg1; 
  arg2 = (LLVMValueRef)jarg2; 
  arg3 = (LLVMValueRef)jarg3; 
  arg4 = (char *)jarg4; 
  result = LLVMBuildFMul(arg1,arg2,arg3,(char const *)arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SwiggedfLLVM_BuildUDiv___(void * jarg1, void * jarg2, void * jarg3, char * jarg4) {
  void * jresult ;
  LLVMBuilderRef arg1 ;
  LLVMValueRef arg2 ;
  LLVMValueRef arg3 ;
  char *arg4 = (char *) 0 ;
  LLVMValueRef result;
  
  arg1 = (LLVMBuilderRef)jarg1; 
  arg2 = (LLVMValueRef)jarg2; 
  arg3 = (LLVMValueRef)jarg3; 
  arg4 = (char *)jarg4; 
  result = LLVMBuildUDiv(arg1,arg2,arg3,(char const *)arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SwiggedfLLVM_BuildExactUDiv___(void * jarg1, void * jarg2, void * jarg3, char * jarg4) {
  void * jresult ;
  LLVMBuilderRef arg1 ;
  LLVMValueRef arg2 ;
  LLVMValueRef arg3 ;
  char *arg4 = (char *) 0 ;
  LLVMValueRef result;
  
  arg1 = (LLVMBuilderRef)jarg1; 
  arg2 = (LLVMValueRef)jarg2; 
  arg3 = (LLVMValueRef)jarg3; 
  arg4 = (char *)jarg4; 
  result = LLVMBuildExactUDiv(arg1,arg2,arg3,(char const *)arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SwiggedfLLVM_BuildSDiv___(void * jarg1, void * jarg2, void * jarg3, char * jarg4) {
  void * jresult ;
  LLVMBuilderRef arg1 ;
  LLVMValueRef arg2 ;
  LLVMValueRef arg3 ;
  char *arg4 = (char *) 0 ;
  LLVMValueRef result;
  
  arg1 = (LLVMBuilderRef)jarg1; 
  arg2 = (LLVMValueRef)jarg2; 
  arg3 = (LLVMValueRef)jarg3; 
  arg4 = (char *)jarg4; 
  result = LLVMBuildSDiv(arg1,arg2,arg3,(char const *)arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SwiggedfLLVM_BuildExactSDiv___(void * jarg1, void * jarg2, void * jarg3, char * jarg4) {
  void * jresult ;
  LLVMBuilderRef arg1 ;
  LLVMValueRef arg2 ;
  LLVMValueRef arg3 ;
  char *arg4 = (char *) 0 ;
  LLVMValueRef result;
  
  arg1 = (LLVMBuilderRef)jarg1; 
  arg2 = (LLVMValueRef)jarg2; 
  arg3 = (LLVMValueRef)jarg3; 
  arg4 = (char *)jarg4; 
  result = LLVMBuildExactSDiv(arg1,arg2,arg3,(char const *)arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SwiggedfLLVM_BuildFDiv___(void * jarg1, void * jarg2, void * jarg3, char * jarg4) {
  void * jresult ;
  LLVMBuilderRef arg1 ;
  LLVMValueRef arg2 ;
  LLVMValueRef arg3 ;
  char *arg4 = (char *) 0 ;
  LLVMValueRef result;
  
  arg1 = (LLVMBuilderRef)jarg1; 
  arg2 = (LLVMValueRef)jarg2; 
  arg3 = (LLVMValueRef)jarg3; 
  arg4 = (char *)jarg4; 
  result = LLVMBuildFDiv(arg1,arg2,arg3,(char const *)arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SwiggedfLLVM_BuildURem___(void * jarg1, void * jarg2, void * jarg3, char * jarg4) {
  void * jresult ;
  LLVMBuilderRef arg1 ;
  LLVMValueRef arg2 ;
  LLVMValueRef arg3 ;
  char *arg4 = (char *) 0 ;
  LLVMValueRef result;
  
  arg1 = (LLVMBuilderRef)jarg1; 
  arg2 = (LLVMValueRef)jarg2; 
  arg3 = (LLVMValueRef)jarg3; 
  arg4 = (char *)jarg4; 
  result = LLVMBuildURem(arg1,arg2,arg3,(char const *)arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SwiggedfLLVM_BuildSRem___(void * jarg1, void * jarg2, void * jarg3, char * jarg4) {
  void * jresult ;
  LLVMBuilderRef arg1 ;
  LLVMValueRef arg2 ;
  LLVMValueRef arg3 ;
  char *arg4 = (char *) 0 ;
  LLVMValueRef result;
  
  arg1 = (LLVMBuilderRef)jarg1; 
  arg2 = (LLVMValueRef)jarg2; 
  arg3 = (LLVMValueRef)jarg3; 
  arg4 = (char *)jarg4; 
  result = LLVMBuildSRem(arg1,arg2,arg3,(char const *)arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SwiggedfLLVM_BuildFRem___(void * jarg1, void * jarg2, void * jarg3, char * jarg4) {
  void * jresult ;
  LLVMBuilderRef arg1 ;
  LLVMValueRef arg2 ;
  LLVMValueRef arg3 ;
  char *arg4 = (char *) 0 ;
  LLVMValueRef result;
  
  arg1 = (LLVMBuilderRef)jarg1; 
  arg2 = (LLVMValueRef)jarg2; 
  arg3 = (LLVMValueRef)jarg3; 
  arg4 = (char *)jarg4; 
  result = LLVMBuildFRem(arg1,arg2,arg3,(char const *)arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SwiggedfLLVM_BuildShl___(void * jarg1, void * jarg2, void * jarg3, char * jarg4) {
  void * jresult ;
  LLVMBuilderRef arg1 ;
  LLVMValueRef arg2 ;
  LLVMValueRef arg3 ;
  char *arg4 = (char *) 0 ;
  LLVMValueRef result;
  
  arg1 = (LLVMBuilderRef)jarg1; 
  arg2 = (LLVMValueRef)jarg2; 
  arg3 = (LLVMValueRef)jarg3; 
  arg4 = (char *)jarg4; 
  result = LLVMBuildShl(arg1,arg2,arg3,(char const *)arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SwiggedfLLVM_BuildLShr___(void * jarg1, void * jarg2, void * jarg3, char * jarg4) {
  void * jresult ;
  LLVMBuilderRef arg1 ;
  LLVMValueRef arg2 ;
  LLVMValueRef arg3 ;
  char *arg4 = (char *) 0 ;
  LLVMValueRef result;
  
  arg1 = (LLVMBuilderRef)jarg1; 
  arg2 = (LLVMValueRef)jarg2; 
  arg3 = (LLVMValueRef)jarg3; 
  arg4 = (char *)jarg4; 
  result = LLVMBuildLShr(arg1,arg2,arg3,(char const *)arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SwiggedfLLVM_BuildAShr___(void * jarg1, void * jarg2, void * jarg3, char * jarg4) {
  void * jresult ;
  LLVMBuilderRef arg1 ;
  LLVMValueRef arg2 ;
  LLVMValueRef arg3 ;
  char *arg4 = (char *) 0 ;
  LLVMValueRef result;
  
  arg1 = (LLVMBuilderRef)jarg1; 
  arg2 = (LLVMValueRef)jarg2; 
  arg3 = (LLVMValueRef)jarg3; 
  arg4 = (char *)jarg4; 
  result = LLVMBuildAShr(arg1,arg2,arg3,(char const *)arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SwiggedfLLVM_BuildAnd___(void * jarg1, void * jarg2, void * jarg3, char * jarg4) {
  void * jresult ;
  LLVMBuilderRef arg1 ;
  LLVMValueRef arg2 ;
  LLVMValueRef arg3 ;
  char *arg4 = (char *) 0 ;
  LLVMValueRef result;
  
  arg1 = (LLVMBuilderRef)jarg1; 
  arg2 = (LLVMValueRef)jarg2; 
  arg3 = (LLVMValueRef)jarg3; 
  arg4 = (char *)jarg4; 
  result = LLVMBuildAnd(arg1,arg2,arg3,(char const *)arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SwiggedfLLVM_BuildOr___(void * jarg1, void * jarg2, void * jarg3, char * jarg4) {
  void * jresult ;
  LLVMBuilderRef arg1 ;
  LLVMValueRef arg2 ;
  LLVMValueRef arg3 ;
  char *arg4 = (char *) 0 ;
  LLVMValueRef result;
  
  arg1 = (LLVMBuilderRef)jarg1; 
  arg2 = (LLVMValueRef)jarg2; 
  arg3 = (LLVMValueRef)jarg3; 
  arg4 = (char *)jarg4; 
  result = LLVMBuildOr(arg1,arg2,arg3,(char const *)arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SwiggedfLLVM_BuildXor___(void * jarg1, void * jarg2, void * jarg3, char * jarg4) {
  void * jresult ;
  LLVMBuilderRef arg1 ;
  LLVMValueRef arg2 ;
  LLVMValueRef arg3 ;
  char *arg4 = (char *) 0 ;
  LLVMValueRef result;
  
  arg1 = (LLVMBuilderRef)jarg1; 
  arg2 = (LLVMValueRef)jarg2; 
  arg3 = (LLVMValueRef)jarg3; 
  arg4 = (char *)jarg4; 
  result = LLVMBuildXor(arg1,arg2,arg3,(char const *)arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SwiggedfLLVM_BuildBinOp___(void * jarg1, int jarg2, void * jarg3, void * jarg4, char * jarg5) {
  void * jresult ;
  LLVMBuilderRef arg1 ;
  LLVMOpcode arg2 ;
  LLVMValueRef arg3 ;
  LLVMValueRef arg4 ;
  char *arg5 = (char *) 0 ;
  LLVMValueRef result;
  
  arg1 = (LLVMBuilderRef)jarg1; 
  arg2 = (LLVMOpcode)jarg2; 
  arg3 = (LLVMValueRef)jarg3; 
  arg4 = (LLVMValueRef)jarg4; 
  arg5 = (char *)jarg5; 
  result = LLVMBuildBinOp(arg1,arg2,arg3,arg4,(char const *)arg5);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SwiggedfLLVM_BuildNeg___(void * jarg1, void * jarg2, char * jarg3) {
  void * jresult ;
  LLVMBuilderRef arg1 ;
  LLVMValueRef arg2 ;
  char *arg3 = (char *) 0 ;
  LLVMValueRef result;
  
  arg1 = (LLVMBuilderRef)jarg1; 
  arg2 = (LLVMValueRef)jarg2; 
  arg3 = (char *)jarg3; 
  result = LLVMBuildNeg(arg1,arg2,(char const *)arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SwiggedfLLVM_BuildNSWNeg___(void * jarg1, void * jarg2, char * jarg3) {
  void * jresult ;
  LLVMBuilderRef arg1 ;
  LLVMValueRef arg2 ;
  char *arg3 = (char *) 0 ;
  LLVMValueRef result;
  
  arg1 = (LLVMBuilderRef)jarg1; 
  arg2 = (LLVMValueRef)jarg2; 
  arg3 = (char *)jarg3; 
  result = LLVMBuildNSWNeg(arg1,arg2,(char const *)arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SwiggedfLLVM_BuildNUWNeg___(void * jarg1, void * jarg2, char * jarg3) {
  void * jresult ;
  LLVMBuilderRef arg1 ;
  LLVMValueRef arg2 ;
  char *arg3 = (char *) 0 ;
  LLVMValueRef result;
  
  arg1 = (LLVMBuilderRef)jarg1; 
  arg2 = (LLVMValueRef)jarg2; 
  arg3 = (char *)jarg3; 
  result = LLVMBuildNUWNeg(arg1,arg2,(char const *)arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SwiggedfLLVM_BuildFNeg___(void * jarg1, void * jarg2, char * jarg3) {
  void * jresult ;
  LLVMBuilderRef arg1 ;
  LLVMValueRef arg2 ;
  char *arg3 = (char *) 0 ;
  LLVMValueRef result;
  
  arg1 = (LLVMBuilderRef)jarg1; 
  arg2 = (LLVMValueRef)jarg2; 
  arg3 = (char *)jarg3; 
  result = LLVMBuildFNeg(arg1,arg2,(char const *)arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SwiggedfLLVM_BuildNot___(void * jarg1, void * jarg2, char * jarg3) {
  void * jresult ;
  LLVMBuilderRef arg1 ;
  LLVMValueRef arg2 ;
  char *arg3 = (char *) 0 ;
  LLVMValueRef result;
  
  arg1 = (LLVMBuilderRef)jarg1; 
  arg2 = (LLVMValueRef)jarg2; 
  arg3 = (char *)jarg3; 
  result = LLVMBuildNot(arg1,arg2,(char const *)arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SwiggedfLLVM_BuildMalloc___(void * jarg1, void * jarg2, char * jarg3) {
  void * jresult ;
  LLVMBuilderRef arg1 ;
  LLVMTypeRef arg2 ;
  char *arg3 = (char *) 0 ;
  LLVMValueRef result;
  
  arg1 = (LLVMBuilderRef)jarg1; 
  arg2 = (LLVMTypeRef)jarg2; 
  arg3 = (char *)jarg3; 
  result = LLVMBuildMalloc(arg1,arg2,(char const *)arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SwiggedfLLVM_BuildArrayMalloc___(void * jarg1, void * jarg2, void * jarg3, char * jarg4) {
  void * jresult ;
  LLVMBuilderRef arg1 ;
  LLVMTypeRef arg2 ;
  LLVMValueRef arg3 ;
  char *arg4 = (char *) 0 ;
  LLVMValueRef result;
  
  arg1 = (LLVMBuilderRef)jarg1; 
  arg2 = (LLVMTypeRef)jarg2; 
  arg3 = (LLVMValueRef)jarg3; 
  arg4 = (char *)jarg4; 
  result = LLVMBuildArrayMalloc(arg1,arg2,arg3,(char const *)arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SwiggedfLLVM_BuildAlloca___(void * jarg1, void * jarg2, char * jarg3) {
  void * jresult ;
  LLVMBuilderRef arg1 ;
  LLVMTypeRef arg2 ;
  char *arg3 = (char *) 0 ;
  LLVMValueRef result;
  
  arg1 = (LLVMBuilderRef)jarg1; 
  arg2 = (LLVMTypeRef)jarg2; 
  arg3 = (char *)jarg3; 
  result = LLVMBuildAlloca(arg1,arg2,(char const *)arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SwiggedfLLVM_BuildArrayAlloca___(void * jarg1, void * jarg2, void * jarg3, char * jarg4) {
  void * jresult ;
  LLVMBuilderRef arg1 ;
  LLVMTypeRef arg2 ;
  LLVMValueRef arg3 ;
  char *arg4 = (char *) 0 ;
  LLVMValueRef result;
  
  arg1 = (LLVMBuilderRef)jarg1; 
  arg2 = (LLVMTypeRef)jarg2; 
  arg3 = (LLVMValueRef)jarg3; 
  arg4 = (char *)jarg4; 
  result = LLVMBuildArrayAlloca(arg1,arg2,arg3,(char const *)arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SwiggedfLLVM_BuildFree___(void * jarg1, void * jarg2) {
  void * jresult ;
  LLVMBuilderRef arg1 ;
  LLVMValueRef arg2 ;
  LLVMValueRef result;
  
  arg1 = (LLVMBuilderRef)jarg1; 
  arg2 = (LLVMValueRef)jarg2; 
  result = LLVMBuildFree(arg1,arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SwiggedfLLVM_BuildLoad___(void * jarg1, void * jarg2, char * jarg3) {
  void * jresult ;
  LLVMBuilderRef arg1 ;
  LLVMValueRef arg2 ;
  char *arg3 = (char *) 0 ;
  LLVMValueRef result;
  
  arg1 = (LLVMBuilderRef)jarg1; 
  arg2 = (LLVMValueRef)jarg2; 
  arg3 = (char *)jarg3; 
  result = LLVMBuildLoad(arg1,arg2,(char const *)arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SwiggedfLLVM_BuildStore___(void * jarg1, void * jarg2, void * jarg3) {
  void * jresult ;
  LLVMBuilderRef arg1 ;
  LLVMValueRef arg2 ;
  LLVMValueRef arg3 ;
  LLVMValueRef result;
  
  arg1 = (LLVMBuilderRef)jarg1; 
  arg2 = (LLVMValueRef)jarg2; 
  arg3 = (LLVMValueRef)jarg3; 
  result = LLVMBuildStore(arg1,arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SwiggedfLLVM_BuildGEP___(void * jarg1, void * jarg2, void* arg3_data, unsigned int jarg3, char * jarg5) {
  void * jresult ;
  LLVMBuilderRef arg1 ;
  LLVMValueRef arg2 ;
  LLVMValueRef *arg3 = (LLVMValueRef *) 0 ;
  unsigned int arg4 ;
  char *arg5 = (char *) 0 ;
  LLVMValueRef result;
  
  arg1 = (LLVMBuilderRef)jarg1; 
  arg2 = (LLVMValueRef)jarg2; 
  arg3 = (LLVMValueRef*)arg3_data; arg4 = jarg3;
  arg5 = (char *)jarg5; 
  result = LLVMBuildGEP(arg1,arg2,arg3,arg4,(char const *)arg5);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SwiggedfLLVM_BuildInBoundsGEP___(void * jarg1, void * jarg2, void* arg3_data, unsigned int jarg3, char * jarg5) {
  void * jresult ;
  LLVMBuilderRef arg1 ;
  LLVMValueRef arg2 ;
  LLVMValueRef *arg3 = (LLVMValueRef *) 0 ;
  unsigned int arg4 ;
  char *arg5 = (char *) 0 ;
  LLVMValueRef result;
  
  arg1 = (LLVMBuilderRef)jarg1; 
  arg2 = (LLVMValueRef)jarg2; 
  arg3 = (LLVMValueRef*)arg3_data; arg4 = jarg3;
  arg5 = (char *)jarg5; 
  result = LLVMBuildInBoundsGEP(arg1,arg2,arg3,arg4,(char const *)arg5);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SwiggedfLLVM_BuildStructGEP___(void * jarg1, void * jarg2, unsigned int jarg3, char * jarg4) {
  void * jresult ;
  LLVMBuilderRef arg1 ;
  LLVMValueRef arg2 ;
  unsigned int arg3 ;
  char *arg4 = (char *) 0 ;
  LLVMValueRef result;
  
  arg1 = (LLVMBuilderRef)jarg1; 
  arg2 = (LLVMValueRef)jarg2; 
  arg3 = (unsigned int)jarg3; 
  arg4 = (char *)jarg4; 
  result = LLVMBuildStructGEP(arg1,arg2,arg3,(char const *)arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SwiggedfLLVM_BuildGlobalString___(void * jarg1, char * jarg2, char * jarg3) {
  void * jresult ;
  LLVMBuilderRef arg1 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  LLVMValueRef result;
  
  arg1 = (LLVMBuilderRef)jarg1; 
  arg2 = (char *)jarg2; 
  arg3 = (char *)jarg3; 
  result = LLVMBuildGlobalString(arg1,(char const *)arg2,(char const *)arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SwiggedfLLVM_BuildGlobalStringPtr___(void * jarg1, char * jarg2, char * jarg3) {
  void * jresult ;
  LLVMBuilderRef arg1 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  LLVMValueRef result;
  
  arg1 = (LLVMBuilderRef)jarg1; 
  arg2 = (char *)jarg2; 
  arg3 = (char *)jarg3; 
  result = LLVMBuildGlobalStringPtr(arg1,(char const *)arg2,(char const *)arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_SwiggedfLLVM_GetVolatile___(void * jarg1) {
  unsigned int jresult ;
  LLVMValueRef arg1 ;
  LLVMBool result;
  
  arg1 = (LLVMValueRef)jarg1; 
  result = (LLVMBool)LLVMGetVolatile(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_SwiggedfLLVM_SetVolatile___(void * jarg1, unsigned int jarg2) {
  LLVMValueRef arg1 ;
  LLVMBool arg2 ;
  
  arg1 = (LLVMValueRef)jarg1; 
  arg2 = jarg2 ? true : false; 
  LLVMSetVolatile(arg1,arg2);
}


SWIGEXPORT int SWIGSTDCALL CSharp_SwiggedfLLVM_GetOrdering___(void * jarg1) {
  int jresult ;
  LLVMValueRef arg1 ;
  LLVMAtomicOrdering result;
  
  arg1 = (LLVMValueRef)jarg1; 
  result = (LLVMAtomicOrdering)LLVMGetOrdering(arg1);
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_SwiggedfLLVM_SetOrdering___(void * jarg1, int jarg2) {
  LLVMValueRef arg1 ;
  LLVMAtomicOrdering arg2 ;
  
  arg1 = (LLVMValueRef)jarg1; 
  arg2 = (LLVMAtomicOrdering)jarg2; 
  LLVMSetOrdering(arg1,arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SwiggedfLLVM_BuildTrunc___(void * jarg1, void * jarg2, void * jarg3, char * jarg4) {
  void * jresult ;
  LLVMBuilderRef arg1 ;
  LLVMValueRef arg2 ;
  LLVMTypeRef arg3 ;
  char *arg4 = (char *) 0 ;
  LLVMValueRef result;
  
  arg1 = (LLVMBuilderRef)jarg1; 
  arg2 = (LLVMValueRef)jarg2; 
  arg3 = (LLVMTypeRef)jarg3; 
  arg4 = (char *)jarg4; 
  result = LLVMBuildTrunc(arg1,arg2,arg3,(char const *)arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SwiggedfLLVM_BuildZExt___(void * jarg1, void * jarg2, void * jarg3, char * jarg4) {
  void * jresult ;
  LLVMBuilderRef arg1 ;
  LLVMValueRef arg2 ;
  LLVMTypeRef arg3 ;
  char *arg4 = (char *) 0 ;
  LLVMValueRef result;
  
  arg1 = (LLVMBuilderRef)jarg1; 
  arg2 = (LLVMValueRef)jarg2; 
  arg3 = (LLVMTypeRef)jarg3; 
  arg4 = (char *)jarg4; 
  result = LLVMBuildZExt(arg1,arg2,arg3,(char const *)arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SwiggedfLLVM_BuildSExt___(void * jarg1, void * jarg2, void * jarg3, char * jarg4) {
  void * jresult ;
  LLVMBuilderRef arg1 ;
  LLVMValueRef arg2 ;
  LLVMTypeRef arg3 ;
  char *arg4 = (char *) 0 ;
  LLVMValueRef result;
  
  arg1 = (LLVMBuilderRef)jarg1; 
  arg2 = (LLVMValueRef)jarg2; 
  arg3 = (LLVMTypeRef)jarg3; 
  arg4 = (char *)jarg4; 
  result = LLVMBuildSExt(arg1,arg2,arg3,(char const *)arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SwiggedfLLVM_BuildFPToUI___(void * jarg1, void * jarg2, void * jarg3, char * jarg4) {
  void * jresult ;
  LLVMBuilderRef arg1 ;
  LLVMValueRef arg2 ;
  LLVMTypeRef arg3 ;
  char *arg4 = (char *) 0 ;
  LLVMValueRef result;
  
  arg1 = (LLVMBuilderRef)jarg1; 
  arg2 = (LLVMValueRef)jarg2; 
  arg3 = (LLVMTypeRef)jarg3; 
  arg4 = (char *)jarg4; 
  result = LLVMBuildFPToUI(arg1,arg2,arg3,(char const *)arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SwiggedfLLVM_BuildFPToSI___(void * jarg1, void * jarg2, void * jarg3, char * jarg4) {
  void * jresult ;
  LLVMBuilderRef arg1 ;
  LLVMValueRef arg2 ;
  LLVMTypeRef arg3 ;
  char *arg4 = (char *) 0 ;
  LLVMValueRef result;
  
  arg1 = (LLVMBuilderRef)jarg1; 
  arg2 = (LLVMValueRef)jarg2; 
  arg3 = (LLVMTypeRef)jarg3; 
  arg4 = (char *)jarg4; 
  result = LLVMBuildFPToSI(arg1,arg2,arg3,(char const *)arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SwiggedfLLVM_BuildUIToFP___(void * jarg1, void * jarg2, void * jarg3, char * jarg4) {
  void * jresult ;
  LLVMBuilderRef arg1 ;
  LLVMValueRef arg2 ;
  LLVMTypeRef arg3 ;
  char *arg4 = (char *) 0 ;
  LLVMValueRef result;
  
  arg1 = (LLVMBuilderRef)jarg1; 
  arg2 = (LLVMValueRef)jarg2; 
  arg3 = (LLVMTypeRef)jarg3; 
  arg4 = (char *)jarg4; 
  result = LLVMBuildUIToFP(arg1,arg2,arg3,(char const *)arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SwiggedfLLVM_BuildSIToFP___(void * jarg1, void * jarg2, void * jarg3, char * jarg4) {
  void * jresult ;
  LLVMBuilderRef arg1 ;
  LLVMValueRef arg2 ;
  LLVMTypeRef arg3 ;
  char *arg4 = (char *) 0 ;
  LLVMValueRef result;
  
  arg1 = (LLVMBuilderRef)jarg1; 
  arg2 = (LLVMValueRef)jarg2; 
  arg3 = (LLVMTypeRef)jarg3; 
  arg4 = (char *)jarg4; 
  result = LLVMBuildSIToFP(arg1,arg2,arg3,(char const *)arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SwiggedfLLVM_BuildFPTrunc___(void * jarg1, void * jarg2, void * jarg3, char * jarg4) {
  void * jresult ;
  LLVMBuilderRef arg1 ;
  LLVMValueRef arg2 ;
  LLVMTypeRef arg3 ;
  char *arg4 = (char *) 0 ;
  LLVMValueRef result;
  
  arg1 = (LLVMBuilderRef)jarg1; 
  arg2 = (LLVMValueRef)jarg2; 
  arg3 = (LLVMTypeRef)jarg3; 
  arg4 = (char *)jarg4; 
  result = LLVMBuildFPTrunc(arg1,arg2,arg3,(char const *)arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SwiggedfLLVM_BuildFPExt___(void * jarg1, void * jarg2, void * jarg3, char * jarg4) {
  void * jresult ;
  LLVMBuilderRef arg1 ;
  LLVMValueRef arg2 ;
  LLVMTypeRef arg3 ;
  char *arg4 = (char *) 0 ;
  LLVMValueRef result;
  
  arg1 = (LLVMBuilderRef)jarg1; 
  arg2 = (LLVMValueRef)jarg2; 
  arg3 = (LLVMTypeRef)jarg3; 
  arg4 = (char *)jarg4; 
  result = LLVMBuildFPExt(arg1,arg2,arg3,(char const *)arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SwiggedfLLVM_BuildPtrToInt___(void * jarg1, void * jarg2, void * jarg3, char * jarg4) {
  void * jresult ;
  LLVMBuilderRef arg1 ;
  LLVMValueRef arg2 ;
  LLVMTypeRef arg3 ;
  char *arg4 = (char *) 0 ;
  LLVMValueRef result;
  
  arg1 = (LLVMBuilderRef)jarg1; 
  arg2 = (LLVMValueRef)jarg2; 
  arg3 = (LLVMTypeRef)jarg3; 
  arg4 = (char *)jarg4; 
  result = LLVMBuildPtrToInt(arg1,arg2,arg3,(char const *)arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SwiggedfLLVM_BuildIntToPtr___(void * jarg1, void * jarg2, void * jarg3, char * jarg4) {
  void * jresult ;
  LLVMBuilderRef arg1 ;
  LLVMValueRef arg2 ;
  LLVMTypeRef arg3 ;
  char *arg4 = (char *) 0 ;
  LLVMValueRef result;
  
  arg1 = (LLVMBuilderRef)jarg1; 
  arg2 = (LLVMValueRef)jarg2; 
  arg3 = (LLVMTypeRef)jarg3; 
  arg4 = (char *)jarg4; 
  result = LLVMBuildIntToPtr(arg1,arg2,arg3,(char const *)arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SwiggedfLLVM_BuildBitCast___(void * jarg1, void * jarg2, void * jarg3, char * jarg4) {
  void * jresult ;
  LLVMBuilderRef arg1 ;
  LLVMValueRef arg2 ;
  LLVMTypeRef arg3 ;
  char *arg4 = (char *) 0 ;
  LLVMValueRef result;
  
  arg1 = (LLVMBuilderRef)jarg1; 
  arg2 = (LLVMValueRef)jarg2; 
  arg3 = (LLVMTypeRef)jarg3; 
  arg4 = (char *)jarg4; 
  result = LLVMBuildBitCast(arg1,arg2,arg3,(char const *)arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SwiggedfLLVM_BuildAddrSpaceCast___(void * jarg1, void * jarg2, void * jarg3, char * jarg4) {
  void * jresult ;
  LLVMBuilderRef arg1 ;
  LLVMValueRef arg2 ;
  LLVMTypeRef arg3 ;
  char *arg4 = (char *) 0 ;
  LLVMValueRef result;
  
  arg1 = (LLVMBuilderRef)jarg1; 
  arg2 = (LLVMValueRef)jarg2; 
  arg3 = (LLVMTypeRef)jarg3; 
  arg4 = (char *)jarg4; 
  result = LLVMBuildAddrSpaceCast(arg1,arg2,arg3,(char const *)arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SwiggedfLLVM_BuildZExtOrBitCast___(void * jarg1, void * jarg2, void * jarg3, char * jarg4) {
  void * jresult ;
  LLVMBuilderRef arg1 ;
  LLVMValueRef arg2 ;
  LLVMTypeRef arg3 ;
  char *arg4 = (char *) 0 ;
  LLVMValueRef result;
  
  arg1 = (LLVMBuilderRef)jarg1; 
  arg2 = (LLVMValueRef)jarg2; 
  arg3 = (LLVMTypeRef)jarg3; 
  arg4 = (char *)jarg4; 
  result = LLVMBuildZExtOrBitCast(arg1,arg2,arg3,(char const *)arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SwiggedfLLVM_BuildSExtOrBitCast___(void * jarg1, void * jarg2, void * jarg3, char * jarg4) {
  void * jresult ;
  LLVMBuilderRef arg1 ;
  LLVMValueRef arg2 ;
  LLVMTypeRef arg3 ;
  char *arg4 = (char *) 0 ;
  LLVMValueRef result;
  
  arg1 = (LLVMBuilderRef)jarg1; 
  arg2 = (LLVMValueRef)jarg2; 
  arg3 = (LLVMTypeRef)jarg3; 
  arg4 = (char *)jarg4; 
  result = LLVMBuildSExtOrBitCast(arg1,arg2,arg3,(char const *)arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SwiggedfLLVM_BuildTruncOrBitCast___(void * jarg1, void * jarg2, void * jarg3, char * jarg4) {
  void * jresult ;
  LLVMBuilderRef arg1 ;
  LLVMValueRef arg2 ;
  LLVMTypeRef arg3 ;
  char *arg4 = (char *) 0 ;
  LLVMValueRef result;
  
  arg1 = (LLVMBuilderRef)jarg1; 
  arg2 = (LLVMValueRef)jarg2; 
  arg3 = (LLVMTypeRef)jarg3; 
  arg4 = (char *)jarg4; 
  result = LLVMBuildTruncOrBitCast(arg1,arg2,arg3,(char const *)arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SwiggedfLLVM_BuildCast___(void * jarg1, int jarg2, void * jarg3, void * jarg4, char * jarg5) {
  void * jresult ;
  LLVMBuilderRef arg1 ;
  LLVMOpcode arg2 ;
  LLVMValueRef arg3 ;
  LLVMTypeRef arg4 ;
  char *arg5 = (char *) 0 ;
  LLVMValueRef result;
  
  arg1 = (LLVMBuilderRef)jarg1; 
  arg2 = (LLVMOpcode)jarg2; 
  arg3 = (LLVMValueRef)jarg3; 
  arg4 = (LLVMTypeRef)jarg4; 
  arg5 = (char *)jarg5; 
  result = LLVMBuildCast(arg1,arg2,arg3,arg4,(char const *)arg5);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SwiggedfLLVM_BuildPointerCast___(void * jarg1, void * jarg2, void * jarg3, char * jarg4) {
  void * jresult ;
  LLVMBuilderRef arg1 ;
  LLVMValueRef arg2 ;
  LLVMTypeRef arg3 ;
  char *arg4 = (char *) 0 ;
  LLVMValueRef result;
  
  arg1 = (LLVMBuilderRef)jarg1; 
  arg2 = (LLVMValueRef)jarg2; 
  arg3 = (LLVMTypeRef)jarg3; 
  arg4 = (char *)jarg4; 
  result = LLVMBuildPointerCast(arg1,arg2,arg3,(char const *)arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SwiggedfLLVM_BuildIntCast___(void * jarg1, void * jarg2, void * jarg3, char * jarg4) {
  void * jresult ;
  LLVMBuilderRef arg1 ;
  LLVMValueRef arg2 ;
  LLVMTypeRef arg3 ;
  char *arg4 = (char *) 0 ;
  LLVMValueRef result;
  
  arg1 = (LLVMBuilderRef)jarg1; 
  arg2 = (LLVMValueRef)jarg2; 
  arg3 = (LLVMTypeRef)jarg3; 
  arg4 = (char *)jarg4; 
  result = LLVMBuildIntCast(arg1,arg2,arg3,(char const *)arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SwiggedfLLVM_BuildFPCast___(void * jarg1, void * jarg2, void * jarg3, char * jarg4) {
  void * jresult ;
  LLVMBuilderRef arg1 ;
  LLVMValueRef arg2 ;
  LLVMTypeRef arg3 ;
  char *arg4 = (char *) 0 ;
  LLVMValueRef result;
  
  arg1 = (LLVMBuilderRef)jarg1; 
  arg2 = (LLVMValueRef)jarg2; 
  arg3 = (LLVMTypeRef)jarg3; 
  arg4 = (char *)jarg4; 
  result = LLVMBuildFPCast(arg1,arg2,arg3,(char const *)arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SwiggedfLLVM_BuildICmp___(void * jarg1, int jarg2, void * jarg3, void * jarg4, char * jarg5) {
  void * jresult ;
  LLVMBuilderRef arg1 ;
  LLVMIntPredicate arg2 ;
  LLVMValueRef arg3 ;
  LLVMValueRef arg4 ;
  char *arg5 = (char *) 0 ;
  LLVMValueRef result;
  
  arg1 = (LLVMBuilderRef)jarg1; 
  arg2 = (LLVMIntPredicate)jarg2; 
  arg3 = (LLVMValueRef)jarg3; 
  arg4 = (LLVMValueRef)jarg4; 
  arg5 = (char *)jarg5; 
  result = LLVMBuildICmp(arg1,arg2,arg3,arg4,(char const *)arg5);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SwiggedfLLVM_BuildFCmp___(void * jarg1, int jarg2, void * jarg3, void * jarg4, char * jarg5) {
  void * jresult ;
  LLVMBuilderRef arg1 ;
  LLVMRealPredicate arg2 ;
  LLVMValueRef arg3 ;
  LLVMValueRef arg4 ;
  char *arg5 = (char *) 0 ;
  LLVMValueRef result;
  
  arg1 = (LLVMBuilderRef)jarg1; 
  arg2 = (LLVMRealPredicate)jarg2; 
  arg3 = (LLVMValueRef)jarg3; 
  arg4 = (LLVMValueRef)jarg4; 
  arg5 = (char *)jarg5; 
  result = LLVMBuildFCmp(arg1,arg2,arg3,arg4,(char const *)arg5);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SwiggedfLLVM_BuildPhi___(void * jarg1, void * jarg2, char * jarg3) {
  void * jresult ;
  LLVMBuilderRef arg1 ;
  LLVMTypeRef arg2 ;
  char *arg3 = (char *) 0 ;
  LLVMValueRef result;
  
  arg1 = (LLVMBuilderRef)jarg1; 
  arg2 = (LLVMTypeRef)jarg2; 
  arg3 = (char *)jarg3; 
  result = LLVMBuildPhi(arg1,arg2,(char const *)arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SwiggedfLLVM_BuildCall___(void * jarg1, void * jarg2, void* arg3_data, unsigned int jarg3, char * jarg5) {
  void * jresult ;
  LLVMBuilderRef arg1 ;
  LLVMValueRef arg2 ;
  LLVMValueRef *arg3 = (LLVMValueRef *) 0 ;
  unsigned int arg4 ;
  char *arg5 = (char *) 0 ;
  LLVMValueRef result;
  
  arg1 = (LLVMBuilderRef)jarg1; 
  arg2 = (LLVMValueRef)jarg2; 
  arg3 = (LLVMValueRef*)arg3_data; arg4 = jarg3;
  arg5 = (char *)jarg5; 
  result = LLVMBuildCall(arg1,arg2,arg3,arg4,(char const *)arg5);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SwiggedfLLVM_BuildSelect___(void * jarg1, void * jarg2, void * jarg3, void * jarg4, char * jarg5) {
  void * jresult ;
  LLVMBuilderRef arg1 ;
  LLVMValueRef arg2 ;
  LLVMValueRef arg3 ;
  LLVMValueRef arg4 ;
  char *arg5 = (char *) 0 ;
  LLVMValueRef result;
  
  arg1 = (LLVMBuilderRef)jarg1; 
  arg2 = (LLVMValueRef)jarg2; 
  arg3 = (LLVMValueRef)jarg3; 
  arg4 = (LLVMValueRef)jarg4; 
  arg5 = (char *)jarg5; 
  result = LLVMBuildSelect(arg1,arg2,arg3,arg4,(char const *)arg5);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SwiggedfLLVM_BuildVAArg___(void * jarg1, void * jarg2, void * jarg3, char * jarg4) {
  void * jresult ;
  LLVMBuilderRef arg1 ;
  LLVMValueRef arg2 ;
  LLVMTypeRef arg3 ;
  char *arg4 = (char *) 0 ;
  LLVMValueRef result;
  
  arg1 = (LLVMBuilderRef)jarg1; 
  arg2 = (LLVMValueRef)jarg2; 
  arg3 = (LLVMTypeRef)jarg3; 
  arg4 = (char *)jarg4; 
  result = LLVMBuildVAArg(arg1,arg2,arg3,(char const *)arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SwiggedfLLVM_BuildExtractElement___(void * jarg1, void * jarg2, void * jarg3, char * jarg4) {
  void * jresult ;
  LLVMBuilderRef arg1 ;
  LLVMValueRef arg2 ;
  LLVMValueRef arg3 ;
  char *arg4 = (char *) 0 ;
  LLVMValueRef result;
  
  arg1 = (LLVMBuilderRef)jarg1; 
  arg2 = (LLVMValueRef)jarg2; 
  arg3 = (LLVMValueRef)jarg3; 
  arg4 = (char *)jarg4; 
  result = LLVMBuildExtractElement(arg1,arg2,arg3,(char const *)arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SwiggedfLLVM_BuildInsertElement___(void * jarg1, void * jarg2, void * jarg3, void * jarg4, char * jarg5) {
  void * jresult ;
  LLVMBuilderRef arg1 ;
  LLVMValueRef arg2 ;
  LLVMValueRef arg3 ;
  LLVMValueRef arg4 ;
  char *arg5 = (char *) 0 ;
  LLVMValueRef result;
  
  arg1 = (LLVMBuilderRef)jarg1; 
  arg2 = (LLVMValueRef)jarg2; 
  arg3 = (LLVMValueRef)jarg3; 
  arg4 = (LLVMValueRef)jarg4; 
  arg5 = (char *)jarg5; 
  result = LLVMBuildInsertElement(arg1,arg2,arg3,arg4,(char const *)arg5);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SwiggedfLLVM_BuildShuffleVector___(void * jarg1, void * jarg2, void * jarg3, void * jarg4, char * jarg5) {
  void * jresult ;
  LLVMBuilderRef arg1 ;
  LLVMValueRef arg2 ;
  LLVMValueRef arg3 ;
  LLVMValueRef arg4 ;
  char *arg5 = (char *) 0 ;
  LLVMValueRef result;
  
  arg1 = (LLVMBuilderRef)jarg1; 
  arg2 = (LLVMValueRef)jarg2; 
  arg3 = (LLVMValueRef)jarg3; 
  arg4 = (LLVMValueRef)jarg4; 
  arg5 = (char *)jarg5; 
  result = LLVMBuildShuffleVector(arg1,arg2,arg3,arg4,(char const *)arg5);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SwiggedfLLVM_BuildExtractValue___(void * jarg1, void * jarg2, unsigned int jarg3, char * jarg4) {
  void * jresult ;
  LLVMBuilderRef arg1 ;
  LLVMValueRef arg2 ;
  unsigned int arg3 ;
  char *arg4 = (char *) 0 ;
  LLVMValueRef result;
  
  arg1 = (LLVMBuilderRef)jarg1; 
  arg2 = (LLVMValueRef)jarg2; 
  arg3 = (unsigned int)jarg3; 
  arg4 = (char *)jarg4; 
  result = LLVMBuildExtractValue(arg1,arg2,arg3,(char const *)arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SwiggedfLLVM_BuildInsertValue___(void * jarg1, void * jarg2, void * jarg3, unsigned int jarg4, char * jarg5) {
  void * jresult ;
  LLVMBuilderRef arg1 ;
  LLVMValueRef arg2 ;
  LLVMValueRef arg3 ;
  unsigned int arg4 ;
  char *arg5 = (char *) 0 ;
  LLVMValueRef result;
  
  arg1 = (LLVMBuilderRef)jarg1; 
  arg2 = (LLVMValueRef)jarg2; 
  arg3 = (LLVMValueRef)jarg3; 
  arg4 = (unsigned int)jarg4; 
  arg5 = (char *)jarg5; 
  result = LLVMBuildInsertValue(arg1,arg2,arg3,arg4,(char const *)arg5);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SwiggedfLLVM_BuildIsNull___(void * jarg1, void * jarg2, char * jarg3) {
  void * jresult ;
  LLVMBuilderRef arg1 ;
  LLVMValueRef arg2 ;
  char *arg3 = (char *) 0 ;
  LLVMValueRef result;
  
  arg1 = (LLVMBuilderRef)jarg1; 
  arg2 = (LLVMValueRef)jarg2; 
  arg3 = (char *)jarg3; 
  result = LLVMBuildIsNull(arg1,arg2,(char const *)arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SwiggedfLLVM_BuildIsNotNull___(void * jarg1, void * jarg2, char * jarg3) {
  void * jresult ;
  LLVMBuilderRef arg1 ;
  LLVMValueRef arg2 ;
  char *arg3 = (char *) 0 ;
  LLVMValueRef result;
  
  arg1 = (LLVMBuilderRef)jarg1; 
  arg2 = (LLVMValueRef)jarg2; 
  arg3 = (char *)jarg3; 
  result = LLVMBuildIsNotNull(arg1,arg2,(char const *)arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SwiggedfLLVM_BuildPtrDiff___(void * jarg1, void * jarg2, void * jarg3, char * jarg4) {
  void * jresult ;
  LLVMBuilderRef arg1 ;
  LLVMValueRef arg2 ;
  LLVMValueRef arg3 ;
  char *arg4 = (char *) 0 ;
  LLVMValueRef result;
  
  arg1 = (LLVMBuilderRef)jarg1; 
  arg2 = (LLVMValueRef)jarg2; 
  arg3 = (LLVMValueRef)jarg3; 
  arg4 = (char *)jarg4; 
  result = LLVMBuildPtrDiff(arg1,arg2,arg3,(char const *)arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SwiggedfLLVM_BuildFence___(void * jarg1, int jarg2, unsigned int jarg3, char * jarg4) {
  void * jresult ;
  LLVMBuilderRef arg1 ;
  LLVMAtomicOrdering arg2 ;
  LLVMBool arg3 ;
  char *arg4 = (char *) 0 ;
  LLVMValueRef result;
  
  arg1 = (LLVMBuilderRef)jarg1; 
  arg2 = (LLVMAtomicOrdering)jarg2; 
  arg3 = jarg3 ? true : false; 
  arg4 = (char *)jarg4; 
  result = LLVMBuildFence(arg1,arg2,arg3,(char const *)arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SwiggedfLLVM_BuildAtomicRMW___(void * jarg1, int jarg2, void * jarg3, void * jarg4, int jarg5, unsigned int jarg6) {
  void * jresult ;
  LLVMBuilderRef arg1 ;
  LLVMAtomicRMWBinOp arg2 ;
  LLVMValueRef arg3 ;
  LLVMValueRef arg4 ;
  LLVMAtomicOrdering arg5 ;
  LLVMBool arg6 ;
  LLVMValueRef result;
  
  arg1 = (LLVMBuilderRef)jarg1; 
  arg2 = (LLVMAtomicRMWBinOp)jarg2; 
  arg3 = (LLVMValueRef)jarg3; 
  arg4 = (LLVMValueRef)jarg4; 
  arg5 = (LLVMAtomicOrdering)jarg5; 
  arg6 = jarg6 ? true : false; 
  result = LLVMBuildAtomicRMW(arg1,arg2,arg3,arg4,arg5,arg6);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SwiggedfLLVM_BuildAtomicCmpXchg___(void * jarg1, void * jarg2, void * jarg3, void * jarg4, int jarg5, int jarg6, unsigned int jarg7) {
  void * jresult ;
  LLVMBuilderRef arg1 ;
  LLVMValueRef arg2 ;
  LLVMValueRef arg3 ;
  LLVMValueRef arg4 ;
  LLVMAtomicOrdering arg5 ;
  LLVMAtomicOrdering arg6 ;
  LLVMBool arg7 ;
  LLVMValueRef result;
  
  arg1 = (LLVMBuilderRef)jarg1; 
  arg2 = (LLVMValueRef)jarg2; 
  arg3 = (LLVMValueRef)jarg3; 
  arg4 = (LLVMValueRef)jarg4; 
  arg5 = (LLVMAtomicOrdering)jarg5; 
  arg6 = (LLVMAtomicOrdering)jarg6; 
  arg7 = jarg7 ? true : false; 
  result = LLVMBuildAtomicCmpXchg(arg1,arg2,arg3,arg4,arg5,arg6,arg7);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_SwiggedfLLVM_IsAtomicSingleThread___(void * jarg1) {
  unsigned int jresult ;
  LLVMValueRef arg1 ;
  LLVMBool result;
  
  arg1 = (LLVMValueRef)jarg1; 
  result = (LLVMBool)LLVMIsAtomicSingleThread(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_SwiggedfLLVM_SetAtomicSingleThread___(void * jarg1, unsigned int jarg2) {
  LLVMValueRef arg1 ;
  LLVMBool arg2 ;
  
  arg1 = (LLVMValueRef)jarg1; 
  arg2 = jarg2 ? true : false; 
  LLVMSetAtomicSingleThread(arg1,arg2);
}


SWIGEXPORT int SWIGSTDCALL CSharp_SwiggedfLLVM_GetCmpXchgSuccessOrdering___(void * jarg1) {
  int jresult ;
  LLVMValueRef arg1 ;
  LLVMAtomicOrdering result;
  
  arg1 = (LLVMValueRef)jarg1; 
  result = (LLVMAtomicOrdering)LLVMGetCmpXchgSuccessOrdering(arg1);
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_SwiggedfLLVM_SetCmpXchgSuccessOrdering___(void * jarg1, int jarg2) {
  LLVMValueRef arg1 ;
  LLVMAtomicOrdering arg2 ;
  
  arg1 = (LLVMValueRef)jarg1; 
  arg2 = (LLVMAtomicOrdering)jarg2; 
  LLVMSetCmpXchgSuccessOrdering(arg1,arg2);
}


SWIGEXPORT int SWIGSTDCALL CSharp_SwiggedfLLVM_GetCmpXchgFailureOrdering___(void * jarg1) {
  int jresult ;
  LLVMValueRef arg1 ;
  LLVMAtomicOrdering result;
  
  arg1 = (LLVMValueRef)jarg1; 
  result = (LLVMAtomicOrdering)LLVMGetCmpXchgFailureOrdering(arg1);
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_SwiggedfLLVM_SetCmpXchgFailureOrdering___(void * jarg1, int jarg2) {
  LLVMValueRef arg1 ;
  LLVMAtomicOrdering arg2 ;
  
  arg1 = (LLVMValueRef)jarg1; 
  arg2 = (LLVMAtomicOrdering)jarg2; 
  LLVMSetCmpXchgFailureOrdering(arg1,arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SwiggedfLLVM_CreateModuleProviderForExistingModule___(void * jarg1) {
  void * jresult ;
  LLVMModuleRef arg1 ;
  LLVMModuleProviderRef result;
  
  arg1 = (LLVMModuleRef)jarg1; 
  result = LLVMCreateModuleProviderForExistingModule(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_SwiggedfLLVM_DisposeModuleProvider___(void * jarg1) {
  LLVMModuleProviderRef arg1 ;
  
  arg1 = (LLVMModuleProviderRef)jarg1; 
  LLVMDisposeModuleProvider(arg1);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_SwiggedfLLVM_CreateMemoryBufferWithContentsOfFile___(char * jarg1, void * jarg2, void * jarg3) {
  unsigned int jresult ;
  char *arg1 = (char *) 0 ;
  LLVMMemoryBufferRef *arg2 = (LLVMMemoryBufferRef *) 0 ;
  char **arg3 = (char **) 0 ;
  LLVMBool result;
  
  arg1 = (char *)jarg1; 
  arg2 = (LLVMMemoryBufferRef *)jarg2; 
  {
    // Used in generating wrap.cpp:
    // Converts input parameter of target type to C.
    arg3 = (char**)jarg3;
  }
  result = (LLVMBool)LLVMCreateMemoryBufferWithContentsOfFile((char const *)arg1,arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_SwiggedfLLVM_CreateMemoryBufferWithSTDIN___(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  LLVMMemoryBufferRef *arg1 = (LLVMMemoryBufferRef *) 0 ;
  char **arg2 = (char **) 0 ;
  LLVMBool result;
  
  arg1 = (LLVMMemoryBufferRef *)jarg1; 
  {
    // Used in generating wrap.cpp:
    // Converts input parameter of target type to C.
    arg2 = (char**)jarg2;
  }
  result = (LLVMBool)LLVMCreateMemoryBufferWithSTDIN(arg1,arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SwiggedfLLVM_CreateMemoryBufferWithMemoryRange___(char * jarg1, unsigned long jarg2, char * jarg3, unsigned int jarg4) {
  void * jresult ;
  char *arg1 = (char *) 0 ;
  size_t arg2 ;
  char *arg3 = (char *) 0 ;
  LLVMBool arg4 ;
  LLVMMemoryBufferRef result;
  
  arg1 = (char *)jarg1; 
  arg2 = (size_t)jarg2; 
  arg3 = (char *)jarg3; 
  arg4 = jarg4 ? true : false; 
  result = LLVMCreateMemoryBufferWithMemoryRange((char const *)arg1,arg2,(char const *)arg3,arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SwiggedfLLVM_CreateMemoryBufferWithMemoryRangeCopy___(char * jarg1, unsigned long jarg2, char * jarg3) {
  void * jresult ;
  char *arg1 = (char *) 0 ;
  size_t arg2 ;
  char *arg3 = (char *) 0 ;
  LLVMMemoryBufferRef result;
  
  arg1 = (char *)jarg1; 
  arg2 = (size_t)jarg2; 
  arg3 = (char *)jarg3; 
  result = LLVMCreateMemoryBufferWithMemoryRangeCopy((char const *)arg1,arg2,(char const *)arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_SwiggedfLLVM_GetBufferStart___(void * jarg1) {
  char * jresult ;
  LLVMMemoryBufferRef arg1 ;
  char *result = 0 ;
  
  arg1 = (LLVMMemoryBufferRef)jarg1; 
  result = (char *)LLVMGetBufferStart(arg1);
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_SwiggedfLLVM_GetBufferSize___(void * jarg1) {
  unsigned long jresult ;
  LLVMMemoryBufferRef arg1 ;
  size_t result;
  
  arg1 = (LLVMMemoryBufferRef)jarg1; 
  result = LLVMGetBufferSize(arg1);
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_SwiggedfLLVM_DisposeMemoryBuffer___(void * jarg1) {
  LLVMMemoryBufferRef arg1 ;
  
  arg1 = (LLVMMemoryBufferRef)jarg1; 
  LLVMDisposeMemoryBuffer(arg1);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SwiggedfLLVM_GetGlobalPassRegistry___() {
  void * jresult ;
  LLVMPassRegistryRef result;
  
  result = LLVMGetGlobalPassRegistry();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SwiggedfLLVM_CreatePassManager___() {
  void * jresult ;
  LLVMPassManagerRef result;
  
  result = LLVMCreatePassManager();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SwiggedfLLVM_CreateFunctionPassManagerForModule___(void * jarg1) {
  void * jresult ;
  LLVMModuleRef arg1 ;
  LLVMPassManagerRef result;
  
  arg1 = (LLVMModuleRef)jarg1; 
  result = LLVMCreateFunctionPassManagerForModule(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SwiggedfLLVM_CreateFunctionPassManager___(void * jarg1) {
  void * jresult ;
  LLVMModuleProviderRef arg1 ;
  LLVMPassManagerRef result;
  
  arg1 = (LLVMModuleProviderRef)jarg1; 
  result = LLVMCreateFunctionPassManager(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_SwiggedfLLVM_RunPassManager___(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  LLVMPassManagerRef arg1 ;
  LLVMModuleRef arg2 ;
  LLVMBool result;
  
  arg1 = (LLVMPassManagerRef)jarg1; 
  arg2 = (LLVMModuleRef)jarg2; 
  result = (LLVMBool)LLVMRunPassManager(arg1,arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_SwiggedfLLVM_InitializeFunctionPassManager___(void * jarg1) {
  unsigned int jresult ;
  LLVMPassManagerRef arg1 ;
  LLVMBool result;
  
  arg1 = (LLVMPassManagerRef)jarg1; 
  result = (LLVMBool)LLVMInitializeFunctionPassManager(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_SwiggedfLLVM_RunFunctionPassManager___(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  LLVMPassManagerRef arg1 ;
  LLVMValueRef arg2 ;
  LLVMBool result;
  
  arg1 = (LLVMPassManagerRef)jarg1; 
  arg2 = (LLVMValueRef)jarg2; 
  result = (LLVMBool)LLVMRunFunctionPassManager(arg1,arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_SwiggedfLLVM_FinalizeFunctionPassManager___(void * jarg1) {
  unsigned int jresult ;
  LLVMPassManagerRef arg1 ;
  LLVMBool result;
  
  arg1 = (LLVMPassManagerRef)jarg1; 
  result = (LLVMBool)LLVMFinalizeFunctionPassManager(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_SwiggedfLLVM_DisposePassManager___(void * jarg1) {
  LLVMPassManagerRef arg1 ;
  
  arg1 = (LLVMPassManagerRef)jarg1; 
  LLVMDisposePassManager(arg1);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_SwiggedfLLVM_StartMultithreaded___() {
  unsigned int jresult ;
  LLVMBool result;
  
  result = (LLVMBool)LLVMStartMultithreaded();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_SwiggedfLLVM_StopMultithreaded___() {
  LLVMStopMultithreaded();
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_SwiggedfLLVM_IsMultithreaded___() {
  unsigned int jresult ;
  LLVMBool result;
  
  result = (LLVMBool)LLVMIsMultithreaded();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_SwiggedfLLVM_VerifyModule___(void * jarg1, int jarg2, void * jarg3) {
  unsigned int jresult ;
  LLVMModuleRef arg1 ;
  LLVMVerifierFailureAction arg2 ;
  char **arg3 = (char **) 0 ;
  LLVMBool result;
  
  arg1 = (LLVMModuleRef)jarg1; 
  arg2 = (LLVMVerifierFailureAction)jarg2; 
  {
    // Used in generating wrap.cpp:
    // Converts input parameter of target type to C.
    arg3 = (char**)jarg3;
  }
  result = (LLVMBool)LLVMVerifyModule(arg1,arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_SwiggedfLLVM_VerifyFunction___(void * jarg1, int jarg2) {
  unsigned int jresult ;
  LLVMValueRef arg1 ;
  LLVMVerifierFailureAction arg2 ;
  LLVMBool result;
  
  arg1 = (LLVMValueRef)jarg1; 
  arg2 = (LLVMVerifierFailureAction)jarg2; 
  result = (LLVMBool)LLVMVerifyFunction(arg1,arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_SwiggedfLLVM_ParseBitcode___(void * jarg1, void * jarg2, void * jarg3) {
  unsigned int jresult ;
  LLVMMemoryBufferRef arg1 ;
  LLVMModuleRef *arg2 = (LLVMModuleRef *) 0 ;
  char **arg3 = (char **) 0 ;
  LLVMBool result;
  
  arg1 = (LLVMMemoryBufferRef)jarg1; 
  arg2 = (LLVMModuleRef *)jarg2; 
  {
    // Used in generating wrap.cpp:
    // Converts input parameter of target type to C.
    arg3 = (char**)jarg3;
  }
  result = (LLVMBool)LLVMParseBitcode(arg1,arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_SwiggedfLLVM_ParseBitcode2___(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  LLVMMemoryBufferRef arg1 ;
  LLVMModuleRef *arg2 = (LLVMModuleRef *) 0 ;
  LLVMBool result;
  
  arg1 = (LLVMMemoryBufferRef)jarg1; 
  arg2 = (LLVMModuleRef *)jarg2; 
  result = (LLVMBool)LLVMParseBitcode2(arg1,arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_SwiggedfLLVM_ParseBitcodeInContext___(void * jarg1, void * jarg2, void * jarg3, void * jarg4) {
  unsigned int jresult ;
  LLVMContextRef arg1 ;
  LLVMMemoryBufferRef arg2 ;
  LLVMModuleRef *arg3 = (LLVMModuleRef *) 0 ;
  char **arg4 = (char **) 0 ;
  LLVMBool result;
  
  arg1 = (LLVMContextRef)jarg1; 
  arg2 = (LLVMMemoryBufferRef)jarg2; 
  arg3 = (LLVMModuleRef *)jarg3; 
  {
    // Used in generating wrap.cpp:
    // Converts input parameter of target type to C.
    arg4 = (char**)jarg4;
  }
  result = (LLVMBool)LLVMParseBitcodeInContext(arg1,arg2,arg3,arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_SwiggedfLLVM_ParseBitcodeInContext2___(void * jarg1, void * jarg2, void * jarg3) {
  unsigned int jresult ;
  LLVMContextRef arg1 ;
  LLVMMemoryBufferRef arg2 ;
  LLVMModuleRef *arg3 = (LLVMModuleRef *) 0 ;
  LLVMBool result;
  
  arg1 = (LLVMContextRef)jarg1; 
  arg2 = (LLVMMemoryBufferRef)jarg2; 
  arg3 = (LLVMModuleRef *)jarg3; 
  result = (LLVMBool)LLVMParseBitcodeInContext2(arg1,arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_SwiggedfLLVM_GetBitcodeModuleInContext___(void * jarg1, void * jarg2, void * jarg3, void * jarg4) {
  unsigned int jresult ;
  LLVMContextRef arg1 ;
  LLVMMemoryBufferRef arg2 ;
  LLVMModuleRef *arg3 = (LLVMModuleRef *) 0 ;
  char **arg4 = (char **) 0 ;
  LLVMBool result;
  
  arg1 = (LLVMContextRef)jarg1; 
  arg2 = (LLVMMemoryBufferRef)jarg2; 
  arg3 = (LLVMModuleRef *)jarg3; 
  {
    // Used in generating wrap.cpp:
    // Converts input parameter of target type to C.
    arg4 = (char**)jarg4;
  }
  result = (LLVMBool)LLVMGetBitcodeModuleInContext(arg1,arg2,arg3,arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_SwiggedfLLVM_GetBitcodeModuleInContext2___(void * jarg1, void * jarg2, void * jarg3) {
  unsigned int jresult ;
  LLVMContextRef arg1 ;
  LLVMMemoryBufferRef arg2 ;
  LLVMModuleRef *arg3 = (LLVMModuleRef *) 0 ;
  LLVMBool result;
  
  arg1 = (LLVMContextRef)jarg1; 
  arg2 = (LLVMMemoryBufferRef)jarg2; 
  arg3 = (LLVMModuleRef *)jarg3; 
  result = (LLVMBool)LLVMGetBitcodeModuleInContext2(arg1,arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_SwiggedfLLVM_GetBitcodeModule___(void * jarg1, void * jarg2, void * jarg3) {
  unsigned int jresult ;
  LLVMMemoryBufferRef arg1 ;
  LLVMModuleRef *arg2 = (LLVMModuleRef *) 0 ;
  char **arg3 = (char **) 0 ;
  LLVMBool result;
  
  arg1 = (LLVMMemoryBufferRef)jarg1; 
  arg2 = (LLVMModuleRef *)jarg2; 
  {
    // Used in generating wrap.cpp:
    // Converts input parameter of target type to C.
    arg3 = (char**)jarg3;
  }
  result = (LLVMBool)LLVMGetBitcodeModule(arg1,arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_SwiggedfLLVM_GetBitcodeModule2___(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  LLVMMemoryBufferRef arg1 ;
  LLVMModuleRef *arg2 = (LLVMModuleRef *) 0 ;
  LLVMBool result;
  
  arg1 = (LLVMMemoryBufferRef)jarg1; 
  arg2 = (LLVMModuleRef *)jarg2; 
  result = (LLVMBool)LLVMGetBitcodeModule2(arg1,arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_SwiggedfLLVM_WriteBitcodeToFile___(void * jarg1, char * jarg2) {
  int jresult ;
  LLVMModuleRef arg1 ;
  char *arg2 = (char *) 0 ;
  int result;
  
  arg1 = (LLVMModuleRef)jarg1; 
  arg2 = (char *)jarg2; 
  result = (int)LLVMWriteBitcodeToFile(arg1,(char const *)arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_SwiggedfLLVM_WriteBitcodeToFD___(void * jarg1, int jarg2, int jarg3, int jarg4) {
  int jresult ;
  LLVMModuleRef arg1 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  int result;
  
  arg1 = (LLVMModuleRef)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  arg4 = (int)jarg4; 
  result = (int)LLVMWriteBitcodeToFD(arg1,arg2,arg3,arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_SwiggedfLLVM_WriteBitcodeToFileHandle___(void * jarg1, int jarg2) {
  int jresult ;
  LLVMModuleRef arg1 ;
  int arg2 ;
  int result;
  
  arg1 = (LLVMModuleRef)jarg1; 
  arg2 = (int)jarg2; 
  result = (int)LLVMWriteBitcodeToFileHandle(arg1,arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SwiggedfLLVM_WriteBitcodeToMemoryBuffer___(void * jarg1) {
  void * jresult ;
  LLVMModuleRef arg1 ;
  LLVMMemoryBufferRef result;
  
  arg1 = (LLVMModuleRef)jarg1; 
  result = LLVMWriteBitcodeToMemoryBuffer(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_SwiggedfLLVM_Disassembler_VariantKind_None_get___() {
  int jresult ;
  int result;
  
  result = (int)(0);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_SwiggedfLLVM_Disassembler_VariantKind_ARM_HI16_get___() {
  int jresult ;
  int result;
  
  result = (int)(1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_SwiggedfLLVM_Disassembler_VariantKind_ARM_LO16_get___() {
  int jresult ;
  int result;
  
  result = (int)(2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_SwiggedfLLVM_Disassembler_VariantKind_ARM64_PAGE_get___() {
  int jresult ;
  int result;
  
  result = (int)(1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_SwiggedfLLVM_Disassembler_VariantKind_ARM64_PAGEOFF_get___() {
  int jresult ;
  int result;
  
  result = (int)(2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_SwiggedfLLVM_Disassembler_VariantKind_ARM64_GOTPAGE_get___() {
  int jresult ;
  int result;
  
  result = (int)(3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_SwiggedfLLVM_Disassembler_VariantKind_ARM64_GOTPAGEOFF_get___() {
  int jresult ;
  int result;
  
  result = (int)(4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_SwiggedfLLVM_Disassembler_VariantKind_ARM64_TLVP_get___() {
  int jresult ;
  int result;
  
  result = (int)(5);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_SwiggedfLLVM_Disassembler_VariantKind_ARM64_TLVOFF_get___() {
  int jresult ;
  int result;
  
  result = (int)(6);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_SwiggedfLLVM_Disassembler_ReferenceType_InOut_None_get___() {
  int jresult ;
  int result;
  
  result = (int)(0);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_SwiggedfLLVM_Disassembler_ReferenceType_In_Branch_get___() {
  int jresult ;
  int result;
  
  result = (int)(1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_SwiggedfLLVM_Disassembler_ReferenceType_In_PCrel_Load_get___() {
  int jresult ;
  int result;
  
  result = (int)(2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_SwiggedfLLVM_Disassembler_ReferenceType_In_ARM64_ADRP_get___() {
  int jresult ;
  int result;
  
  result = (int)(0x100000001);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_SwiggedfLLVM_Disassembler_ReferenceType_In_ARM64_ADDXri_get___() {
  int jresult ;
  int result;
  
  result = (int)(0x100000002);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_SwiggedfLLVM_Disassembler_ReferenceType_In_ARM64_LDRXui_get___() {
  int jresult ;
  int result;
  
  result = (int)(0x100000003);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_SwiggedfLLVM_Disassembler_ReferenceType_In_ARM64_LDRXl_get___() {
  int jresult ;
  int result;
  
  result = (int)(0x100000004);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_SwiggedfLLVM_Disassembler_ReferenceType_In_ARM64_ADR_get___() {
  int jresult ;
  int result;
  
  result = (int)(0x100000005);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_SwiggedfLLVM_Disassembler_ReferenceType_Out_SymbolStub_get___() {
  int jresult ;
  int result;
  
  result = (int)(1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_SwiggedfLLVM_Disassembler_ReferenceType_Out_LitPool_SymAddr_get___() {
  int jresult ;
  int result;
  
  result = (int)(2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_SwiggedfLLVM_Disassembler_ReferenceType_Out_LitPool_CstrAddr_get___() {
  int jresult ;
  int result;
  
  result = (int)(3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_SwiggedfLLVM_Disassembler_ReferenceType_Out_Objc_CFString_Ref_get___() {
  int jresult ;
  int result;
  
  result = (int)(4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_SwiggedfLLVM_Disassembler_ReferenceType_Out_Objc_Message_get___() {
  int jresult ;
  int result;
  
  result = (int)(5);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_SwiggedfLLVM_Disassembler_ReferenceType_Out_Objc_Message_Ref_get___() {
  int jresult ;
  int result;
  
  result = (int)(6);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_SwiggedfLLVM_Disassembler_ReferenceType_Out_Objc_Selector_Ref_get___() {
  int jresult ;
  int result;
  
  result = (int)(7);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_SwiggedfLLVM_Disassembler_ReferenceType_Out_Objc_Class_Ref_get___() {
  int jresult ;
  int result;
  
  result = (int)(8);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_SwiggedfLLVM_Disassembler_ReferenceType_DeMangled_Name_get___() {
  int jresult ;
  int result;
  
  result = (int)(9);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_SwiggedfLLVM_SetDisasmOptions___(void * jarg1, unsigned long long jarg2) {
  int jresult ;
  LLVMDisasmContextRef arg1 = (LLVMDisasmContextRef) 0 ;
  uint64_t arg2 ;
  int result;
  
  arg1 = jarg1; 
  arg2 = (uint64_t)jarg2; 
  result = (int)LLVMSetDisasmOptions(arg1,arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_SwiggedfLLVM_Disassembler_Option_UseMarkup_get___() {
  int jresult ;
  int result;
  
  result = (int)(1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_SwiggedfLLVM_Disassembler_Option_PrintImmHex_get___() {
  int jresult ;
  int result;
  
  result = (int)(2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_SwiggedfLLVM_Disassembler_Option_AsmPrinterVariant_get___() {
  int jresult ;
  int result;
  
  result = (int)(4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_SwiggedfLLVM_Disassembler_Option_SetInstrComments_get___() {
  int jresult ;
  int result;
  
  result = (int)(8);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_SwiggedfLLVM_Disassembler_Option_PrintLatency_get___() {
  int jresult ;
  int result;
  
  result = (int)(16);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_SwiggedfLLVM_DisasmDispose___(void * jarg1) {
  LLVMDisasmContextRef arg1 = (LLVMDisasmContextRef) 0 ;
  
  arg1 = jarg1; 
  LLVMDisasmDispose(arg1);
}


SWIGEXPORT void SWIGSTDCALL CSharp_SwiggedfLLVM_ResetFatalErrorHandler___() {
  LLVMResetFatalErrorHandler();
}


SWIGEXPORT void SWIGSTDCALL CSharp_SwiggedfLLVM_EnablePrettyStackTrace___() {
  LLVMEnablePrettyStackTrace();
}


SWIGEXPORT void SWIGSTDCALL CSharp_SwiggedfLLVM_LinkInMCJIT___() {
  LLVMLinkInMCJIT();
}


SWIGEXPORT void SWIGSTDCALL CSharp_SwiggedfLLVM_LinkInInterpreter___() {
  LLVMLinkInInterpreter();
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SwiggedfLLVM_CreateGenericValueOfInt___(void * jarg1, unsigned long long jarg2, unsigned int jarg3) {
  void * jresult ;
  LLVMTypeRef arg1 ;
  unsigned long long arg2 ;
  LLVMBool arg3 ;
  LLVMGenericValueRef result;
  
  arg1 = (LLVMTypeRef)jarg1; 
  arg2 = (unsigned long long)jarg2; 
  arg3 = jarg3 ? true : false; 
  result = LLVMCreateGenericValueOfInt(arg1,arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SwiggedfLLVM_CreateGenericValueOfPointer___(void * jarg1) {
  void * jresult ;
  void *arg1 = (void *) 0 ;
  LLVMGenericValueRef result;
  
  arg1 = jarg1; 
  result = LLVMCreateGenericValueOfPointer(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SwiggedfLLVM_CreateGenericValueOfFloat___(void * jarg1, double jarg2) {
  void * jresult ;
  LLVMTypeRef arg1 ;
  double arg2 ;
  LLVMGenericValueRef result;
  
  arg1 = (LLVMTypeRef)jarg1; 
  arg2 = (double)jarg2; 
  result = LLVMCreateGenericValueOfFloat(arg1,arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_SwiggedfLLVM_GenericValueIntWidth___(void * jarg1) {
  unsigned int jresult ;
  LLVMGenericValueRef arg1 ;
  unsigned int result;
  
  arg1 = (LLVMGenericValueRef)jarg1; 
  result = (unsigned int)LLVMGenericValueIntWidth(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned long long SWIGSTDCALL CSharp_SwiggedfLLVM_GenericValueToInt___(void * jarg1, unsigned int jarg2) {
  unsigned long long jresult ;
  LLVMGenericValueRef arg1 ;
  LLVMBool arg2 ;
  unsigned long long result;
  
  arg1 = (LLVMGenericValueRef)jarg1; 
  arg2 = jarg2 ? true : false; 
  result = (unsigned long long)LLVMGenericValueToInt(arg1,arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SwiggedfLLVM_GenericValueToPointer___(void * jarg1) {
  void * jresult ;
  LLVMGenericValueRef arg1 ;
  void *result = 0 ;
  
  arg1 = (LLVMGenericValueRef)jarg1; 
  result = (void *)LLVMGenericValueToPointer(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_SwiggedfLLVM_GenericValueToFloat___(void * jarg1, void * jarg2) {
  double jresult ;
  LLVMTypeRef arg1 ;
  LLVMGenericValueRef arg2 ;
  double result;
  
  arg1 = (LLVMTypeRef)jarg1; 
  arg2 = (LLVMGenericValueRef)jarg2; 
  result = (double)LLVMGenericValueToFloat(arg1,arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_SwiggedfLLVM_DisposeGenericValue___(void * jarg1) {
  LLVMGenericValueRef arg1 ;
  
  arg1 = (LLVMGenericValueRef)jarg1; 
  LLVMDisposeGenericValue(arg1);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_SwiggedfLLVM_CreateExecutionEngineForModule___(void * jarg1, void * jarg2, void * jarg3) {
  unsigned int jresult ;
  LLVMExecutionEngineRef *arg1 = (LLVMExecutionEngineRef *) 0 ;
  LLVMModuleRef arg2 ;
  char **arg3 = (char **) 0 ;
  LLVMBool result;
  
  arg1 = (LLVMExecutionEngineRef *)jarg1; 
  arg2 = (LLVMModuleRef)jarg2; 
  {
    // Used in generating wrap.cpp:
    // Converts input parameter of target type to C.
    arg3 = (char**)jarg3;
  }
  result = (LLVMBool)LLVMCreateExecutionEngineForModule(arg1,arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_SwiggedfLLVM_CreateInterpreterForModule___(void * jarg1, void * jarg2, void * jarg3) {
  unsigned int jresult ;
  LLVMExecutionEngineRef *arg1 = (LLVMExecutionEngineRef *) 0 ;
  LLVMModuleRef arg2 ;
  char **arg3 = (char **) 0 ;
  LLVMBool result;
  
  arg1 = (LLVMExecutionEngineRef *)jarg1; 
  arg2 = (LLVMModuleRef)jarg2; 
  {
    // Used in generating wrap.cpp:
    // Converts input parameter of target type to C.
    arg3 = (char**)jarg3;
  }
  result = (LLVMBool)LLVMCreateInterpreterForModule(arg1,arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_SwiggedfLLVM_CreateJITCompilerForModule___(void * jarg1, void * jarg2, unsigned int jarg3, void * jarg4) {
  unsigned int jresult ;
  LLVMExecutionEngineRef *arg1 = (LLVMExecutionEngineRef *) 0 ;
  LLVMModuleRef arg2 ;
  unsigned int arg3 ;

  // Note, we cannot assign to arg4, jarg4. a stack corruption exception will occur.
  char * targ4 ;
  char **arg4;

  LLVMBool result;
  
  arg1 = (LLVMExecutionEngineRef *)jarg1; 
  arg2 = (LLVMModuleRef)jarg2; 
  arg3 = (unsigned int)jarg3; 
  arg4 = (char **)0;
  arg4 = (char **)jarg4;
	result = (LLVMBool)LLVMCreateJITCompilerForModule(arg1,arg2,arg3,arg4);
	jresult = result; 
	return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_SwiggedfLLVM_InitializeMCJITCompilerOptions___(void * jarg1, unsigned long jarg2) {
  LLVMMCJITCompilerOptions *arg1 = (LLVMMCJITCompilerOptions *) 0 ;
  size_t arg2 ;
  
  arg1 = (LLVMMCJITCompilerOptions *)jarg1; 
  arg2 = (size_t)jarg2; 
  LLVMInitializeMCJITCompilerOptions(arg1,arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_SwiggedfLLVM_CreateMCJITCompilerForModule___(void * jarg1, void * jarg2, void * jarg3, unsigned long jarg4, void * jarg5) {
  unsigned int jresult ;
  LLVMExecutionEngineRef *arg1 = (LLVMExecutionEngineRef *) 0 ;
  LLVMModuleRef arg2 ;
  LLVMMCJITCompilerOptions *arg3 = (LLVMMCJITCompilerOptions *) 0 ;
  size_t arg4 ;
  char **arg5 = (char **) 0 ;
  LLVMBool result;
  
  arg1 = (LLVMExecutionEngineRef *)jarg1; 
  arg2 = (LLVMModuleRef)jarg2; 
  arg3 = (LLVMMCJITCompilerOptions *)jarg3; 
  arg4 = (size_t)jarg4; 
  {
    // Used in generating wrap.cpp:
    // Converts input parameter of target type to C.
    arg5 = (char**)jarg5;
  }
  result = (LLVMBool)LLVMCreateMCJITCompilerForModule(arg1,arg2,arg3,arg4,arg5);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_SwiggedfLLVM_DisposeExecutionEngine___(void * jarg1) {
  LLVMExecutionEngineRef arg1 ;
  
  arg1 = (LLVMExecutionEngineRef)jarg1; 
  LLVMDisposeExecutionEngine(arg1);
}


SWIGEXPORT void SWIGSTDCALL CSharp_SwiggedfLLVM_RunStaticConstructors___(void * jarg1) {
  LLVMExecutionEngineRef arg1 ;
  
  arg1 = (LLVMExecutionEngineRef)jarg1; 
  LLVMRunStaticConstructors(arg1);
}


SWIGEXPORT void SWIGSTDCALL CSharp_SwiggedfLLVM_RunStaticDestructors___(void * jarg1) {
  LLVMExecutionEngineRef arg1 ;
  
  arg1 = (LLVMExecutionEngineRef)jarg1; 
  LLVMRunStaticDestructors(arg1);
}


SWIGEXPORT int SWIGSTDCALL CSharp_SwiggedfLLVM_RunFunctionAsMain___(void * jarg1, void * jarg2, unsigned int jarg3, void * jarg4, void * jarg5) {
  int jresult ;
  LLVMExecutionEngineRef arg1 ;
  LLVMValueRef arg2 ;
  unsigned int arg3 ;
  char **arg4 = (char **) 0 ;
  char **arg5 = (char **) 0 ;
  int result;
  
  arg1 = (LLVMExecutionEngineRef)jarg1; 
  arg2 = (LLVMValueRef)jarg2; 
  arg3 = (unsigned int)jarg3; 
  {
    // Used in generating wrap.cpp:
    // Converts input parameter of target type to C.
    arg4 = (char**)jarg4;
  }
  {
    // Used in generating wrap.cpp:
    // Converts input parameter of target type to C.
    arg5 = (char**)jarg5;
  }
  result = (int)LLVMRunFunctionAsMain(arg1,arg2,arg3,(char const *const *)arg4,(char const *const *)arg5);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SwiggedfLLVM_RunFunction___(void * jarg1, void * jarg2, unsigned int jarg3, void * jarg4) {
  void * jresult ;
  LLVMExecutionEngineRef arg1 ;
  LLVMValueRef arg2 ;
  unsigned int arg3 ;
  LLVMGenericValueRef *arg4 = (LLVMGenericValueRef *) 0 ;
  LLVMGenericValueRef result;
  
  arg1 = (LLVMExecutionEngineRef)jarg1; 
  arg2 = (LLVMValueRef)jarg2; 
  arg3 = (unsigned int)jarg3; 
  arg4 = (LLVMGenericValueRef *)jarg4; 
  result = LLVMRunFunction(arg1,arg2,arg3,arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_SwiggedfLLVM_FreeMachineCodeForFunction___(void * jarg1, void * jarg2) {
  LLVMExecutionEngineRef arg1 ;
  LLVMValueRef arg2 ;
  
  arg1 = (LLVMExecutionEngineRef)jarg1; 
  arg2 = (LLVMValueRef)jarg2; 
  LLVMFreeMachineCodeForFunction(arg1,arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_SwiggedfLLVM_AddModule___(void * jarg1, void * jarg2) {
  LLVMExecutionEngineRef arg1 ;
  LLVMModuleRef arg2 ;
  
  arg1 = (LLVMExecutionEngineRef)jarg1; 
  arg2 = (LLVMModuleRef)jarg2; 
  LLVMAddModule(arg1,arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_SwiggedfLLVM_RemoveModule___(void * jarg1, void * jarg2, void * jarg3, void * jarg4) {
  unsigned int jresult ;
  LLVMExecutionEngineRef arg1 ;
  LLVMModuleRef arg2 ;
  LLVMModuleRef *arg3 = (LLVMModuleRef *) 0 ;
  char **arg4 = (char **) 0 ;
  LLVMBool result;
  
  arg1 = (LLVMExecutionEngineRef)jarg1; 
  arg2 = (LLVMModuleRef)jarg2; 
  arg3 = (LLVMModuleRef *)jarg3; 
  {
    // Used in generating wrap.cpp:
    // Converts input parameter of target type to C.
    arg4 = (char**)jarg4;
  }
  result = (LLVMBool)LLVMRemoveModule(arg1,arg2,arg3,arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_SwiggedfLLVM_FindFunction___(void * jarg1, char * jarg2, void * jarg3) {
  unsigned int jresult ;
  LLVMExecutionEngineRef arg1 ;
  char *arg2 = (char *) 0 ;
  LLVMValueRef *arg3 = (LLVMValueRef *) 0 ;
  LLVMBool result;
  
  arg1 = (LLVMExecutionEngineRef)jarg1; 
  arg2 = (char *)jarg2; 
  arg3 = (LLVMValueRef *)jarg3; 
  result = (LLVMBool)LLVMFindFunction(arg1,(char const *)arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SwiggedfLLVM_RecompileAndRelinkFunction___(void * jarg1, void * jarg2) {
  void * jresult ;
  LLVMExecutionEngineRef arg1 ;
  LLVMValueRef arg2 ;
  void *result = 0 ;
  
  arg1 = (LLVMExecutionEngineRef)jarg1; 
  arg2 = (LLVMValueRef)jarg2; 
  result = (void *)LLVMRecompileAndRelinkFunction(arg1,arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SwiggedfLLVM_GetExecutionEngineTargetData___(void * jarg1) {
  void * jresult ;
  LLVMExecutionEngineRef arg1 ;
  LLVMTargetDataRef result;
  
  arg1 = (LLVMExecutionEngineRef)jarg1; 
  result = LLVMGetExecutionEngineTargetData(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SwiggedfLLVM_GetExecutionEngineTargetMachine___(void * jarg1) {
  void * jresult ;
  LLVMExecutionEngineRef arg1 ;
  LLVMTargetMachineRef result;
  
  arg1 = (LLVMExecutionEngineRef)jarg1; 
  result = LLVMGetExecutionEngineTargetMachine(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_SwiggedfLLVM_AddGlobalMapping___(void * jarg1, void * jarg2, void * jarg3) {
  LLVMExecutionEngineRef arg1 ;
  LLVMValueRef arg2 ;
  void *arg3 = (void *) 0 ;
  
  arg1 = (LLVMExecutionEngineRef)jarg1; 
  arg2 = (LLVMValueRef)jarg2; 
  arg3 = jarg3; 
  LLVMAddGlobalMapping(arg1,arg2,arg3);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SwiggedfLLVM_GetPointerToGlobal___(void * jarg1, void * jarg2) {
  void * jresult ;
  LLVMExecutionEngineRef arg1 ;
  LLVMValueRef arg2 ;
  void *result = 0 ;
  
  arg1 = (LLVMExecutionEngineRef)jarg1; 
  arg2 = (LLVMValueRef)jarg2; 
  result = (void *)LLVMGetPointerToGlobal(arg1,arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned long long SWIGSTDCALL CSharp_SwiggedfLLVM_GetGlobalValueAddress___(void * jarg1, char * jarg2) {
  unsigned long long jresult ;
  LLVMExecutionEngineRef arg1 ;
  char *arg2 = (char *) 0 ;
  uint64_t result;
  
  arg1 = (LLVMExecutionEngineRef)jarg1; 
  arg2 = (char *)jarg2; 
  result = (uint64_t)LLVMGetGlobalValueAddress(arg1,(char const *)arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned long long SWIGSTDCALL CSharp_SwiggedfLLVM_GetFunctionAddress___(void * jarg1, char * jarg2) {
  unsigned long long jresult ;
  LLVMExecutionEngineRef arg1 ;
  char *arg2 = (char *) 0 ;
  uint64_t result;
  
  arg1 = (LLVMExecutionEngineRef)jarg1; 
  arg2 = (char *)jarg2; 
  result = (uint64_t)LLVMGetFunctionAddress(arg1,(char const *)arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_SwiggedfLLVM_DisposeMCJITMemoryManager___(void * jarg1) {
  LLVMMCJITMemoryManagerRef arg1 ;
  
  arg1 = (LLVMMCJITMemoryManagerRef)jarg1; 
  LLVMDisposeMCJITMemoryManager(arg1);
}


SWIGEXPORT void SWIGSTDCALL CSharp_SwiggedfLLVM_InitializeTransformUtils___(void * jarg1) {
  LLVMPassRegistryRef arg1 ;
  
  arg1 = (LLVMPassRegistryRef)jarg1; 
  LLVMInitializeTransformUtils(arg1);
}


SWIGEXPORT void SWIGSTDCALL CSharp_SwiggedfLLVM_InitializeScalarOpts___(void * jarg1) {
  LLVMPassRegistryRef arg1 ;
  
  arg1 = (LLVMPassRegistryRef)jarg1; 
  LLVMInitializeScalarOpts(arg1);
}


SWIGEXPORT void SWIGSTDCALL CSharp_SwiggedfLLVM_InitializeObjCARCOpts___(void * jarg1) {
  LLVMPassRegistryRef arg1 ;
  
  arg1 = (LLVMPassRegistryRef)jarg1; 
  LLVMInitializeObjCARCOpts(arg1);
}


SWIGEXPORT void SWIGSTDCALL CSharp_SwiggedfLLVM_InitializeVectorization___(void * jarg1) {
  LLVMPassRegistryRef arg1 ;
  
  arg1 = (LLVMPassRegistryRef)jarg1; 
  LLVMInitializeVectorization(arg1);
}


SWIGEXPORT void SWIGSTDCALL CSharp_SwiggedfLLVM_InitializeInstCombine___(void * jarg1) {
  LLVMPassRegistryRef arg1 ;
  
  arg1 = (LLVMPassRegistryRef)jarg1; 
  LLVMInitializeInstCombine(arg1);
}


SWIGEXPORT void SWIGSTDCALL CSharp_SwiggedfLLVM_InitializeIPO___(void * jarg1) {
  LLVMPassRegistryRef arg1 ;
  
  arg1 = (LLVMPassRegistryRef)jarg1; 
  LLVMInitializeIPO(arg1);
}


SWIGEXPORT void SWIGSTDCALL CSharp_SwiggedfLLVM_InitializeInstrumentation___(void * jarg1) {
  LLVMPassRegistryRef arg1 ;
  
  arg1 = (LLVMPassRegistryRef)jarg1; 
  LLVMInitializeInstrumentation(arg1);
}


SWIGEXPORT void SWIGSTDCALL CSharp_SwiggedfLLVM_InitializeAnalysis___(void * jarg1) {
  LLVMPassRegistryRef arg1 ;
  
  arg1 = (LLVMPassRegistryRef)jarg1; 
  LLVMInitializeAnalysis(arg1);
}


SWIGEXPORT void SWIGSTDCALL CSharp_SwiggedfLLVM_InitializeIPA___(void * jarg1) {
  LLVMPassRegistryRef arg1 ;
  
  arg1 = (LLVMPassRegistryRef)jarg1; 
  LLVMInitializeIPA(arg1);
}


SWIGEXPORT void SWIGSTDCALL CSharp_SwiggedfLLVM_InitializeCodeGen___(void * jarg1) {
  LLVMPassRegistryRef arg1 ;
  
  arg1 = (LLVMPassRegistryRef)jarg1; 
  LLVMInitializeCodeGen(arg1);
}


SWIGEXPORT void SWIGSTDCALL CSharp_SwiggedfLLVM_InitializeTarget___(void * jarg1) {
  LLVMPassRegistryRef arg1 ;
  
  arg1 = (LLVMPassRegistryRef)jarg1; 
  LLVMInitializeTarget(arg1);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_SwiggedfLLVM_ParseIRInContext___(void * jarg1, void * jarg2, void * jarg3, void * jarg4) {
  unsigned int jresult ;
  LLVMContextRef arg1 ;
  LLVMMemoryBufferRef arg2 ;
  LLVMModuleRef *arg3 = (LLVMModuleRef *) 0 ;
  char **arg4 = (char **) 0 ;
  LLVMBool result;
  
  arg1 = (LLVMContextRef)jarg1; 
  arg2 = (LLVMMemoryBufferRef)jarg2; 
  arg3 = (LLVMModuleRef *)jarg3; 
  {
    // Used in generating wrap.cpp:
    // Converts input parameter of target type to C.
    arg4 = (char**)jarg4;
  }
  result = (LLVMBool)LLVMParseIRInContext(arg1,arg2,arg3,arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_SwiggedfLLVM_LinkModules2___(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  LLVMModuleRef arg1 ;
  LLVMModuleRef arg2 ;
  LLVMBool result;
  
  arg1 = (LLVMModuleRef)jarg1; 
  arg2 = (LLVMModuleRef)jarg2; 
  result = (LLVMBool)LLVMLinkModules2(arg1,arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SwiggedfLLVM_OrcCreateInstance___(void * jarg1) {
  void * jresult ;
  LLVMTargetMachineRef arg1 ;
  LLVMOrcJITStackRef result;
  
  arg1 = (LLVMTargetMachineRef)jarg1; 
  result = LLVMOrcCreateInstance(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_SwiggedfLLVM_OrcGetErrorMsg___(void * jarg1) {
  char * jresult ;
  LLVMOrcJITStackRef arg1 ;
  char *result = 0 ;
  
  arg1 = (LLVMOrcJITStackRef)jarg1; 
  result = (char *)LLVMOrcGetErrorMsg(arg1);
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_SwiggedfLLVM_OrcGetMangledSymbol___(void * jarg1, void * jarg2, char * jarg3) {
  LLVMOrcJITStackRef arg1 ;
  char **arg2 = (char **) 0 ;
  char *arg3 = (char *) 0 ;
  
  arg1 = (LLVMOrcJITStackRef)jarg1; 
  {
    // Used in generating wrap.cpp:
    // Converts input parameter of target type to C.
    arg2 = (char**)jarg2;
  }
  arg3 = (char *)jarg3; 
  LLVMOrcGetMangledSymbol(arg1,arg2,(char const *)arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_SwiggedfLLVM_OrcDisposeMangledSymbol___(char * jarg1) {
  char *arg1 = (char *) 0 ;
  
  arg1 = (char *)jarg1; 
  LLVMOrcDisposeMangledSymbol(arg1);
}


SWIGEXPORT int SWIGSTDCALL CSharp_SwiggedfLLVM_OrcCreateIndirectStub___(void * jarg1, char * jarg2, unsigned long long jarg3) {
  int jresult ;
  LLVMOrcJITStackRef arg1 ;
  char *arg2 = (char *) 0 ;
  LLVMOrcTargetAddress arg3 ;
  LLVMOrcErrorCode result;
  
  arg1 = (LLVMOrcJITStackRef)jarg1; 
  arg2 = (char *)jarg2; 
  arg3 = (LLVMOrcTargetAddress)jarg3; 
  result = (LLVMOrcErrorCode)LLVMOrcCreateIndirectStub(arg1,(char const *)arg2,arg3);
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_SwiggedfLLVM_OrcSetIndirectStubPointer___(void * jarg1, char * jarg2, unsigned long long jarg3) {
  int jresult ;
  LLVMOrcJITStackRef arg1 ;
  char *arg2 = (char *) 0 ;
  LLVMOrcTargetAddress arg3 ;
  LLVMOrcErrorCode result;
  
  arg1 = (LLVMOrcJITStackRef)jarg1; 
  arg2 = (char *)jarg2; 
  arg3 = (LLVMOrcTargetAddress)jarg3; 
  result = (LLVMOrcErrorCode)LLVMOrcSetIndirectStubPointer(arg1,(char const *)arg2,arg3);
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_SwiggedfLLVM_OrcRemoveModule___(void * jarg1, unsigned int jarg2) {
  LLVMOrcJITStackRef arg1 ;
  LLVMOrcModuleHandle arg2 ;
  
  arg1 = (LLVMOrcJITStackRef)jarg1; 
  arg2 = (LLVMOrcModuleHandle)jarg2; 
  LLVMOrcRemoveModule(arg1,arg2);
}


SWIGEXPORT unsigned long long SWIGSTDCALL CSharp_SwiggedfLLVM_OrcGetSymbolAddress___(void * jarg1, char * jarg2) {
  unsigned long long jresult ;
  LLVMOrcJITStackRef arg1 ;
  char *arg2 = (char *) 0 ;
  LLVMOrcTargetAddress result;
  
  arg1 = (LLVMOrcJITStackRef)jarg1; 
  arg2 = (char *)jarg2; 
  result = (LLVMOrcTargetAddress)LLVMOrcGetSymbolAddress(arg1,(char const *)arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_SwiggedfLLVM_OrcDisposeInstance___(void * jarg1) {
  LLVMOrcJITStackRef arg1 ;
  
  arg1 = (LLVMOrcJITStackRef)jarg1; 
  LLVMOrcDisposeInstance(arg1);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_SwiggedfLLVM_LoadLibraryPermanently___(char * jarg1) {
  unsigned int jresult ;
  char *arg1 = (char *) 0 ;
  LLVMBool result;
  
  arg1 = (char *)jarg1; 
  result = (LLVMBool)LLVMLoadLibraryPermanently((char const *)arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_SwiggedfLLVM_ParseCommandLineOptions___(int jarg1, void * jarg2, char * jarg3) {
  int arg1 ;
  char **arg2 = (char **) 0 ;
  char *arg3 = (char *) 0 ;
  
  arg1 = (int)jarg1; 
  {
    // Used in generating wrap.cpp:
    // Converts input parameter of target type to C.
    arg2 = (char**)jarg2;
  }
  arg3 = (char *)jarg3; 
  LLVMParseCommandLineOptions(arg1,(char const *const *)arg2,(char const *)arg3);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SwiggedfLLVM_SearchForAddressOfSymbol___(char * jarg1) {
  void * jresult ;
  char *arg1 = (char *) 0 ;
  void *result = 0 ;
  
  arg1 = (char *)jarg1; 
  result = (void *)LLVMSearchForAddressOfSymbol((char const *)arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_SwiggedfLLVM_AddSymbol___(char * jarg1, void * jarg2) {
  char *arg1 = (char *) 0 ;
  void *arg2 = (void *) 0 ;
  
  arg1 = (char *)jarg1; 
  arg2 = jarg2; 
  LLVMAddSymbol((char const *)arg1,arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_SwiggedfLLVM_InitializeAllTargetInfos___() {
  LLVMInitializeAllTargetInfos();
}


SWIGEXPORT void SWIGSTDCALL CSharp_SwiggedfLLVM_InitializeAllTargets___() {
  LLVMInitializeAllTargets();
}


SWIGEXPORT void SWIGSTDCALL CSharp_SwiggedfLLVM_InitializeAllTargetMCs___() {
  LLVMInitializeAllTargetMCs();
}


SWIGEXPORT void SWIGSTDCALL CSharp_SwiggedfLLVM_InitializeAllAsmPrinters___() {
  LLVMInitializeAllAsmPrinters();
}


SWIGEXPORT void SWIGSTDCALL CSharp_SwiggedfLLVM_InitializeAllAsmParsers___() {
  LLVMInitializeAllAsmParsers();
}


SWIGEXPORT void SWIGSTDCALL CSharp_SwiggedfLLVM_InitializeAllDisassemblers___() {
  LLVMInitializeAllDisassemblers();
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_SwiggedfLLVM_InitializeNativeTarget___() {
  unsigned int jresult ;
  LLVMBool result;
  
  result = (LLVMBool)LLVMInitializeNativeTarget();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_SwiggedfLLVM_InitializeNativeAsmParser___() {
  unsigned int jresult ;
  LLVMBool result;
  
  result = (LLVMBool)LLVMInitializeNativeAsmParser();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_SwiggedfLLVM_InitializeNativeAsmPrinter___() {
  unsigned int jresult ;
  LLVMBool result;
  
  result = (LLVMBool)LLVMInitializeNativeAsmPrinter();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_SwiggedfLLVM_InitializeNativeDisassembler___() {
  unsigned int jresult ;
  LLVMBool result;
  
  result = (LLVMBool)LLVMInitializeNativeDisassembler();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SwiggedfLLVM_GetModuleDataLayout___(void * jarg1) {
  void * jresult ;
  LLVMModuleRef arg1 ;
  LLVMTargetDataRef result;
  
  arg1 = (LLVMModuleRef)jarg1; 
  result = LLVMGetModuleDataLayout(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_SwiggedfLLVM_SetModuleDataLayout___(void * jarg1, void * jarg2) {
  LLVMModuleRef arg1 ;
  LLVMTargetDataRef arg2 ;
  
  arg1 = (LLVMModuleRef)jarg1; 
  arg2 = (LLVMTargetDataRef)jarg2; 
  LLVMSetModuleDataLayout(arg1,arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SwiggedfLLVM_CreateTargetData___(char * jarg1) {
  void * jresult ;
  char *arg1 = (char *) 0 ;
  LLVMTargetDataRef result;
  
  arg1 = (char *)jarg1; 
  result = LLVMCreateTargetData((char const *)arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_SwiggedfLLVM_DisposeTargetData___(void * jarg1) {
  LLVMTargetDataRef arg1 ;
  
  arg1 = (LLVMTargetDataRef)jarg1; 
  LLVMDisposeTargetData(arg1);
}


SWIGEXPORT void SWIGSTDCALL CSharp_SwiggedfLLVM_AddTargetLibraryInfo___(void * jarg1, void * jarg2) {
  LLVMTargetLibraryInfoRef arg1 ;
  LLVMPassManagerRef arg2 ;
  
  arg1 = (LLVMTargetLibraryInfoRef)jarg1; 
  arg2 = (LLVMPassManagerRef)jarg2; 
  LLVMAddTargetLibraryInfo(arg1,arg2);
}


SWIGEXPORT char * SWIGSTDCALL CSharp_SwiggedfLLVM_CopyStringRepOfTargetData___(void * jarg1) {
  char * jresult ;
  LLVMTargetDataRef arg1 ;
  char *result = 0 ;
  
  arg1 = (LLVMTargetDataRef)jarg1; 
  result = (char *)LLVMCopyStringRepOfTargetData(arg1);
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_SwiggedfLLVM_ByteOrder___(void * jarg1) {
  int jresult ;
  LLVMTargetDataRef arg1 ;
  enum LLVMByteOrdering result;
  
  arg1 = (LLVMTargetDataRef)jarg1; 
  result = (enum LLVMByteOrdering)LLVMByteOrder(arg1);
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_SwiggedfLLVM_PointerSize___(void * jarg1) {
  unsigned int jresult ;
  LLVMTargetDataRef arg1 ;
  unsigned int result;
  
  arg1 = (LLVMTargetDataRef)jarg1; 
  result = (unsigned int)LLVMPointerSize(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_SwiggedfLLVM_PointerSizeForAS___(void * jarg1, unsigned int jarg2) {
  unsigned int jresult ;
  LLVMTargetDataRef arg1 ;
  unsigned int arg2 ;
  unsigned int result;
  
  arg1 = (LLVMTargetDataRef)jarg1; 
  arg2 = (unsigned int)jarg2; 
  result = (unsigned int)LLVMPointerSizeForAS(arg1,arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SwiggedfLLVM_IntPtrType___(void * jarg1) {
  void * jresult ;
  LLVMTargetDataRef arg1 ;
  LLVMTypeRef result;
  
  arg1 = (LLVMTargetDataRef)jarg1; 
  result = LLVMIntPtrType(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SwiggedfLLVM_IntPtrTypeForAS___(void * jarg1, unsigned int jarg2) {
  void * jresult ;
  LLVMTargetDataRef arg1 ;
  unsigned int arg2 ;
  LLVMTypeRef result;
  
  arg1 = (LLVMTargetDataRef)jarg1; 
  arg2 = (unsigned int)jarg2; 
  result = LLVMIntPtrTypeForAS(arg1,arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SwiggedfLLVM_IntPtrTypeInContext___(void * jarg1, void * jarg2) {
  void * jresult ;
  LLVMContextRef arg1 ;
  LLVMTargetDataRef arg2 ;
  LLVMTypeRef result;
  
  arg1 = (LLVMContextRef)jarg1; 
  arg2 = (LLVMTargetDataRef)jarg2; 
  result = LLVMIntPtrTypeInContext(arg1,arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SwiggedfLLVM_IntPtrTypeForASInContext___(void * jarg1, void * jarg2, unsigned int jarg3) {
  void * jresult ;
  LLVMContextRef arg1 ;
  LLVMTargetDataRef arg2 ;
  unsigned int arg3 ;
  LLVMTypeRef result;
  
  arg1 = (LLVMContextRef)jarg1; 
  arg2 = (LLVMTargetDataRef)jarg2; 
  arg3 = (unsigned int)jarg3; 
  result = LLVMIntPtrTypeForASInContext(arg1,arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned long long SWIGSTDCALL CSharp_SwiggedfLLVM_SizeOfTypeInBits___(void * jarg1, void * jarg2) {
  unsigned long long jresult ;
  LLVMTargetDataRef arg1 ;
  LLVMTypeRef arg2 ;
  unsigned long long result;
  
  arg1 = (LLVMTargetDataRef)jarg1; 
  arg2 = (LLVMTypeRef)jarg2; 
  result = (unsigned long long)LLVMSizeOfTypeInBits(arg1,arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned long long SWIGSTDCALL CSharp_SwiggedfLLVM_StoreSizeOfType___(void * jarg1, void * jarg2) {
  unsigned long long jresult ;
  LLVMTargetDataRef arg1 ;
  LLVMTypeRef arg2 ;
  unsigned long long result;
  
  arg1 = (LLVMTargetDataRef)jarg1; 
  arg2 = (LLVMTypeRef)jarg2; 
  result = (unsigned long long)LLVMStoreSizeOfType(arg1,arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned long long SWIGSTDCALL CSharp_SwiggedfLLVM_ABISizeOfType___(void * jarg1, void * jarg2) {
  unsigned long long jresult ;
  LLVMTargetDataRef arg1 ;
  LLVMTypeRef arg2 ;
  unsigned long long result;
  
  arg1 = (LLVMTargetDataRef)jarg1; 
  arg2 = (LLVMTypeRef)jarg2; 
  result = (unsigned long long)LLVMABISizeOfType(arg1,arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_SwiggedfLLVM_ABIAlignmentOfType___(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  LLVMTargetDataRef arg1 ;
  LLVMTypeRef arg2 ;
  unsigned int result;
  
  arg1 = (LLVMTargetDataRef)jarg1; 
  arg2 = (LLVMTypeRef)jarg2; 
  result = (unsigned int)LLVMABIAlignmentOfType(arg1,arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_SwiggedfLLVM_CallFrameAlignmentOfType___(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  LLVMTargetDataRef arg1 ;
  LLVMTypeRef arg2 ;
  unsigned int result;
  
  arg1 = (LLVMTargetDataRef)jarg1; 
  arg2 = (LLVMTypeRef)jarg2; 
  result = (unsigned int)LLVMCallFrameAlignmentOfType(arg1,arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_SwiggedfLLVM_PreferredAlignmentOfType___(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  LLVMTargetDataRef arg1 ;
  LLVMTypeRef arg2 ;
  unsigned int result;
  
  arg1 = (LLVMTargetDataRef)jarg1; 
  arg2 = (LLVMTypeRef)jarg2; 
  result = (unsigned int)LLVMPreferredAlignmentOfType(arg1,arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_SwiggedfLLVM_PreferredAlignmentOfGlobal___(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  LLVMTargetDataRef arg1 ;
  LLVMValueRef arg2 ;
  unsigned int result;
  
  arg1 = (LLVMTargetDataRef)jarg1; 
  arg2 = (LLVMValueRef)jarg2; 
  result = (unsigned int)LLVMPreferredAlignmentOfGlobal(arg1,arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_SwiggedfLLVM_ElementAtOffset___(void * jarg1, void * jarg2, unsigned long long jarg3) {
  unsigned int jresult ;
  LLVMTargetDataRef arg1 ;
  LLVMTypeRef arg2 ;
  unsigned long long arg3 ;
  unsigned int result;
  
  arg1 = (LLVMTargetDataRef)jarg1; 
  arg2 = (LLVMTypeRef)jarg2; 
  arg3 = (unsigned long long)jarg3; 
  result = (unsigned int)LLVMElementAtOffset(arg1,arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned long long SWIGSTDCALL CSharp_SwiggedfLLVM_OffsetOfElement___(void * jarg1, void * jarg2, unsigned int jarg3) {
  unsigned long long jresult ;
  LLVMTargetDataRef arg1 ;
  LLVMTypeRef arg2 ;
  unsigned int arg3 ;
  unsigned long long result;
  
  arg1 = (LLVMTargetDataRef)jarg1; 
  arg2 = (LLVMTypeRef)jarg2; 
  arg3 = (unsigned int)jarg3; 
  result = (unsigned long long)LLVMOffsetOfElement(arg1,arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SwiggedfLLVM_GetFirstTarget___() {
  void * jresult ;
  LLVMTargetRef result;
  
  result = LLVMGetFirstTarget();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SwiggedfLLVM_GetNextTarget___(void * jarg1) {
  void * jresult ;
  LLVMTargetRef arg1 ;
  LLVMTargetRef result;
  
  arg1 = (LLVMTargetRef)jarg1; 
  result = LLVMGetNextTarget(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SwiggedfLLVM_GetTargetFromName___(char * jarg1) {
  void * jresult ;
  char *arg1 = (char *) 0 ;
  LLVMTargetRef result;
  
  arg1 = (char *)jarg1; 
  result = LLVMGetTargetFromName((char const *)arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_SwiggedfLLVM_GetTargetFromTriple___(char * jarg1, void * jarg2, void * jarg3) {
  unsigned int jresult ;
  char *arg1 = (char *) 0 ;
  LLVMTargetRef *arg2 = (LLVMTargetRef *) 0 ;
  char **arg3 = (char **) 0 ;
  LLVMBool result;
  
  arg1 = (char *)jarg1; 
  arg2 = (LLVMTargetRef *)jarg2; 
  {
    // Used in generating wrap.cpp:
    // Converts input parameter of target type to C.
    arg3 = (char**)jarg3;
  }
  result = (LLVMBool)LLVMGetTargetFromTriple((char const *)arg1,arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_SwiggedfLLVM_GetTargetName___(void * jarg1) {
  char * jresult ;
  LLVMTargetRef arg1 ;
  char *result = 0 ;
  
  arg1 = (LLVMTargetRef)jarg1; 
  result = (char *)LLVMGetTargetName(arg1);
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_SwiggedfLLVM_GetTargetDescription___(void * jarg1) {
  char * jresult ;
  LLVMTargetRef arg1 ;
  char *result = 0 ;
  
  arg1 = (LLVMTargetRef)jarg1; 
  result = (char *)LLVMGetTargetDescription(arg1);
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_SwiggedfLLVM_TargetHasJIT___(void * jarg1) {
  unsigned int jresult ;
  LLVMTargetRef arg1 ;
  LLVMBool result;
  
  arg1 = (LLVMTargetRef)jarg1; 
  result = (LLVMBool)LLVMTargetHasJIT(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_SwiggedfLLVM_TargetHasTargetMachine___(void * jarg1) {
  unsigned int jresult ;
  LLVMTargetRef arg1 ;
  LLVMBool result;
  
  arg1 = (LLVMTargetRef)jarg1; 
  result = (LLVMBool)LLVMTargetHasTargetMachine(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_SwiggedfLLVM_TargetHasAsmBackend___(void * jarg1) {
  unsigned int jresult ;
  LLVMTargetRef arg1 ;
  LLVMBool result;
  
  arg1 = (LLVMTargetRef)jarg1; 
  result = (LLVMBool)LLVMTargetHasAsmBackend(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SwiggedfLLVM_CreateTargetMachine___(void * jarg1, char * jarg2, char * jarg3, char * jarg4, int jarg5, int jarg6, int jarg7) {
  void * jresult ;
  LLVMTargetRef arg1 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  char *arg4 = (char *) 0 ;
  LLVMCodeGenOptLevel arg5 ;
  LLVMRelocMode arg6 ;
  LLVMCodeModel arg7 ;
  LLVMTargetMachineRef result;
  
  arg1 = (LLVMTargetRef)jarg1; 
  arg2 = (char *)jarg2; 
  arg3 = (char *)jarg3; 
  arg4 = (char *)jarg4; 
  arg5 = (LLVMCodeGenOptLevel)jarg5; 
  arg6 = (LLVMRelocMode)jarg6; 
  arg7 = (LLVMCodeModel)jarg7; 
  result = LLVMCreateTargetMachine(arg1,(char const *)arg2,(char const *)arg3,(char const *)arg4,arg5,arg6,arg7);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_SwiggedfLLVM_DisposeTargetMachine___(void * jarg1) {
  LLVMTargetMachineRef arg1 ;
  
  arg1 = (LLVMTargetMachineRef)jarg1; 
  LLVMDisposeTargetMachine(arg1);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SwiggedfLLVM_GetTargetMachineTarget___(void * jarg1) {
  void * jresult ;
  LLVMTargetMachineRef arg1 ;
  LLVMTargetRef result;
  
  arg1 = (LLVMTargetMachineRef)jarg1; 
  result = LLVMGetTargetMachineTarget(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_SwiggedfLLVM_GetTargetMachineTriple___(void * jarg1) {
  char * jresult ;
  LLVMTargetMachineRef arg1 ;
  char *result = 0 ;
  
  arg1 = (LLVMTargetMachineRef)jarg1; 
  result = (char *)LLVMGetTargetMachineTriple(arg1);
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_SwiggedfLLVM_GetTargetMachineCPU___(void * jarg1) {
  char * jresult ;
  LLVMTargetMachineRef arg1 ;
  char *result = 0 ;
  
  arg1 = (LLVMTargetMachineRef)jarg1; 
  result = (char *)LLVMGetTargetMachineCPU(arg1);
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_SwiggedfLLVM_GetTargetMachineFeatureString___(void * jarg1) {
  char * jresult ;
  LLVMTargetMachineRef arg1 ;
  char *result = 0 ;
  
  arg1 = (LLVMTargetMachineRef)jarg1; 
  result = (char *)LLVMGetTargetMachineFeatureString(arg1);
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SwiggedfLLVM_CreateTargetDataLayout___(void * jarg1) {
  void * jresult ;
  LLVMTargetMachineRef arg1 ;
  LLVMTargetDataRef result;
  
  arg1 = (LLVMTargetMachineRef)jarg1; 
  result = LLVMCreateTargetDataLayout(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_SwiggedfLLVM_SetTargetMachineAsmVerbosity___(void * jarg1, unsigned int jarg2) {
  LLVMTargetMachineRef arg1 ;
  LLVMBool arg2 ;
  
  arg1 = (LLVMTargetMachineRef)jarg1; 
  arg2 = jarg2 ? true : false; 
  LLVMSetTargetMachineAsmVerbosity(arg1,arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_SwiggedfLLVM_TargetMachineEmitToFile___(void * jarg1, void * jarg2, char * jarg3, int jarg4, void * jarg5) {
  unsigned int jresult ;
  LLVMTargetMachineRef arg1 ;
  LLVMModuleRef arg2 ;
  char *arg3 = (char *) 0 ;
  LLVMCodeGenFileType arg4 ;
  char **arg5 = (char **) 0 ;
  LLVMBool result;
  
  arg1 = (LLVMTargetMachineRef)jarg1; 
  arg2 = (LLVMModuleRef)jarg2; 
  arg3 = (char *)jarg3; 
  arg4 = (LLVMCodeGenFileType)jarg4; 
  {
    // Used in generating wrap.cpp:
    // Converts input parameter of target type to C.
    arg5 = (char**)jarg5;
  }
  result = (LLVMBool)LLVMTargetMachineEmitToFile(arg1,arg2,arg3,arg4,arg5);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_SwiggedfLLVM_TargetMachineEmitToMemoryBuffer___(void * jarg1, void * jarg2, int jarg3, void * jarg4, void * jarg5) {
  unsigned int jresult ;
  LLVMTargetMachineRef arg1 ;
  LLVMModuleRef arg2 ;
  LLVMCodeGenFileType arg3 ;
  char **arg4 = (char **) 0 ;
  LLVMMemoryBufferRef *arg5 = (LLVMMemoryBufferRef *) 0 ;
  LLVMBool result;
  
  arg1 = (LLVMTargetMachineRef)jarg1; 
  arg2 = (LLVMModuleRef)jarg2; 
  arg3 = (LLVMCodeGenFileType)jarg3; 
  {
    // Used in generating wrap.cpp:
    // Converts input parameter of target type to C.
    arg4 = (char**)jarg4;
  }
  arg5 = (LLVMMemoryBufferRef *)jarg5; 
  result = (LLVMBool)LLVMTargetMachineEmitToMemoryBuffer(arg1,arg2,arg3,arg4,arg5);
  jresult = result; 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_SwiggedfLLVM_GetDefaultTargetTriple___() {
  char * jresult ;
  char *result = 0 ;
  
  result = (char *)LLVMGetDefaultTargetTriple();
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_SwiggedfLLVM_AddAnalysisPasses___(void * jarg1, void * jarg2) {
  LLVMTargetMachineRef arg1 ;
  LLVMPassManagerRef arg2 ;
  
  arg1 = (LLVMTargetMachineRef)jarg1; 
  arg2 = (LLVMPassManagerRef)jarg2; 
  LLVMAddAnalysisPasses(arg1,arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_SwiggedfLLVM_AddArgumentPromotionPass___(void * jarg1) {
  LLVMPassManagerRef arg1 ;
  
  arg1 = (LLVMPassManagerRef)jarg1; 
  LLVMAddArgumentPromotionPass(arg1);
}


SWIGEXPORT void SWIGSTDCALL CSharp_SwiggedfLLVM_AddConstantMergePass___(void * jarg1) {
  LLVMPassManagerRef arg1 ;
  
  arg1 = (LLVMPassManagerRef)jarg1; 
  LLVMAddConstantMergePass(arg1);
}


SWIGEXPORT void SWIGSTDCALL CSharp_SwiggedfLLVM_AddDeadArgEliminationPass___(void * jarg1) {
  LLVMPassManagerRef arg1 ;
  
  arg1 = (LLVMPassManagerRef)jarg1; 
  LLVMAddDeadArgEliminationPass(arg1);
}


SWIGEXPORT void SWIGSTDCALL CSharp_SwiggedfLLVM_AddFunctionAttrsPass___(void * jarg1) {
  LLVMPassManagerRef arg1 ;
  
  arg1 = (LLVMPassManagerRef)jarg1; 
  LLVMAddFunctionAttrsPass(arg1);
}


SWIGEXPORT void SWIGSTDCALL CSharp_SwiggedfLLVM_AddFunctionInliningPass___(void * jarg1) {
  LLVMPassManagerRef arg1 ;
  
  arg1 = (LLVMPassManagerRef)jarg1; 
  LLVMAddFunctionInliningPass(arg1);
}


SWIGEXPORT void SWIGSTDCALL CSharp_SwiggedfLLVM_AddAlwaysInlinerPass___(void * jarg1) {
  LLVMPassManagerRef arg1 ;
  
  arg1 = (LLVMPassManagerRef)jarg1; 
  LLVMAddAlwaysInlinerPass(arg1);
}


SWIGEXPORT void SWIGSTDCALL CSharp_SwiggedfLLVM_AddGlobalDCEPass___(void * jarg1) {
  LLVMPassManagerRef arg1 ;
  
  arg1 = (LLVMPassManagerRef)jarg1; 
  LLVMAddGlobalDCEPass(arg1);
}


SWIGEXPORT void SWIGSTDCALL CSharp_SwiggedfLLVM_AddGlobalOptimizerPass___(void * jarg1) {
  LLVMPassManagerRef arg1 ;
  
  arg1 = (LLVMPassManagerRef)jarg1; 
  LLVMAddGlobalOptimizerPass(arg1);
}


SWIGEXPORT void SWIGSTDCALL CSharp_SwiggedfLLVM_AddIPConstantPropagationPass___(void * jarg1) {
  LLVMPassManagerRef arg1 ;
  
  arg1 = (LLVMPassManagerRef)jarg1; 
  LLVMAddIPConstantPropagationPass(arg1);
}


SWIGEXPORT void SWIGSTDCALL CSharp_SwiggedfLLVM_AddPruneEHPass___(void * jarg1) {
  LLVMPassManagerRef arg1 ;
  
  arg1 = (LLVMPassManagerRef)jarg1; 
  LLVMAddPruneEHPass(arg1);
}


SWIGEXPORT void SWIGSTDCALL CSharp_SwiggedfLLVM_AddIPSCCPPass___(void * jarg1) {
  LLVMPassManagerRef arg1 ;
  
  arg1 = (LLVMPassManagerRef)jarg1; 
  LLVMAddIPSCCPPass(arg1);
}


SWIGEXPORT void SWIGSTDCALL CSharp_SwiggedfLLVM_AddInternalizePass___(void * jarg1, unsigned int jarg2) {
  LLVMPassManagerRef arg1 ;
  unsigned int arg2 ;
  
  arg1 = (LLVMPassManagerRef)jarg1; 
  arg2 = (unsigned int)jarg2; 
  LLVMAddInternalizePass(arg1,arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_SwiggedfLLVM_AddStripDeadPrototypesPass___(void * jarg1) {
  LLVMPassManagerRef arg1 ;
  
  arg1 = (LLVMPassManagerRef)jarg1; 
  LLVMAddStripDeadPrototypesPass(arg1);
}


SWIGEXPORT void SWIGSTDCALL CSharp_SwiggedfLLVM_AddStripSymbolsPass___(void * jarg1) {
  LLVMPassManagerRef arg1 ;
  
  arg1 = (LLVMPassManagerRef)jarg1; 
  LLVMAddStripSymbolsPass(arg1);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SwiggedfLLVM_PassManagerBuilderCreate___() {
  void * jresult ;
  LLVMPassManagerBuilderRef result;
  
  result = LLVMPassManagerBuilderCreate();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_SwiggedfLLVM_PassManagerBuilderDispose___(void * jarg1) {
  LLVMPassManagerBuilderRef arg1 ;
  
  arg1 = (LLVMPassManagerBuilderRef)jarg1; 
  LLVMPassManagerBuilderDispose(arg1);
}


SWIGEXPORT void SWIGSTDCALL CSharp_SwiggedfLLVM_PassManagerBuilderSetOptLevel___(void * jarg1, unsigned int jarg2) {
  LLVMPassManagerBuilderRef arg1 ;
  unsigned int arg2 ;
  
  arg1 = (LLVMPassManagerBuilderRef)jarg1; 
  arg2 = (unsigned int)jarg2; 
  LLVMPassManagerBuilderSetOptLevel(arg1,arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_SwiggedfLLVM_PassManagerBuilderSetSizeLevel___(void * jarg1, unsigned int jarg2) {
  LLVMPassManagerBuilderRef arg1 ;
  unsigned int arg2 ;
  
  arg1 = (LLVMPassManagerBuilderRef)jarg1; 
  arg2 = (unsigned int)jarg2; 
  LLVMPassManagerBuilderSetSizeLevel(arg1,arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_SwiggedfLLVM_PassManagerBuilderSetDisableUnitAtATime___(void * jarg1, unsigned int jarg2) {
  LLVMPassManagerBuilderRef arg1 ;
  LLVMBool arg2 ;
  
  arg1 = (LLVMPassManagerBuilderRef)jarg1; 
  arg2 = jarg2 ? true : false; 
  LLVMPassManagerBuilderSetDisableUnitAtATime(arg1,arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_SwiggedfLLVM_PassManagerBuilderSetDisableUnrollLoops___(void * jarg1, unsigned int jarg2) {
  LLVMPassManagerBuilderRef arg1 ;
  LLVMBool arg2 ;
  
  arg1 = (LLVMPassManagerBuilderRef)jarg1; 
  arg2 = jarg2 ? true : false; 
  LLVMPassManagerBuilderSetDisableUnrollLoops(arg1,arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_SwiggedfLLVM_PassManagerBuilderSetDisableSimplifyLibCalls___(void * jarg1, unsigned int jarg2) {
  LLVMPassManagerBuilderRef arg1 ;
  LLVMBool arg2 ;
  
  arg1 = (LLVMPassManagerBuilderRef)jarg1; 
  arg2 = jarg2 ? true : false; 
  LLVMPassManagerBuilderSetDisableSimplifyLibCalls(arg1,arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_SwiggedfLLVM_PassManagerBuilderUseInlinerWithThreshold___(void * jarg1, unsigned int jarg2) {
  LLVMPassManagerBuilderRef arg1 ;
  unsigned int arg2 ;
  
  arg1 = (LLVMPassManagerBuilderRef)jarg1; 
  arg2 = (unsigned int)jarg2; 
  LLVMPassManagerBuilderUseInlinerWithThreshold(arg1,arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_SwiggedfLLVM_PassManagerBuilderPopulateFunctionPassManager___(void * jarg1, void * jarg2) {
  LLVMPassManagerBuilderRef arg1 ;
  LLVMPassManagerRef arg2 ;
  
  arg1 = (LLVMPassManagerBuilderRef)jarg1; 
  arg2 = (LLVMPassManagerRef)jarg2; 
  LLVMPassManagerBuilderPopulateFunctionPassManager(arg1,arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_SwiggedfLLVM_PassManagerBuilderPopulateModulePassManager___(void * jarg1, void * jarg2) {
  LLVMPassManagerBuilderRef arg1 ;
  LLVMPassManagerRef arg2 ;
  
  arg1 = (LLVMPassManagerBuilderRef)jarg1; 
  arg2 = (LLVMPassManagerRef)jarg2; 
  LLVMPassManagerBuilderPopulateModulePassManager(arg1,arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_SwiggedfLLVM_PassManagerBuilderPopulateLTOPassManager___(void * jarg1, void * jarg2, unsigned int jarg3, unsigned int jarg4) {
  LLVMPassManagerBuilderRef arg1 ;
  LLVMPassManagerRef arg2 ;
  LLVMBool arg3 ;
  LLVMBool arg4 ;
  
  arg1 = (LLVMPassManagerBuilderRef)jarg1; 
  arg2 = (LLVMPassManagerRef)jarg2; 
  arg3 = jarg3 ? true : false; 
  arg4 = jarg4 ? true : false; 
  LLVMPassManagerBuilderPopulateLTOPassManager(arg1,arg2,arg3,arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_SwiggedfLLVM_AddAggressiveDCEPass___(void * jarg1) {
  LLVMPassManagerRef arg1 ;
  
  arg1 = (LLVMPassManagerRef)jarg1; 
  LLVMAddAggressiveDCEPass(arg1);
}


SWIGEXPORT void SWIGSTDCALL CSharp_SwiggedfLLVM_AddBitTrackingDCEPass___(void * jarg1) {
  LLVMPassManagerRef arg1 ;
  
  arg1 = (LLVMPassManagerRef)jarg1; 
  LLVMAddBitTrackingDCEPass(arg1);
}


SWIGEXPORT void SWIGSTDCALL CSharp_SwiggedfLLVM_AddAlignmentFromAssumptionsPass___(void * jarg1) {
  LLVMPassManagerRef arg1 ;
  
  arg1 = (LLVMPassManagerRef)jarg1; 
  LLVMAddAlignmentFromAssumptionsPass(arg1);
}


SWIGEXPORT void SWIGSTDCALL CSharp_SwiggedfLLVM_AddCFGSimplificationPass___(void * jarg1) {
  LLVMPassManagerRef arg1 ;
  
  arg1 = (LLVMPassManagerRef)jarg1; 
  LLVMAddCFGSimplificationPass(arg1);
}


SWIGEXPORT void SWIGSTDCALL CSharp_SwiggedfLLVM_AddDeadStoreEliminationPass___(void * jarg1) {
  LLVMPassManagerRef arg1 ;
  
  arg1 = (LLVMPassManagerRef)jarg1; 
  LLVMAddDeadStoreEliminationPass(arg1);
}


SWIGEXPORT void SWIGSTDCALL CSharp_SwiggedfLLVM_AddScalarizerPass___(void * jarg1) {
  LLVMPassManagerRef arg1 ;
  
  arg1 = (LLVMPassManagerRef)jarg1; 
  LLVMAddScalarizerPass(arg1);
}


SWIGEXPORT void SWIGSTDCALL CSharp_SwiggedfLLVM_AddMergedLoadStoreMotionPass___(void * jarg1) {
  LLVMPassManagerRef arg1 ;
  
  arg1 = (LLVMPassManagerRef)jarg1; 
  LLVMAddMergedLoadStoreMotionPass(arg1);
}


SWIGEXPORT void SWIGSTDCALL CSharp_SwiggedfLLVM_AddGVNPass___(void * jarg1) {
  LLVMPassManagerRef arg1 ;
  
  arg1 = (LLVMPassManagerRef)jarg1; 
  LLVMAddGVNPass(arg1);
}


SWIGEXPORT void SWIGSTDCALL CSharp_SwiggedfLLVM_AddNewGVNPass___(void * jarg1) {
  LLVMPassManagerRef arg1 ;
  
  arg1 = (LLVMPassManagerRef)jarg1; 
  LLVMAddNewGVNPass(arg1);
}


SWIGEXPORT void SWIGSTDCALL CSharp_SwiggedfLLVM_AddIndVarSimplifyPass___(void * jarg1) {
  LLVMPassManagerRef arg1 ;
  
  arg1 = (LLVMPassManagerRef)jarg1; 
  LLVMAddIndVarSimplifyPass(arg1);
}


SWIGEXPORT void SWIGSTDCALL CSharp_SwiggedfLLVM_AddInstructionCombiningPass___(void * jarg1) {
  LLVMPassManagerRef arg1 ;
  
  arg1 = (LLVMPassManagerRef)jarg1; 
  LLVMAddInstructionCombiningPass(arg1);
}


SWIGEXPORT void SWIGSTDCALL CSharp_SwiggedfLLVM_AddJumpThreadingPass___(void * jarg1) {
  LLVMPassManagerRef arg1 ;
  
  arg1 = (LLVMPassManagerRef)jarg1; 
  LLVMAddJumpThreadingPass(arg1);
}


SWIGEXPORT void SWIGSTDCALL CSharp_SwiggedfLLVM_AddLICMPass___(void * jarg1) {
  LLVMPassManagerRef arg1 ;
  
  arg1 = (LLVMPassManagerRef)jarg1; 
  LLVMAddLICMPass(arg1);
}


SWIGEXPORT void SWIGSTDCALL CSharp_SwiggedfLLVM_AddLoopDeletionPass___(void * jarg1) {
  LLVMPassManagerRef arg1 ;
  
  arg1 = (LLVMPassManagerRef)jarg1; 
  LLVMAddLoopDeletionPass(arg1);
}


SWIGEXPORT void SWIGSTDCALL CSharp_SwiggedfLLVM_AddLoopIdiomPass___(void * jarg1) {
  LLVMPassManagerRef arg1 ;
  
  arg1 = (LLVMPassManagerRef)jarg1; 
  LLVMAddLoopIdiomPass(arg1);
}


SWIGEXPORT void SWIGSTDCALL CSharp_SwiggedfLLVM_AddLoopRotatePass___(void * jarg1) {
  LLVMPassManagerRef arg1 ;
  
  arg1 = (LLVMPassManagerRef)jarg1; 
  LLVMAddLoopRotatePass(arg1);
}


SWIGEXPORT void SWIGSTDCALL CSharp_SwiggedfLLVM_AddLoopRerollPass___(void * jarg1) {
  LLVMPassManagerRef arg1 ;
  
  arg1 = (LLVMPassManagerRef)jarg1; 
  LLVMAddLoopRerollPass(arg1);
}


SWIGEXPORT void SWIGSTDCALL CSharp_SwiggedfLLVM_AddLoopUnrollPass___(void * jarg1) {
  LLVMPassManagerRef arg1 ;
  
  arg1 = (LLVMPassManagerRef)jarg1; 
  LLVMAddLoopUnrollPass(arg1);
}


SWIGEXPORT void SWIGSTDCALL CSharp_SwiggedfLLVM_AddLoopUnswitchPass___(void * jarg1) {
  LLVMPassManagerRef arg1 ;
  
  arg1 = (LLVMPassManagerRef)jarg1; 
  LLVMAddLoopUnswitchPass(arg1);
}


SWIGEXPORT void SWIGSTDCALL CSharp_SwiggedfLLVM_AddMemCpyOptPass___(void * jarg1) {
  LLVMPassManagerRef arg1 ;
  
  arg1 = (LLVMPassManagerRef)jarg1; 
  LLVMAddMemCpyOptPass(arg1);
}


SWIGEXPORT void SWIGSTDCALL CSharp_SwiggedfLLVM_AddPartiallyInlineLibCallsPass___(void * jarg1) {
  LLVMPassManagerRef arg1 ;
  
  arg1 = (LLVMPassManagerRef)jarg1; 
  LLVMAddPartiallyInlineLibCallsPass(arg1);
}


SWIGEXPORT void SWIGSTDCALL CSharp_SwiggedfLLVM_AddLowerSwitchPass___(void * jarg1) {
  LLVMPassManagerRef arg1 ;
  
  arg1 = (LLVMPassManagerRef)jarg1; 
  LLVMAddLowerSwitchPass(arg1);
}


SWIGEXPORT void SWIGSTDCALL CSharp_SwiggedfLLVM_AddPromoteMemoryToRegisterPass___(void * jarg1) {
  LLVMPassManagerRef arg1 ;
  
  arg1 = (LLVMPassManagerRef)jarg1; 
  LLVMAddPromoteMemoryToRegisterPass(arg1);
}


SWIGEXPORT void SWIGSTDCALL CSharp_SwiggedfLLVM_AddReassociatePass___(void * jarg1) {
  LLVMPassManagerRef arg1 ;
  
  arg1 = (LLVMPassManagerRef)jarg1; 
  LLVMAddReassociatePass(arg1);
}


SWIGEXPORT void SWIGSTDCALL CSharp_SwiggedfLLVM_AddSCCPPass___(void * jarg1) {
  LLVMPassManagerRef arg1 ;
  
  arg1 = (LLVMPassManagerRef)jarg1; 
  LLVMAddSCCPPass(arg1);
}


SWIGEXPORT void SWIGSTDCALL CSharp_SwiggedfLLVM_AddScalarReplAggregatesPass___(void * jarg1) {
  LLVMPassManagerRef arg1 ;
  
  arg1 = (LLVMPassManagerRef)jarg1; 
  LLVMAddScalarReplAggregatesPass(arg1);
}


SWIGEXPORT void SWIGSTDCALL CSharp_SwiggedfLLVM_AddScalarReplAggregatesPassSSA___(void * jarg1) {
  LLVMPassManagerRef arg1 ;
  
  arg1 = (LLVMPassManagerRef)jarg1; 
  LLVMAddScalarReplAggregatesPassSSA(arg1);
}


SWIGEXPORT void SWIGSTDCALL CSharp_SwiggedfLLVM_AddScalarReplAggregatesPassWithThreshold___(void * jarg1, int jarg2) {
  LLVMPassManagerRef arg1 ;
  int arg2 ;
  
  arg1 = (LLVMPassManagerRef)jarg1; 
  arg2 = (int)jarg2; 
  LLVMAddScalarReplAggregatesPassWithThreshold(arg1,arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_SwiggedfLLVM_AddSimplifyLibCallsPass___(void * jarg1) {
  LLVMPassManagerRef arg1 ;
  
  arg1 = (LLVMPassManagerRef)jarg1; 
  LLVMAddSimplifyLibCallsPass(arg1);
}


SWIGEXPORT void SWIGSTDCALL CSharp_SwiggedfLLVM_AddTailCallEliminationPass___(void * jarg1) {
  LLVMPassManagerRef arg1 ;
  
  arg1 = (LLVMPassManagerRef)jarg1; 
  LLVMAddTailCallEliminationPass(arg1);
}


SWIGEXPORT void SWIGSTDCALL CSharp_SwiggedfLLVM_AddConstantPropagationPass___(void * jarg1) {
  LLVMPassManagerRef arg1 ;
  
  arg1 = (LLVMPassManagerRef)jarg1; 
  LLVMAddConstantPropagationPass(arg1);
}


SWIGEXPORT void SWIGSTDCALL CSharp_SwiggedfLLVM_AddDemoteMemoryToRegisterPass___(void * jarg1) {
  LLVMPassManagerRef arg1 ;
  
  arg1 = (LLVMPassManagerRef)jarg1; 
  LLVMAddDemoteMemoryToRegisterPass(arg1);
}


SWIGEXPORT void SWIGSTDCALL CSharp_SwiggedfLLVM_AddVerifierPass___(void * jarg1) {
  LLVMPassManagerRef arg1 ;
  
  arg1 = (LLVMPassManagerRef)jarg1; 
  LLVMAddVerifierPass(arg1);
}


SWIGEXPORT void SWIGSTDCALL CSharp_SwiggedfLLVM_AddCorrelatedValuePropagationPass___(void * jarg1) {
  LLVMPassManagerRef arg1 ;
  
  arg1 = (LLVMPassManagerRef)jarg1; 
  LLVMAddCorrelatedValuePropagationPass(arg1);
}


SWIGEXPORT void SWIGSTDCALL CSharp_SwiggedfLLVM_AddEarlyCSEPass___(void * jarg1) {
  LLVMPassManagerRef arg1 ;
  
  arg1 = (LLVMPassManagerRef)jarg1; 
  LLVMAddEarlyCSEPass(arg1);
}


SWIGEXPORT void SWIGSTDCALL CSharp_SwiggedfLLVM_AddEarlyCSEMemSSAPass___(void * jarg1) {
  LLVMPassManagerRef arg1 ;
  
  arg1 = (LLVMPassManagerRef)jarg1; 
  LLVMAddEarlyCSEMemSSAPass(arg1);
}


SWIGEXPORT void SWIGSTDCALL CSharp_SwiggedfLLVM_AddLowerExpectIntrinsicPass___(void * jarg1) {
  LLVMPassManagerRef arg1 ;
  
  arg1 = (LLVMPassManagerRef)jarg1; 
  LLVMAddLowerExpectIntrinsicPass(arg1);
}


SWIGEXPORT void SWIGSTDCALL CSharp_SwiggedfLLVM_AddTypeBasedAliasAnalysisPass___(void * jarg1) {
  LLVMPassManagerRef arg1 ;
  
  arg1 = (LLVMPassManagerRef)jarg1; 
  LLVMAddTypeBasedAliasAnalysisPass(arg1);
}


SWIGEXPORT void SWIGSTDCALL CSharp_SwiggedfLLVM_AddScopedNoAliasAAPass___(void * jarg1) {
  LLVMPassManagerRef arg1 ;
  
  arg1 = (LLVMPassManagerRef)jarg1; 
  LLVMAddScopedNoAliasAAPass(arg1);
}


SWIGEXPORT void SWIGSTDCALL CSharp_SwiggedfLLVM_AddBasicAliasAnalysisPass___(void * jarg1) {
  LLVMPassManagerRef arg1 ;
  
  arg1 = (LLVMPassManagerRef)jarg1; 
  LLVMAddBasicAliasAnalysisPass(arg1);
}


SWIGEXPORT void SWIGSTDCALL CSharp_SwiggedfLLVM_AddBBVectorizePass___(void * jarg1) {
  LLVMPassManagerRef arg1 ;
  
  arg1 = (LLVMPassManagerRef)jarg1; 
  LLVMAddBBVectorizePass(arg1);
}


SWIGEXPORT void SWIGSTDCALL CSharp_SwiggedfLLVM_AddLoopVectorizePass___(void * jarg1) {
  LLVMPassManagerRef arg1 ;
  
  arg1 = (LLVMPassManagerRef)jarg1; 
  LLVMAddLoopVectorizePass(arg1);
}


SWIGEXPORT void SWIGSTDCALL CSharp_SwiggedfLLVM_AddSLPVectorizePass___(void * jarg1) {
  LLVMPassManagerRef arg1 ;
  
  arg1 = (LLVMPassManagerRef)jarg1; 
  LLVMAddSLPVectorizePass(arg1);
}


#ifdef __cplusplus
}
#endif

